### YamlMime:ManagedReference
items:
- uid: Intranet.Common.Role.RoleSettings
  commentId: T:Intranet.Common.Role.RoleSettings
  id: RoleSettings
  parent: Intranet.Common.Role
  children:
  - Intranet.Common.Role.RoleSettings.LaborAdmin
  - Intranet.Common.Role.RoleSettings.LaborUser
  - Intranet.Common.Role.RoleSettings.LaborViewer
  langs:
  - csharp
  - vb
  name: RoleSettings
  nameWithType: RoleSettings
  fullName: Intranet.Common.Role.RoleSettings
  type: Class
  source:
    remote:
      path: .src/Intranet/Common/Role/RoleSettings.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: RoleSettings
    path: .src/Intranet/Common/Role/RoleSettings.cs
    startLine: 11
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common.Role
  summary: "\nClass Representing Settings for the Roles \n"
  example: []
  syntax:
    content: public static class RoleSettings
    content.vb: Public Module RoleSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Intranet.Common.Role.RoleSettings.LaborAdmin
  commentId: F:Intranet.Common.Role.RoleSettings.LaborAdmin
  id: LaborAdmin
  parent: Intranet.Common.Role.RoleSettings
  langs:
  - csharp
  - vb
  name: LaborAdmin
  nameWithType: RoleSettings.LaborAdmin
  fullName: Intranet.Common.Role.RoleSettings.LaborAdmin
  type: Field
  source:
    remote:
      path: .src/Intranet/Common/Role/RoleSettings.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: LaborAdmin
    path: .src/Intranet/Common/Role/RoleSettings.cs
    startLine: 16
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common.Role
  summary: "\nThe Admin of the Labor, can do everything in the Labor. Inclussive Settings.\n"
  example: []
  syntax:
    content: public const string LaborAdmin = "Everyone"
    content.vb: Public Const LaborAdmin As String = "Everyone"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Intranet.Common.Role.RoleSettings.LaborUser
  commentId: F:Intranet.Common.Role.RoleSettings.LaborUser
  id: LaborUser
  parent: Intranet.Common.Role.RoleSettings
  langs:
  - csharp
  - vb
  name: LaborUser
  nameWithType: RoleSettings.LaborUser
  fullName: Intranet.Common.Role.RoleSettings.LaborUser
  type: Field
  source:
    remote:
      path: .src/Intranet/Common/Role/RoleSettings.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: LaborUser
    path: .src/Intranet/Common/Role/RoleSettings.cs
    startLine: 20
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common.Role
  summary: "\nThe User of the Labor, only has read and write access.\n"
  example: []
  syntax:
    content: public const string LaborUser = "LaborUser"
    content.vb: Public Const LaborUser As String = "LaborUser"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Intranet.Common.Role.RoleSettings.LaborViewer
  commentId: F:Intranet.Common.Role.RoleSettings.LaborViewer
  id: LaborViewer
  parent: Intranet.Common.Role.RoleSettings
  langs:
  - csharp
  - vb
  name: LaborViewer
  nameWithType: RoleSettings.LaborViewer
  fullName: Intranet.Common.Role.RoleSettings.LaborViewer
  type: Field
  source:
    remote:
      path: .src/Intranet/Common/Role/RoleSettings.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: LaborViewer
    path: .src/Intranet/Common/Role/RoleSettings.cs
    startLine: 24
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common.Role
  summary: "\nThe Viewer of the Labor, only has read access.\n"
  example: []
  syntax:
    content: public const string LaborViewer = "LaborViewer"
    content.vb: Public Const LaborViewer As String = "LaborViewer"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Intranet.Common.Role
  commentId: N:Intranet.Common.Role
  isExternal: false
  name: Intranet.Common.Role
  nameWithType: Intranet.Common.Role
  fullName: Intranet.Common.Role
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
