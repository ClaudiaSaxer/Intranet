### YamlMime:ManagedReference
items:
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo
  commentId: T:Intranet.Labor.ViewModel.BabyDiaperTestInfo
  id: BabyDiaperTestInfo
  parent: Intranet.Labor.ViewModel
  children:
  - Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode
  - Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson
  - Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId
  - Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry
  langs:
  - csharp
  - vb
  name: BabyDiaperTestInfo
  nameWithType: BabyDiaperTestInfo
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo
  type: Class
  source:
    remote:
      path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: BabyDiaperTestInfo
    path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
    startLine: 9
  assemblies:
  - Intranet.Labor.ViewModel
  namespace: Intranet.Labor.ViewModel
  summary: "\nClass representing the test info for the labor creator\n"
  example: []
  syntax:
    content: public class BabyDiaperTestInfo
    content.vb: Public Class BabyDiaperTestInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson
  commentId: P:Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson
  id: TestPerson
  parent: Intranet.Labor.ViewModel.BabyDiaperTestInfo
  langs:
  - csharp
  - vb
  name: TestPerson
  nameWithType: BabyDiaperTestInfo.TestPerson
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson
  type: Property
  source:
    remote:
      path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: TestPerson
    path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
    startLine: 15
  assemblies:
  - Intranet.Labor.ViewModel
  namespace: Intranet.Labor.ViewModel
  summary: "\nGets or sets the Person who did the test\n"
  example: []
  syntax:
    content: public string TestPerson { get; set; }
    content.vb: Public Property TestPerson As String
    parameters: []
    return:
      type: System.String
      description: the test person
  overload: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode
  commentId: P:Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode
  id: ProductionCode
  parent: Intranet.Labor.ViewModel.BabyDiaperTestInfo
  langs:
  - csharp
  - vb
  name: ProductionCode
  nameWithType: BabyDiaperTestInfo.ProductionCode
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode
  type: Property
  source:
    remote:
      path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: ProductionCode
    path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
    startLine: 20
  assemblies:
  - Intranet.Labor.ViewModel
  namespace: Intranet.Labor.ViewModel
  summary: "\nGets or sets the production code from the diaper\n"
  example: []
  syntax:
    content: public string ProductionCode { get; set; }
    content.vb: Public Property ProductionCode As String
    parameters: []
    return:
      type: System.String
      description: the production code from the diaper
  overload: Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry
  commentId: P:Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry
  id: WeightyDiaperDry
  parent: Intranet.Labor.ViewModel.BabyDiaperTestInfo
  langs:
  - csharp
  - vb
  name: WeightyDiaperDry
  nameWithType: BabyDiaperTestInfo.WeightyDiaperDry
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry
  type: Property
  source:
    remote:
      path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: WeightyDiaperDry
    path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
    startLine: 26
  assemblies:
  - Intranet.Labor.ViewModel
  namespace: Intranet.Labor.ViewModel
  summary: "\nGets or sets the weight the diaper has if it is dry\n"
  example: []
  syntax:
    content: public double WeightyDiaperDry { get; set; }
    content.vb: Public Property WeightyDiaperDry As Double
    parameters: []
    return:
      type: System.Double
      description: the weight of the dry diaper
  overload: Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId
  commentId: P:Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId
  id: TestValueId
  parent: Intranet.Labor.ViewModel.BabyDiaperTestInfo
  langs:
  - csharp
  - vb
  name: TestValueId
  nameWithType: BabyDiaperTestInfo.TestValueId
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId
  type: Property
  source:
    remote:
      path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: TestValueId
    path: .src/Intranet/Labor/ViewModel/BabyDiaperLaborCreator/BabyDiaperTestInfo.cs
    startLine: 32
  assemblies:
  - Intranet.Labor.ViewModel
  namespace: Intranet.Labor.ViewModel
  summary: "\nGets or setst the testvalue id\n"
  example: []
  syntax:
    content: public int TestValueId { get; set; }
    content.vb: Public Property TestValueId As Integer
    parameters: []
    return:
      type: System.Int32
      description: the testvalue id
  overload: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Intranet.Labor.ViewModel
  commentId: N:Intranet.Labor.ViewModel
  isExternal: false
  name: Intranet.Labor.ViewModel
  nameWithType: Intranet.Labor.ViewModel
  fullName: Intranet.Labor.ViewModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson*
  commentId: Overload:Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson
  isExternal: false
  name: TestPerson
  nameWithType: BabyDiaperTestInfo.TestPerson
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestPerson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode*
  commentId: Overload:Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode
  isExternal: false
  name: ProductionCode
  nameWithType: BabyDiaperTestInfo.ProductionCode
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.ProductionCode
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry*
  commentId: Overload:Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry
  isExternal: false
  name: WeightyDiaperDry
  nameWithType: BabyDiaperTestInfo.WeightyDiaperDry
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.WeightyDiaperDry
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId*
  commentId: Overload:Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId
  isExternal: false
  name: TestValueId
  nameWithType: BabyDiaperTestInfo.TestValueId
  fullName: Intranet.Labor.ViewModel.BabyDiaperTestInfo.TestValueId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
