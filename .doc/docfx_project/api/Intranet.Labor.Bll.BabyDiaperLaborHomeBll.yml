### YamlMime:ManagedReference
items:
- uid: Intranet.Labor.Bll.BabyDiaperLaborHomeBll
  commentId: T:Intranet.Labor.Bll.BabyDiaperLaborHomeBll
  id: BabyDiaperLaborHomeBll
  parent: Intranet.Labor.Bll
  children:
  - Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  - Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository
  langs:
  - csharp
  - vb
  name: BabyDiaperLaborHomeBll
  nameWithType: BabyDiaperLaborHomeBll
  fullName: Intranet.Labor.Bll.BabyDiaperLaborHomeBll
  type: Class
  source:
    remote:
      path: .src/Intranet/Labor/Bll/BabyDiaperLaborHomeBll.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: BabyDiaperLaborHomeBll
    path: .src/Intranet/Labor/Bll/BabyDiaperLaborHomeBll.cs
    startLine: 12
  assemblies:
  - Intranet.Labor.Bll
  namespace: Intranet.Labor.Bll
  summary: "\nClass representing the bll of the labor home.\n"
  example: []
  syntax:
    content: 'public class BabyDiaperLaborHomeBll : ILaborHome'
    content.vb: >-
      Public Class BabyDiaperLaborHomeBll
          Implements ILaborHome
  inheritance:
  - System.Object
  implements:
  - Intranet.Labor.Definition.ILaborHome
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository
  commentId: P:Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository
  id: RoleRepository
  parent: Intranet.Labor.Bll.BabyDiaperLaborHomeBll
  langs:
  - csharp
  - vb
  name: RoleRepository
  nameWithType: BabyDiaperLaborHomeBll.RoleRepository
  fullName: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository
  type: Property
  source:
    remote:
      path: .src/Intranet/Labor/Bll/BabyDiaperLaborHomeBll.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: RoleRepository
    path: .src/Intranet/Labor/Bll/BabyDiaperLaborHomeBll.cs
    startLine: 19
  assemblies:
  - Intranet.Labor.Bll
  namespace: Intranet.Labor.Bll
  summary: "\nRoleRepository\n"
  example: []
  syntax:
    content: public IGenericRepository<Role> RoleRepository { get; set; }
    content.vb: Public Property RoleRepository As IGenericRepository(Of Role)
    parameters: []
    return:
      type: Intranet.Common.IGenericRepository{Intranet.Model.Role}
  overload: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  id: AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  parent: Intranet.Labor.Bll.BabyDiaperLaborHomeBll
  langs:
  - csharp
  - vb
  name: AllLaborModulesForRoles(IEnumerable<String>)
  nameWithType: BabyDiaperLaborHomeBll.AllLaborModulesForRoles(IEnumerable<String>)
  fullName: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: .src/Intranet/Labor/Bll/BabyDiaperLaborHomeBll.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: AllLaborModulesForRoles
    path: .src/Intranet/Labor/Bll/BabyDiaperLaborHomeBll.cs
    startLine: 30
  assemblies:
  - Intranet.Labor.Bll
  namespace: Intranet.Labor.Bll
  summary: "\nQuery for all labor modules for a given roles.\n"
  example: []
  syntax:
    content: public IEnumerable<Module> AllLaborModulesForRoles(IEnumerable<string> rolenames)
    content.vb: Public Function AllLaborModulesForRoles(rolenames As IEnumerable(Of String)) As IEnumerable(Of  Module)
    parameters:
    - id: rolenames
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The name of the roles the user has.
    return:
      type: System.Collections.Generic.IEnumerable{Intranet.Model.Module}
      description: All labor modules for the given roles
  overload: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles*
  implements:
  - Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  nameWithType.vb: BabyDiaperLaborHomeBll.AllLaborModulesForRoles(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AllLaborModulesForRoles(IEnumerable(Of String))
references:
- uid: Intranet.Labor.Bll
  commentId: N:Intranet.Labor.Bll
  isExternal: false
  name: Intranet.Labor.Bll
  nameWithType: Intranet.Labor.Bll
  fullName: Intranet.Labor.Bll
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Intranet.Labor.Definition.ILaborHome
  commentId: T:Intranet.Labor.Definition.ILaborHome
  parent: Intranet.Labor.Definition
  isExternal: false
  name: ILaborHome
  nameWithType: ILaborHome
  fullName: Intranet.Labor.Definition.ILaborHome
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Intranet.Labor.Definition
  commentId: N:Intranet.Labor.Definition
  isExternal: false
  name: Intranet.Labor.Definition
  nameWithType: Intranet.Labor.Definition
  fullName: Intranet.Labor.Definition
- uid: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository*
  commentId: Overload:Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository
  isExternal: false
  name: RoleRepository
  nameWithType: BabyDiaperLaborHomeBll.RoleRepository
  fullName: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.RoleRepository
- uid: Intranet.Common.IGenericRepository{Intranet.Model.Role}
  commentId: T:Intranet.Common.IGenericRepository{Intranet.Model.Role}
  parent: Intranet.Common
  definition: Intranet.Common.IGenericRepository`1
  name: IGenericRepository<Role>
  nameWithType: IGenericRepository<Role>
  fullName: Intranet.Common.IGenericRepository<Intranet.Model.Role>
  nameWithType.vb: IGenericRepository(Of Role)
  fullname.vb: Intranet.Common.IGenericRepository(Of Intranet.Model.Role)
  name.vb: IGenericRepository(Of Role)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Intranet.Model.Role
    name: Role
    nameWithType: Role
    fullName: Intranet.Model.Role
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Intranet.Model.Role
    name: Role
    nameWithType: Role
    fullName: Intranet.Model.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1
  commentId: T:Intranet.Common.IGenericRepository`1
  isExternal: false
  name: IGenericRepository<TEntity>
  nameWithType: IGenericRepository<TEntity>
  fullName: Intranet.Common.IGenericRepository<TEntity>
  nameWithType.vb: IGenericRepository(Of TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity)
  name.vb: IGenericRepository(Of TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common
  commentId: N:Intranet.Common
  isExternal: false
  name: Intranet.Common
  nameWithType: Intranet.Common
  fullName: Intranet.Common
- uid: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles*
  commentId: Overload:Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles
  isExternal: false
  name: AllLaborModulesForRoles
  nameWithType: BabyDiaperLaborHomeBll.AllLaborModulesForRoles
  fullName: Intranet.Labor.Bll.BabyDiaperLaborHomeBll.AllLaborModulesForRoles
- uid: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
  parent: Intranet.Labor.Definition.ILaborHome
  isExternal: true
  name: AllLaborModulesForRoles(IEnumerable<String>)
  nameWithType: ILaborHome.AllLaborModulesForRoles(IEnumerable<String>)
  fullName: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: ILaborHome.AllLaborModulesForRoles(IEnumerable(Of String))
  fullname.vb: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AllLaborModulesForRoles(IEnumerable(Of String))
  spec.csharp:
  - uid: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
    name: AllLaborModulesForRoles
    nameWithType: ILaborHome.AllLaborModulesForRoles
    fullName: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles(System.Collections.Generic.IEnumerable{System.String})
    name: AllLaborModulesForRoles
    nameWithType: ILaborHome.AllLaborModulesForRoles
    fullName: Intranet.Labor.Definition.ILaborHome.AllLaborModulesForRoles
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Intranet.Model.Module}
  commentId: T:System.Collections.Generic.IEnumerable{Intranet.Model.Module}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Module>
  nameWithType: IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<Intranet.Model.Module>
  nameWithType.vb: IEnumerable(Of Module)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Intranet.Model.Module)
  name.vb: IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Intranet.Model.Module
    name: Module
    nameWithType: Module
    fullName: Intranet.Model.Module
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Intranet.Model.Module
    name: Module
    nameWithType: Module
    fullName: Intranet.Model.Module
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
