### YamlMime:ManagedReference
items:
- uid: Intranet.Model.Role
  commentId: T:Intranet.Model.Role
  id: Role
  parent: Intranet.Model
  children:
  - Intranet.Model.Role.Modules
  - Intranet.Model.Role.Name
  - Intranet.Model.Role.RoleId
  langs:
  - csharp
  - vb
  name: Role
  nameWithType: Role
  fullName: Intranet.Model.Role
  type: Class
  source:
    remote:
      path: .src/Intranet/Model/Role.cs
      branch: dev
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Role
    path: .src/Intranet/Model/Role.cs
    startLine: 14
  assemblies:
  - Intranet.Model
  namespace: Intranet.Model
  summary: "\nClass representing a Role\n"
  example: []
  syntax:
    content: >-
      [Table("Role")]

      public class Role
    content.vb: >-
      <Table("Role")>

      Public Class Role
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.TableAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Role
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Intranet.Model.Role.RoleId
  commentId: P:Intranet.Model.Role.RoleId
  id: RoleId
  parent: Intranet.Model.Role
  langs:
  - csharp
  - vb
  name: RoleId
  nameWithType: Role.RoleId
  fullName: Intranet.Model.Role.RoleId
  type: Property
  source:
    remote:
      path: .src/Intranet/Model/Role.cs
      branch: dev
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: RoleId
    path: .src/Intranet/Model/Role.cs
    startLine: 23
  assemblies:
  - Intranet.Model
  namespace: Intranet.Model
  summary: "\nGets or sets the id of the role\n"
  example: []
  syntax:
    content: >-
      [Key]

      [DatabaseGenerated(DatabaseGeneratedOption.Identity)]

      public int RoleId { get; set; }
    content.vb: >-
      <Key>

      <DatabaseGenerated(DatabaseGeneratedOption.Identity)>

      Public Property RoleId As Integer
    parameters: []
    return:
      type: System.Int32
      description: The id of the Role.
  overload: Intranet.Model.Role.RoleId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.KeyAttribute
    ctor: System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.#ctor(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)
    arguments:
    - type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Intranet.Model.Role.Name
  commentId: P:Intranet.Model.Role.Name
  id: Name
  parent: Intranet.Model.Role
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Role.Name
  fullName: Intranet.Model.Role.Name
  type: Property
  source:
    remote:
      path: .src/Intranet/Model/Role.cs
      branch: dev
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Name
    path: .src/Intranet/Model/Role.cs
    startLine: 31
  assemblies:
  - Intranet.Model
  namespace: Intranet.Model
  summary: "\nGets or sets the name of the role\n"
  example: []
  syntax:
    content: >-
      [Column(TypeName = "varchar")]

      [StringLength(255)]

      [Index("IX_Module_Name", IsUnique = true)]

      public string Name { get; set; }
    content.vb: >-
      <Column(TypeName:="varchar")>

      <StringLength(255)>

      <Index("IX_Module_Name", IsUnique:=True)>

      Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: The name of the Role.
  overload: Intranet.Model.Role.Name*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor
    arguments: []
    namedArguments:
    - name: TypeName
      type: System.String
      value: varchar
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 255
  - type: System.ComponentModel.DataAnnotations.Schema.IndexAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: IX_Module_Name
    namedArguments:
    - name: IsUnique
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Intranet.Model.Role.Modules
  commentId: P:Intranet.Model.Role.Modules
  id: Modules
  parent: Intranet.Model.Role
  langs:
  - csharp
  - vb
  name: Modules
  nameWithType: Role.Modules
  fullName: Intranet.Model.Role.Modules
  type: Property
  source:
    remote:
      path: .src/Intranet/Model/Role.cs
      branch: dev
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Modules
    path: .src/Intranet/Model/Role.cs
    startLine: 40
  assemblies:
  - Intranet.Model
  namespace: Intranet.Model
  summary: "\nGets or sets a collection of modules for the role\n"
  example: []
  syntax:
    content: public virtual ICollection<Module> Modules { get; set; }
    content.vb: Public Overridable Property Modules As ICollection(Of  Module)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Intranet.Model.Module}
      description: The modules of the Role.
  overload: Intranet.Model.Role.Modules*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Intranet.Model
  commentId: N:Intranet.Model
  isExternal: false
  name: Intranet.Model
  nameWithType: Intranet.Model
  fullName: Intranet.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Intranet.Model.Role.RoleId*
  commentId: Overload:Intranet.Model.Role.RoleId
  isExternal: false
  name: RoleId
  nameWithType: Role.RoleId
  fullName: Intranet.Model.Role.RoleId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Intranet.Model.Role.Name*
  commentId: Overload:Intranet.Model.Role.Name
  isExternal: false
  name: Name
  nameWithType: Role.Name
  fullName: Intranet.Model.Role.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Intranet.Model.Role.Modules*
  commentId: Overload:Intranet.Model.Role.Modules
  isExternal: false
  name: Modules
  nameWithType: Role.Modules
  fullName: Intranet.Model.Role.Modules
- uid: System.Collections.Generic.ICollection{Intranet.Model.Module}
  commentId: T:System.Collections.Generic.ICollection{Intranet.Model.Module}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Module>
  nameWithType: ICollection<Module>
  fullName: System.Collections.Generic.ICollection<Intranet.Model.Module>
  nameWithType.vb: ICollection(Of Module)
  fullname.vb: System.Collections.Generic.ICollection(Of Intranet.Model.Module)
  name.vb: ICollection(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Intranet.Model.Module
    name: Module
    nameWithType: Module
    fullName: Intranet.Model.Module
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Intranet.Model.Module
    name: Module
    nameWithType: Module
    fullName: Intranet.Model.Module
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
