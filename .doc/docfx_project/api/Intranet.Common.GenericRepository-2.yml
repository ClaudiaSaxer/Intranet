### YamlMime:ManagedReference
items:
- uid: Intranet.Common.GenericRepository`2
  commentId: T:Intranet.Common.GenericRepository`2
  id: GenericRepository`2
  parent: Intranet.Common
  children:
  - Intranet.Common.GenericRepository`2.#ctor(Intranet.Common.IDatabaseFactory{`0},Intranet.Common.ILoggerFactory)
  - Intranet.Common.GenericRepository`2.Add(`1)
  - Intranet.Common.GenericRepository`2.AddRange(System.Collections.Generic.IEnumerable{`1})
  - Intranet.Common.GenericRepository`2.Attach(`1)
  - Intranet.Common.GenericRepository`2.Context
  - Intranet.Common.GenericRepository`2.CountRecords
  - Intranet.Common.GenericRepository`2.CountRecordsAsync
  - Intranet.Common.GenericRepository`2.DatabaseFactory
  - Intranet.Common.GenericRepository`2.DbCommit
  - Intranet.Common.GenericRepository`2.Disposed
  - Intranet.Common.GenericRepository`2.Entry``1(``0)
  - Intranet.Common.GenericRepository`2.FindAsync(System.Object[])
  - Intranet.Common.GenericRepository`2.GetAll
  - Intranet.Common.GenericRepository`2.Remove(`1)
  - Intranet.Common.GenericRepository`2.SaveChanges
  - Intranet.Common.GenericRepository`2.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  - Intranet.Common.GenericRepository`2.SetModified(`1)
  - Intranet.Common.GenericRepository`2.SqlQuery(System.String,System.Object[])
  - Intranet.Common.GenericRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  langs:
  - csharp
  - vb
  name: GenericRepository<TContext, TEntity>
  nameWithType: GenericRepository<TContext, TEntity>
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>
  type: Class
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: GenericRepository
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 17
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGeneric base class for a repository.\n"
  example: []
  syntax:
    content: 'public abstract class GenericRepository<TContext, TEntity> : DisposableBase, IGenericRepository<TEntity>, IDisposable where TContext : DbContext, new ()where TEntity : class'
    content.vb: >-
      Public MustInherit Class GenericRepository(Of TContext As {DbContext, New}, TEntity As Class)

          Inherits DisposableBase

          Implements IGenericRepository(Of TEntity), IDisposable
    typeParameters:
    - id: TContext
      description: The type of the database context used by the repository.
    - id: TEntity
      description: The type of the entities in the repository.
  inheritance:
  - System.Object
  - Intranet.Common.LoggingBase
  - Intranet.Common.DisposableBase
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}
  - System.IDisposable
  inheritedMembers:
  - Intranet.Common.DisposableBase.Dispose
  - Intranet.Common.LoggingBase.Logger
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: GenericRepository(Of TContext, TEntity)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity)
  name.vb: GenericRepository(Of TContext, TEntity)
- uid: Intranet.Common.GenericRepository`2.Context
  commentId: P:Intranet.Common.GenericRepository`2.Context
  id: Context
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: GenericRepository<TContext, TEntity>.Context
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Context
  type: Property
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Context
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 43
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets the database context.\n"
  example: []
  syntax:
    content: protected virtual TContext Context { get; }
    content.vb: Protected Overridable ReadOnly Property Context As TContext
    parameters: []
    return:
      type: '{TContext}'
      description: The database context.
  overload: Intranet.Common.GenericRepository`2.Context*
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Context
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Context
- uid: Intranet.Common.GenericRepository`2.DatabaseFactory
  commentId: P:Intranet.Common.GenericRepository`2.DatabaseFactory
  id: DatabaseFactory
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: DatabaseFactory
  nameWithType: GenericRepository<TContext, TEntity>.DatabaseFactory
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.DatabaseFactory
  type: Property
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: DatabaseFactory
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 60
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets the database factory used by the repository.\n"
  example: []
  syntax:
    content: protected virtual IDatabaseFactory<TContext> DatabaseFactory { get; }
    content.vb: Protected Overridable ReadOnly Property DatabaseFactory As IDatabaseFactory(Of TContext)
    parameters: []
    return:
      type: Intranet.Common.IDatabaseFactory{{TContext}}
      description: The database factory used by the repository.
  overload: Intranet.Common.GenericRepository`2.DatabaseFactory*
  nameWithType.vb: GenericRepository(Of TContext, TEntity).DatabaseFactory
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).DatabaseFactory
- uid: Intranet.Common.GenericRepository`2.DbCommit
  commentId: P:Intranet.Common.GenericRepository`2.DbCommit
  id: DbCommit
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: DbCommit
  nameWithType: GenericRepository<TContext, TEntity>.DbCommit
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.DbCommit
  type: Property
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: DbCommit
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 67
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets or set a <xref href=\"Intranet.Common.IDbCommit%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IDbCommit<TContext> DbCommit { get; set; }
    content.vb: Public Property DbCommit As IDbCommit(Of TContext)
    parameters: []
    return:
      type: Intranet.Common.IDbCommit{{TContext}}
      description: A <xref href="Intranet.Common.IDbCommit%601" data-throw-if-not-resolved="false"></xref>.
  overload: Intranet.Common.GenericRepository`2.DbCommit*
  nameWithType.vb: GenericRepository(Of TContext, TEntity).DbCommit
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).DbCommit
- uid: Intranet.Common.GenericRepository`2.#ctor(Intranet.Common.IDatabaseFactory{`0},Intranet.Common.ILoggerFactory)
  commentId: M:Intranet.Common.GenericRepository`2.#ctor(Intranet.Common.IDatabaseFactory{`0},Intranet.Common.ILoggerFactory)
  id: '#ctor(Intranet.Common.IDatabaseFactory{`0},Intranet.Common.ILoggerFactory)'
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: GenericRepository(IDatabaseFactory<TContext>, ILoggerFactory)
  nameWithType: GenericRepository<TContext, TEntity>.GenericRepository(IDatabaseFactory<TContext>, ILoggerFactory)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.GenericRepository(Intranet.Common.IDatabaseFactory<TContext>, Intranet.Common.ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: .ctor
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 87
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nInitialize a new instance of the <xref href=\"Intranet.Common.GenericRepository%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected GenericRepository(IDatabaseFactory<TContext> databaseFactory, ILoggerFactory loggerFactory)
    content.vb: Protected Sub New(databaseFactory As IDatabaseFactory(Of TContext), loggerFactory As ILoggerFactory)
    parameters:
    - id: databaseFactory
      type: Intranet.Common.IDatabaseFactory{{TContext}}
      description: A <xref href="Intranet.Common.IDatabaseFactory%601" data-throw-if-not-resolved="false"></xref>.
    - id: loggerFactory
      type: Intranet.Common.ILoggerFactory
      description: A <xref href="Intranet.Common.ILoggerFactory" data-throw-if-not-resolved="false"></xref>.
  overload: Intranet.Common.GenericRepository`2.#ctor*
  nameWithType.vb: GenericRepository(Of TContext, TEntity).GenericRepository(IDatabaseFactory(Of TContext), ILoggerFactory)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).GenericRepository(Intranet.Common.IDatabaseFactory(Of TContext), Intranet.Common.ILoggerFactory)
  name.vb: GenericRepository(IDatabaseFactory(Of TContext), ILoggerFactory)
- uid: Intranet.Common.GenericRepository`2.Disposed
  commentId: M:Intranet.Common.GenericRepository`2.Disposed
  id: Disposed
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Disposed()
  nameWithType: GenericRepository<TContext, TEntity>.Disposed()
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Disposed()
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Disposed
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 101
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nDispose all managed resources.\n"
  example: []
  syntax:
    content: protected override void Disposed()
    content.vb: Protected Overrides Sub Disposed
  overridden: Intranet.Common.DisposableBase.Disposed
  overload: Intranet.Common.GenericRepository`2.Disposed*
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Disposed()
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Disposed()
- uid: Intranet.Common.GenericRepository`2.GetAll
  commentId: M:Intranet.Common.GenericRepository`2.GetAll
  id: GetAll
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: GenericRepository<TContext, TEntity>.GetAll()
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.GetAll()
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: GetAll
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 112
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets all entities.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> GetAll()
    content.vb: Public Overridable Function GetAll As IQueryable(Of TEntity)
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: All entities
  overload: Intranet.Common.GenericRepository`2.GetAll*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.GetAll
  nameWithType.vb: GenericRepository(Of TContext, TEntity).GetAll()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).GetAll()
- uid: Intranet.Common.GenericRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Intranet.Common.GenericRepository`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Where(Expression<Func<TEntity, Boolean>>)
  nameWithType: GenericRepository<TContext, TEntity>.Where(Expression<Func<TEntity, Boolean>>)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Where(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Where
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 124
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets the entities matching the given predicate.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TEntity> Where(Expression<Func<TEntity, bool>> predicate)
    content.vb: Public Overridable Function Where(predicate As Expression(Of Func(Of TEntity, Boolean))) As IQueryable(Of TEntity)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: The predicate.
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: The entities matching the given predicate.
  overload: Intranet.Common.GenericRepository`2.Where*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.Where(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Where(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Where(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Expression(Of Func(Of TEntity, Boolean)))
- uid: Intranet.Common.GenericRepository`2.Add(`1)
  commentId: M:Intranet.Common.GenericRepository`2.Add(`1)
  id: Add(`1)
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Add(TEntity)
  nameWithType: GenericRepository<TContext, TEntity>.Add(TEntity)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Add(TEntity)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Add
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 137
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nAdds the given entity to the repository.\n"
  example: []
  syntax:
    content: public virtual TEntity Add(TEntity entity)
    content.vb: Public Overridable Function Add(entity As TEntity) As TEntity
    parameters:
    - id: entity
      type: '{TEntity}'
      description: The entity to add.
    return:
      type: '{TEntity}'
      description: Returns the added entity.
  overload: Intranet.Common.GenericRepository`2.Add*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.Add({TEntity})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Add(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Add(TEntity)
- uid: Intranet.Common.GenericRepository`2.AddRange(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Intranet.Common.GenericRepository`2.AddRange(System.Collections.Generic.IEnumerable{`1})
  id: AddRange(System.Collections.Generic.IEnumerable{`1})
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<TEntity>)
  nameWithType: GenericRepository<TContext, TEntity>.AddRange(IEnumerable<TEntity>)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.AddRange(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: AddRange
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 151
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nAdds the given collection of entities into context underlying the set with\neach entity being put into the Added state such that it will be inserted\ninto the database when SaveChangesAsync is called.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
    content.vb: Public Overridable Function AddRange(entities As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{TEntity}}
      description: The collection of entities to add.
    return:
      type: System.Collections.Generic.IEnumerable{{TEntity}}
      description: The collection of entities.
  overload: Intranet.Common.GenericRepository`2.AddRange*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.AddRange(System.Collections.Generic.IEnumerable{{TEntity}})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).AddRange(IEnumerable(Of TEntity))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).AddRange(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AddRange(IEnumerable(Of TEntity))
- uid: Intranet.Common.GenericRepository`2.Remove(`1)
  commentId: M:Intranet.Common.GenericRepository`2.Remove(`1)
  id: Remove(`1)
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Remove(TEntity)
  nameWithType: GenericRepository<TContext, TEntity>.Remove(TEntity)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Remove(TEntity)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Remove
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 163
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nRemoves the given entity from the repository.\n"
  example: []
  syntax:
    content: public virtual TEntity Remove(TEntity entity)
    content.vb: Public Overridable Function Remove(entity As TEntity) As TEntity
    parameters:
    - id: entity
      type: '{TEntity}'
      description: The entity to remove.
    return:
      type: '{TEntity}'
      description: Returns the removed entity.
  overload: Intranet.Common.GenericRepository`2.Remove*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.Remove({TEntity})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Remove(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Remove(TEntity)
- uid: Intranet.Common.GenericRepository`2.SetModified(`1)
  commentId: M:Intranet.Common.GenericRepository`2.SetModified(`1)
  id: SetModified(`1)
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: SetModified(TEntity)
  nameWithType: GenericRepository<TContext, TEntity>.SetModified(TEntity)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SetModified(TEntity)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: SetModified
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 174
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nSets the state of the given entity to modified.\n"
  example: []
  syntax:
    content: public virtual void SetModified(TEntity entity)
    content.vb: Public Overridable Sub SetModified(entity As TEntity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: The entity to mark as modified.
  overload: Intranet.Common.GenericRepository`2.SetModified*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.SetModified({TEntity})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SetModified(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SetModified(TEntity)
- uid: Intranet.Common.GenericRepository`2.Attach(`1)
  commentId: M:Intranet.Common.GenericRepository`2.Attach(`1)
  id: Attach(`1)
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Attach(TEntity)
  nameWithType: GenericRepository<TContext, TEntity>.Attach(TEntity)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Attach(TEntity)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Attach
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 187
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nAttaches the given entity to the current database context.\n"
  example: []
  syntax:
    content: public virtual TEntity Attach(TEntity entity)
    content.vb: Public Overridable Function Attach(entity As TEntity) As TEntity
    parameters:
    - id: entity
      type: '{TEntity}'
      description: The entity to attach.
    return:
      type: '{TEntity}'
      description: Returns the attached entity.
  overload: Intranet.Common.GenericRepository`2.Attach*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.Attach({TEntity})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Attach(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Attach(TEntity)
- uid: Intranet.Common.GenericRepository`2.SaveChanges
  commentId: M:Intranet.Common.GenericRepository`2.SaveChanges
  id: SaveChanges
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: SaveChanges()
  nameWithType: GenericRepository<TContext, TEntity>.SaveChanges()
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SaveChanges()
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: SaveChanges
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 198
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nSaves all changes made in this context to the underlying database.\n"
  example: []
  syntax:
    content: public virtual int SaveChanges()
    content.vb: Public Overridable Function SaveChanges As Integer
    return:
      type: System.Int32
      description: The number of Objects written to the underlying database.
  overload: Intranet.Common.GenericRepository`2.SaveChanges*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.SaveChanges
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SaveChanges()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SaveChanges()
- uid: Intranet.Common.GenericRepository`2.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:Intranet.Common.GenericRepository`2.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  id: SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(Nullable<CancellationToken>)
  nameWithType: GenericRepository<TContext, TEntity>.SaveChangesAsync(Nullable<CancellationToken>)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SaveChangesAsync(System.Nullable<System.Threading.CancellationToken>)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: SaveChangesAsync
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 213
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nAsynchronously saves all changes made in this context to the underlying database.\n"
  example: []
  syntax:
    content: public virtual Task<int> SaveChangesAsync(CancellationToken? cancellationToken = null)
    content.vb: Public Overridable Function SaveChangesAsync(cancellationToken As CancellationToken? = Nothing) As Task(Of Integer)
    parameters:
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous save operation.\nThe task result contains the number of Objects written to the underlying database.\n"
  overload: Intranet.Common.GenericRepository`2.SaveChangesAsync*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SaveChangesAsync(Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SaveChangesAsync(System.Nullable(Of System.Threading.CancellationToken))
  name.vb: SaveChangesAsync(Nullable(Of CancellationToken))
- uid: Intranet.Common.GenericRepository`2.Entry``1(``0)
  commentId: M:Intranet.Common.GenericRepository`2.Entry``1(``0)
  id: Entry``1(``0)
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: Entry<TAnyEntity>(TAnyEntity)
  nameWithType: GenericRepository<TContext, TEntity>.Entry<TAnyEntity>(TAnyEntity)
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Entry<TAnyEntity>(TAnyEntity)
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: Entry
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 230
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets a <xref href=\"System.Data.Entity.Infrastructure.DbEntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> Object for\nthe given entity providing access to information about the entity and the\nability to perform actions on the entity.\n"
  example: []
  syntax:
    content: 'public virtual DbEntityEntry<TAnyEntity> Entry<TAnyEntity>(TAnyEntity entity)where TAnyEntity : class'
    content.vb: Public Overridable Function Entry(Of TAnyEntity As Class)(entity As TAnyEntity) As DbEntityEntry(Of TAnyEntity)
    parameters:
    - id: entity
      type: '{TAnyEntity}'
      description: The entity.
    typeParameters:
    - id: TAnyEntity
      description: The type of the entity.
    return:
      type: System.Data.Entity.Infrastructure.DbEntityEntry{{TAnyEntity}}
      description: Returns an entry for the entity.
  overload: Intranet.Common.GenericRepository`2.Entry*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.Entry``1({TAnyEntity})
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Entry(Of TAnyEntity)(TAnyEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Entry(Of TAnyEntity)(TAnyEntity)
  name.vb: Entry(Of TAnyEntity)(TAnyEntity)
- uid: Intranet.Common.GenericRepository`2.CountRecords
  commentId: M:Intranet.Common.GenericRepository`2.CountRecords
  id: CountRecords
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: CountRecords()
  nameWithType: GenericRepository<TContext, TEntity>.CountRecords()
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.CountRecords()
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: CountRecords
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 241
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets the number of records of the repositories table.\n"
  example: []
  syntax:
    content: public virtual int CountRecords()
    content.vb: Public Overridable Function CountRecords As Integer
    return:
      type: System.Int32
      description: Returns the number records of the repositories table.
  overload: Intranet.Common.GenericRepository`2.CountRecords*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.CountRecords
  nameWithType.vb: GenericRepository(Of TContext, TEntity).CountRecords()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).CountRecords()
- uid: Intranet.Common.GenericRepository`2.CountRecordsAsync
  commentId: M:Intranet.Common.GenericRepository`2.CountRecordsAsync
  id: CountRecordsAsync
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: CountRecordsAsync()
  nameWithType: GenericRepository<TContext, TEntity>.CountRecordsAsync()
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.CountRecordsAsync()
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: CountRecordsAsync
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 252
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nGets the number of records of the repositories table asynchronously.\n"
  example: []
  syntax:
    content: public virtual Task<int> CountRecordsAsync()
    content.vb: Public Overridable Function CountRecordsAsync As Task(Of Integer)
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: Returns the number records of the repositories table.
  overload: Intranet.Common.GenericRepository`2.CountRecordsAsync*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.CountRecordsAsync
  nameWithType.vb: GenericRepository(Of TContext, TEntity).CountRecordsAsync()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).CountRecordsAsync()
- uid: Intranet.Common.GenericRepository`2.FindAsync(System.Object[])
  commentId: M:Intranet.Common.GenericRepository`2.FindAsync(System.Object[])
  id: FindAsync(System.Object[])
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: FindAsync(Object[])
  nameWithType: GenericRepository<TContext, TEntity>.FindAsync(Object[])
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.FindAsync(System.Object[])
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: FindAsync
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 276
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nAsynchronously finds an entity with the given primary key values.  If an\nentity with the given primary key values exists in the context, then it is\nreturned immediately without making a request to the store. Otherwise, a\nrequest is made to the store for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no\nentity is found in the context or the store, then null is returned.\n"
  remarks: "\nThe ordering of composite key values is as defined in the EDM, which is in\nturn as defined in the designer, by the Code First fluent API, or by the\nDataMember attribute.  Multiple active operations on the same context instance\nare not supported. Use 'await' to ensure that any asynchronous operations\nhave completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public virtual Task<TEntity> FindAsync(params object[] keyValues)
    content.vb: Public Overridable Function FindAsync(ParamArray keyValues As Object()) As Task(Of TEntity)
    parameters:
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
      description: A task that represents the asynchronous find operation. The task result contains the entity found, or null.
  overload: Intranet.Common.GenericRepository`2.FindAsync*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.FindAsync(System.Object[])
  nameWithType.vb: GenericRepository(Of TContext, TEntity).FindAsync(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).FindAsync(System.Object())
  name.vb: FindAsync(Object())
- uid: Intranet.Common.GenericRepository`2.SqlQuery(System.String,System.Object[])
  commentId: M:Intranet.Common.GenericRepository`2.SqlQuery(System.String,System.Object[])
  id: SqlQuery(System.String,System.Object[])
  parent: Intranet.Common.GenericRepository`2
  langs:
  - csharp
  - vb
  name: SqlQuery(String, Object[])
  nameWithType: GenericRepository<TContext, TEntity>.SqlQuery(String, Object[])
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SqlQuery(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
      branch: f_doc
      repo: https://github.com/ClaudiaSaxer/Intranet.git
    id: SqlQuery
    path: .src/Intranet/Common/Db/BaseClass/GenericRepository.cs
    startLine: 313
  assemblies:
  - Intranet.Common
  namespace: Intranet.Common
  summary: "\nCreates a raw SQL query that will return entities in this set. By default,\nthe entities returned are tracked by the context; this can be changed by\ncalling AsNoTracking on the <xref href=\"System.Data.Entity.Infrastructure.DbSqlQuery%601\" data-throw-if-not-resolved=\"false\"></xref>\nreturned.  Note that the entities returned are always of the type for this\nset and never of a derived type. If the table or tables queried may contain\ndata for other entity types, then the SQL query must be written appropriately\nto ensure that only entities of the correct type are returned.  As with any\nAPI that accepts SQL it is important to parameterize any user input to protect\nagainst a SQL injection attack. You can include parameter place holders in\nthe SQL query String and then supply parameter values as additional arguments.\nAny parameter values you supply will automatically be converted to a DbParameter.\ncontext.Blogs.SqlQuery(\"SELECT * FROM dbo.Posts WHERE Author = @p0\", userSuppliedAuthor);\nAlternatively, you can also construct a DbParameter and supply it to SqlQuery.\nThis allows you to use named parameters in the SQL query string .\ncontext.Blogs.SqlQuery(\"SELECT * FROM dbo.Posts WHERE Author = @author\", new SqlParameter(\"@author\",\nuserSuppliedAuthor));\n"
  example: []
  syntax:
    content: public virtual DbSqlQuery<TEntity> SqlQuery(string sql, params object[] parameters)
    content.vb: Public Overridable Function SqlQuery(sql As String, ParamArray parameters As Object()) As DbSqlQuery(Of TEntity)
    parameters:
    - id: sql
      type: System.String
      description: The SQL query string .
    - id: parameters
      type: System.Object[]
      description: "\nThe parameters to apply to the SQL query string . If output parameters are\nused, their values will not be available until the results have been read\ncompletely. This is due to the underlying behavior of DbDataReader, see\nhttp://go.microsoft.com/fwlink/?LinkID=398589\nfor more details.\n"
    return:
      type: System.Data.Entity.Infrastructure.DbSqlQuery{{TEntity}}
      description: "\nA <xref href=\"System.Data.Entity.Infrastructure.DbSqlQuery%601\" data-throw-if-not-resolved=\"false\"></xref> Object that will execute the query when\nit is enumerated.\n"
  overload: Intranet.Common.GenericRepository`2.SqlQuery*
  implements:
  - Intranet.Common.IGenericRepository{{TEntity}}.SqlQuery(System.String,System.Object[])
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SqlQuery(String, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SqlQuery(System.String, System.Object())
  name.vb: SqlQuery(String, Object())
references:
- uid: Intranet.Common
  commentId: N:Intranet.Common
  isExternal: false
  name: Intranet.Common
  nameWithType: Intranet.Common
  fullName: Intranet.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Intranet.Common.LoggingBase
  commentId: T:Intranet.Common.LoggingBase
  parent: Intranet.Common
  isExternal: false
  name: LoggingBase
  nameWithType: LoggingBase
  fullName: Intranet.Common.LoggingBase
- uid: Intranet.Common.DisposableBase
  commentId: T:Intranet.Common.DisposableBase
  parent: Intranet.Common
  isExternal: false
  name: DisposableBase
  nameWithType: DisposableBase
  fullName: Intranet.Common.DisposableBase
- uid: Intranet.Common.IGenericRepository{{TEntity}}
  commentId: T:Intranet.Common.IGenericRepository{`1}
  parent: Intranet.Common
  definition: Intranet.Common.IGenericRepository`1
  name: IGenericRepository<TEntity>
  nameWithType: IGenericRepository<TEntity>
  fullName: Intranet.Common.IGenericRepository<TEntity>
  nameWithType.vb: IGenericRepository(Of TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity)
  name.vb: IGenericRepository(Of TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Intranet.Common.DisposableBase.Dispose
  commentId: M:Intranet.Common.DisposableBase.Dispose
  parent: Intranet.Common.DisposableBase
  isExternal: false
  name: Dispose()
  nameWithType: DisposableBase.Dispose()
  fullName: Intranet.Common.DisposableBase.Dispose()
  spec.csharp:
  - uid: Intranet.Common.DisposableBase.Dispose
    name: Dispose
    nameWithType: DisposableBase.Dispose
    fullName: Intranet.Common.DisposableBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.DisposableBase.Dispose
    name: Dispose
    nameWithType: DisposableBase.Dispose
    fullName: Intranet.Common.DisposableBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.LoggingBase.Logger
  commentId: F:Intranet.Common.LoggingBase.Logger
  parent: Intranet.Common.LoggingBase
  isExternal: false
  name: Logger
  nameWithType: LoggingBase.Logger
  fullName: Intranet.Common.LoggingBase.Logger
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Intranet.Common.IGenericRepository`1
  commentId: T:Intranet.Common.IGenericRepository`1
  isExternal: false
  name: IGenericRepository<TEntity>
  nameWithType: IGenericRepository<TEntity>
  fullName: Intranet.Common.IGenericRepository<TEntity>
  nameWithType.vb: IGenericRepository(Of TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity)
  name.vb: IGenericRepository(Of TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: Intranet.Common.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.Context*
  commentId: Overload:Intranet.Common.GenericRepository`2.Context
  isExternal: false
  name: Context
  nameWithType: GenericRepository<TContext, TEntity>.Context
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Context
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Context
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Context
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: TContext
  isExternal: false
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: Intranet.Common.GenericRepository`2.DatabaseFactory*
  commentId: Overload:Intranet.Common.GenericRepository`2.DatabaseFactory
  isExternal: false
  name: DatabaseFactory
  nameWithType: GenericRepository<TContext, TEntity>.DatabaseFactory
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.DatabaseFactory
  nameWithType.vb: GenericRepository(Of TContext, TEntity).DatabaseFactory
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).DatabaseFactory
- uid: Intranet.Common.IDatabaseFactory{{TContext}}
  commentId: T:Intranet.Common.IDatabaseFactory{`0}
  parent: Intranet.Common
  definition: Intranet.Common.IDatabaseFactory`1
  name: IDatabaseFactory<TContext>
  nameWithType: IDatabaseFactory<TContext>
  fullName: Intranet.Common.IDatabaseFactory<TContext>
  nameWithType.vb: IDatabaseFactory(Of TContext)
  fullname.vb: Intranet.Common.IDatabaseFactory(Of TContext)
  name.vb: IDatabaseFactory(Of TContext)
  spec.csharp:
  - uid: Intranet.Common.IDatabaseFactory`1
    name: IDatabaseFactory
    nameWithType: IDatabaseFactory
    fullName: Intranet.Common.IDatabaseFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IDatabaseFactory`1
    name: IDatabaseFactory
    nameWithType: IDatabaseFactory
    fullName: Intranet.Common.IDatabaseFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IDatabaseFactory`1
  commentId: T:Intranet.Common.IDatabaseFactory`1
  isExternal: false
  name: IDatabaseFactory<TContext>
  nameWithType: IDatabaseFactory<TContext>
  fullName: Intranet.Common.IDatabaseFactory<TContext>
  nameWithType.vb: IDatabaseFactory(Of TContext)
  fullname.vb: Intranet.Common.IDatabaseFactory(Of TContext)
  name.vb: IDatabaseFactory(Of TContext)
  spec.csharp:
  - uid: Intranet.Common.IDatabaseFactory`1
    name: IDatabaseFactory
    nameWithType: IDatabaseFactory
    fullName: Intranet.Common.IDatabaseFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IDatabaseFactory`1
    name: IDatabaseFactory
    nameWithType: IDatabaseFactory
    fullName: Intranet.Common.IDatabaseFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IDbCommit`1
  commentId: T:Intranet.Common.IDbCommit`1
  isExternal: false
  name: IDbCommit<TContext>
  nameWithType: IDbCommit<TContext>
  fullName: Intranet.Common.IDbCommit<TContext>
  nameWithType.vb: IDbCommit(Of TContext)
  fullname.vb: Intranet.Common.IDbCommit(Of TContext)
  name.vb: IDbCommit(Of TContext)
  spec.csharp:
  - uid: Intranet.Common.IDbCommit`1
    name: IDbCommit
    nameWithType: IDbCommit
    fullName: Intranet.Common.IDbCommit
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IDbCommit`1
    name: IDbCommit
    nameWithType: IDbCommit
    fullName: Intranet.Common.IDbCommit
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.DbCommit*
  commentId: Overload:Intranet.Common.GenericRepository`2.DbCommit
  isExternal: false
  name: DbCommit
  nameWithType: GenericRepository<TContext, TEntity>.DbCommit
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.DbCommit
  nameWithType.vb: GenericRepository(Of TContext, TEntity).DbCommit
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).DbCommit
- uid: Intranet.Common.IDbCommit{{TContext}}
  commentId: T:Intranet.Common.IDbCommit{`0}
  parent: Intranet.Common
  definition: Intranet.Common.IDbCommit`1
  name: IDbCommit<TContext>
  nameWithType: IDbCommit<TContext>
  fullName: Intranet.Common.IDbCommit<TContext>
  nameWithType.vb: IDbCommit(Of TContext)
  fullname.vb: Intranet.Common.IDbCommit(Of TContext)
  name.vb: IDbCommit(Of TContext)
  spec.csharp:
  - uid: Intranet.Common.IDbCommit`1
    name: IDbCommit
    nameWithType: IDbCommit
    fullName: Intranet.Common.IDbCommit
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.IDbCommit`1
    name: IDbCommit
    nameWithType: IDbCommit
    fullName: Intranet.Common.IDbCommit
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2
  commentId: T:Intranet.Common.GenericRepository`2
  isExternal: false
  name: GenericRepository<TContext, TEntity>
  nameWithType: GenericRepository<TContext, TEntity>
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>
  nameWithType.vb: GenericRepository(Of TContext, TEntity)
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity)
  name.vb: GenericRepository(Of TContext, TEntity)
  spec.csharp:
  - uid: Intranet.Common.GenericRepository`2
    name: GenericRepository
    nameWithType: GenericRepository
    fullName: Intranet.Common.GenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Intranet.Common.GenericRepository`2
    name: GenericRepository
    nameWithType: GenericRepository
    fullName: Intranet.Common.GenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.ILoggerFactory
  commentId: T:Intranet.Common.ILoggerFactory
  parent: Intranet.Common
  isExternal: false
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Intranet.Common.ILoggerFactory
- uid: Intranet.Common.GenericRepository`2.#ctor*
  commentId: Overload:Intranet.Common.GenericRepository`2.#ctor
  isExternal: false
  name: GenericRepository
  nameWithType: GenericRepository<TContext, TEntity>.GenericRepository
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.GenericRepository
  nameWithType.vb: GenericRepository(Of TContext, TEntity).GenericRepository
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).GenericRepository
- uid: Intranet.Common.DisposableBase.Disposed
  commentId: M:Intranet.Common.DisposableBase.Disposed
  parent: Intranet.Common.DisposableBase
  isExternal: false
  name: Disposed()
  nameWithType: DisposableBase.Disposed()
  fullName: Intranet.Common.DisposableBase.Disposed()
  spec.csharp:
  - uid: Intranet.Common.DisposableBase.Disposed
    name: Disposed
    nameWithType: DisposableBase.Disposed
    fullName: Intranet.Common.DisposableBase.Disposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.DisposableBase.Disposed
    name: Disposed
    nameWithType: DisposableBase.Disposed
    fullName: Intranet.Common.DisposableBase.Disposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.Disposed*
  commentId: Overload:Intranet.Common.GenericRepository`2.Disposed
  isExternal: false
  name: Disposed
  nameWithType: GenericRepository<TContext, TEntity>.Disposed
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Disposed
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Disposed
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Disposed
- uid: Intranet.Common.GenericRepository`2.GetAll*
  commentId: Overload:Intranet.Common.GenericRepository`2.GetAll
  isExternal: false
  name: GetAll
  nameWithType: GenericRepository<TContext, TEntity>.GetAll
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.GetAll
  nameWithType.vb: GenericRepository(Of TContext, TEntity).GetAll
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).GetAll
- uid: Intranet.Common.IGenericRepository{{TEntity}}.GetAll
  commentId: M:Intranet.Common.IGenericRepository{`1}.GetAll
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.GetAll
  name: GetAll()
  nameWithType: IGenericRepository<TEntity>.GetAll()
  fullName: Intranet.Common.IGenericRepository<TEntity>.GetAll()
  nameWithType.vb: IGenericRepository(Of TEntity).GetAll()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).GetAll()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.GetAll
    name: GetAll
    nameWithType: IGenericRepository<TEntity>.GetAll
    fullName: Intranet.Common.IGenericRepository<TEntity>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.GetAll
    name: GetAll
    nameWithType: IGenericRepository(Of TEntity).GetAll
    fullName: Intranet.Common.IGenericRepository(Of TEntity).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{`1}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullname.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.GetAll
  commentId: M:Intranet.Common.IGenericRepository`1.GetAll
  isExternal: false
  name: GetAll()
  nameWithType: IGenericRepository<TEntity>.GetAll()
  fullName: Intranet.Common.IGenericRepository<TEntity>.GetAll()
  nameWithType.vb: IGenericRepository(Of TEntity).GetAll()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).GetAll()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.GetAll
    name: GetAll
    nameWithType: IGenericRepository<TEntity>.GetAll
    fullName: Intranet.Common.IGenericRepository<TEntity>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.GetAll
    name: GetAll
    nameWithType: IGenericRepository(Of TEntity).GetAll
    fullName: Intranet.Common.IGenericRepository(Of TEntity).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Intranet.Common.GenericRepository`2.Where*
  commentId: Overload:Intranet.Common.GenericRepository`2.Where
  isExternal: false
  name: Where
  nameWithType: GenericRepository<TContext, TEntity>.Where
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Where
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Where
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Where
- uid: Intranet.Common.IGenericRepository{{TEntity}}.Where(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Intranet.Common.IGenericRepository{`1}.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Where(Expression<Func<TEntity, Boolean>>)
  nameWithType: IGenericRepository<TEntity>.Where(Expression<Func<TEntity, Boolean>>)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Where(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IGenericRepository(Of TEntity).Where(Expression(Of Func(Of TEntity, Boolean)))
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Where(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Where
    nameWithType: IGenericRepository<TEntity>.Where
    fullName: Intranet.Common.IGenericRepository<TEntity>.Where
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Where
    nameWithType: IGenericRepository(Of TEntity).Where
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Where
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Where(Expression<Func<TEntity, Boolean>>)
  nameWithType: IGenericRepository<TEntity>.Where(Expression<Func<TEntity, Boolean>>)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Where(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: IGenericRepository(Of TEntity).Where(Expression(Of Func(Of TEntity, Boolean)))
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Where(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: Where(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Where
    nameWithType: IGenericRepository<TEntity>.Where
    fullName: Intranet.Common.IGenericRepository<TEntity>.Where
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Where
    nameWithType: IGenericRepository(Of TEntity).Where
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Where
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Intranet.Common.GenericRepository`2.Add*
  commentId: Overload:Intranet.Common.GenericRepository`2.Add
  isExternal: false
  name: Add
  nameWithType: GenericRepository<TContext, TEntity>.Add
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Add
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Add
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Add
- uid: Intranet.Common.IGenericRepository{{TEntity}}.Add({TEntity})
  commentId: M:Intranet.Common.IGenericRepository{`1}.Add(`1)
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.Add(`0)
  name: Add(TEntity)
  nameWithType: IGenericRepository<TEntity>.Add(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Add(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Add(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Add(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Add(`0)
    name: Add
    nameWithType: IGenericRepository<TEntity>.Add
    fullName: Intranet.Common.IGenericRepository<TEntity>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Add(`0)
    name: Add
    nameWithType: IGenericRepository(Of TEntity).Add
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Intranet.Common.IGenericRepository`1.Add(`0)
  commentId: M:Intranet.Common.IGenericRepository`1.Add(`0)
  isExternal: false
  name: Add(TEntity)
  nameWithType: IGenericRepository<TEntity>.Add(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Add(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Add(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Add(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Add(`0)
    name: Add
    nameWithType: IGenericRepository<TEntity>.Add
    fullName: Intranet.Common.IGenericRepository<TEntity>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Add(`0)
    name: Add
    nameWithType: IGenericRepository(Of TEntity).Add
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  isExternal: false
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Intranet.Common.GenericRepository`2.AddRange*
  commentId: Overload:Intranet.Common.GenericRepository`2.AddRange
  isExternal: false
  name: AddRange
  nameWithType: GenericRepository<TContext, TEntity>.AddRange
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.AddRange
  nameWithType.vb: GenericRepository(Of TContext, TEntity).AddRange
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).AddRange
- uid: Intranet.Common.IGenericRepository{{TEntity}}.AddRange(System.Collections.Generic.IEnumerable{{TEntity}})
  commentId: M:Intranet.Common.IGenericRepository{`1}.AddRange(System.Collections.Generic.IEnumerable{`1})
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<TEntity>)
  nameWithType: IGenericRepository<TEntity>.AddRange(IEnumerable<TEntity>)
  fullName: Intranet.Common.IGenericRepository<TEntity>.AddRange(System.Collections.Generic.IEnumerable<TEntity>)
  nameWithType.vb: IGenericRepository(Of TEntity).AddRange(IEnumerable(Of TEntity))
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).AddRange(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AddRange(IEnumerable(Of TEntity))
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: IGenericRepository<TEntity>.AddRange
    fullName: Intranet.Common.IGenericRepository<TEntity>.AddRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: IGenericRepository(Of TEntity).AddRange
    fullName: Intranet.Common.IGenericRepository(Of TEntity).AddRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<TEntity>)
  nameWithType: IGenericRepository<TEntity>.AddRange(IEnumerable<TEntity>)
  fullName: Intranet.Common.IGenericRepository<TEntity>.AddRange(System.Collections.Generic.IEnumerable<TEntity>)
  nameWithType.vb: IGenericRepository(Of TEntity).AddRange(IEnumerable(Of TEntity))
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).AddRange(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AddRange(IEnumerable(Of TEntity))
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: IGenericRepository<TEntity>.AddRange
    fullName: Intranet.Common.IGenericRepository<TEntity>.AddRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: IGenericRepository(Of TEntity).AddRange
    fullName: Intranet.Common.IGenericRepository(Of TEntity).AddRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Intranet.Common.GenericRepository`2.Remove*
  commentId: Overload:Intranet.Common.GenericRepository`2.Remove
  isExternal: false
  name: Remove
  nameWithType: GenericRepository<TContext, TEntity>.Remove
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Remove
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Remove
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Remove
- uid: Intranet.Common.IGenericRepository{{TEntity}}.Remove({TEntity})
  commentId: M:Intranet.Common.IGenericRepository{`1}.Remove(`1)
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.Remove(`0)
  name: Remove(TEntity)
  nameWithType: IGenericRepository<TEntity>.Remove(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Remove(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Remove(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Remove(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Remove(`0)
    name: Remove
    nameWithType: IGenericRepository<TEntity>.Remove
    fullName: Intranet.Common.IGenericRepository<TEntity>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Remove(`0)
    name: Remove
    nameWithType: IGenericRepository(Of TEntity).Remove
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.Remove(`0)
  commentId: M:Intranet.Common.IGenericRepository`1.Remove(`0)
  isExternal: false
  name: Remove(TEntity)
  nameWithType: IGenericRepository<TEntity>.Remove(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Remove(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Remove(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Remove(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Remove(`0)
    name: Remove
    nameWithType: IGenericRepository<TEntity>.Remove
    fullName: Intranet.Common.IGenericRepository<TEntity>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Remove(`0)
    name: Remove
    nameWithType: IGenericRepository(Of TEntity).Remove
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.SetModified*
  commentId: Overload:Intranet.Common.GenericRepository`2.SetModified
  isExternal: false
  name: SetModified
  nameWithType: GenericRepository<TContext, TEntity>.SetModified
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SetModified
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SetModified
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SetModified
- uid: Intranet.Common.IGenericRepository{{TEntity}}.SetModified({TEntity})
  commentId: M:Intranet.Common.IGenericRepository{`1}.SetModified(`1)
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.SetModified(`0)
  name: SetModified(TEntity)
  nameWithType: IGenericRepository<TEntity>.SetModified(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.SetModified(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).SetModified(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SetModified(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SetModified(`0)
    name: SetModified
    nameWithType: IGenericRepository<TEntity>.SetModified
    fullName: Intranet.Common.IGenericRepository<TEntity>.SetModified
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SetModified(`0)
    name: SetModified
    nameWithType: IGenericRepository(Of TEntity).SetModified
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SetModified
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.SetModified(`0)
  commentId: M:Intranet.Common.IGenericRepository`1.SetModified(`0)
  isExternal: false
  name: SetModified(TEntity)
  nameWithType: IGenericRepository<TEntity>.SetModified(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.SetModified(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).SetModified(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SetModified(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SetModified(`0)
    name: SetModified
    nameWithType: IGenericRepository<TEntity>.SetModified
    fullName: Intranet.Common.IGenericRepository<TEntity>.SetModified
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SetModified(`0)
    name: SetModified
    nameWithType: IGenericRepository(Of TEntity).SetModified
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SetModified
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.Attach*
  commentId: Overload:Intranet.Common.GenericRepository`2.Attach
  isExternal: false
  name: Attach
  nameWithType: GenericRepository<TContext, TEntity>.Attach
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Attach
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Attach
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Attach
- uid: Intranet.Common.IGenericRepository{{TEntity}}.Attach({TEntity})
  commentId: M:Intranet.Common.IGenericRepository{`1}.Attach(`1)
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.Attach(`0)
  name: Attach(TEntity)
  nameWithType: IGenericRepository<TEntity>.Attach(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Attach(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Attach(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Attach(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Attach(`0)
    name: Attach
    nameWithType: IGenericRepository<TEntity>.Attach
    fullName: Intranet.Common.IGenericRepository<TEntity>.Attach
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Attach(`0)
    name: Attach
    nameWithType: IGenericRepository(Of TEntity).Attach
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Attach
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.Attach(`0)
  commentId: M:Intranet.Common.IGenericRepository`1.Attach(`0)
  isExternal: false
  name: Attach(TEntity)
  nameWithType: IGenericRepository<TEntity>.Attach(TEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Attach(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Attach(TEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Attach(TEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Attach(`0)
    name: Attach
    nameWithType: IGenericRepository<TEntity>.Attach
    fullName: Intranet.Common.IGenericRepository<TEntity>.Attach
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Attach(`0)
    name: Attach
    nameWithType: IGenericRepository(Of TEntity).Attach
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Attach
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.SaveChanges*
  commentId: Overload:Intranet.Common.GenericRepository`2.SaveChanges
  isExternal: false
  name: SaveChanges
  nameWithType: GenericRepository<TContext, TEntity>.SaveChanges
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SaveChanges
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SaveChanges
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SaveChanges
- uid: Intranet.Common.IGenericRepository{{TEntity}}.SaveChanges
  commentId: M:Intranet.Common.IGenericRepository{`1}.SaveChanges
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.SaveChanges
  name: SaveChanges()
  nameWithType: IGenericRepository<TEntity>.SaveChanges()
  fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChanges()
  nameWithType.vb: IGenericRepository(Of TEntity).SaveChanges()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SaveChanges()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SaveChanges
    name: SaveChanges
    nameWithType: IGenericRepository<TEntity>.SaveChanges
    fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SaveChanges
    name: SaveChanges
    nameWithType: IGenericRepository(Of TEntity).SaveChanges
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Intranet.Common.IGenericRepository`1.SaveChanges
  commentId: M:Intranet.Common.IGenericRepository`1.SaveChanges
  isExternal: false
  name: SaveChanges()
  nameWithType: IGenericRepository<TEntity>.SaveChanges()
  fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChanges()
  nameWithType.vb: IGenericRepository(Of TEntity).SaveChanges()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SaveChanges()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SaveChanges
    name: SaveChanges
    nameWithType: IGenericRepository<TEntity>.SaveChanges
    fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SaveChanges
    name: SaveChanges
    nameWithType: IGenericRepository(Of TEntity).SaveChanges
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
- uid: Intranet.Common.GenericRepository`2.SaveChangesAsync*
  commentId: Overload:Intranet.Common.GenericRepository`2.SaveChangesAsync
  isExternal: false
  name: SaveChangesAsync
  nameWithType: GenericRepository<TContext, TEntity>.SaveChangesAsync
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SaveChangesAsync
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SaveChangesAsync
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SaveChangesAsync
- uid: Intranet.Common.IGenericRepository{{TEntity}}.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:Intranet.Common.IGenericRepository{`1}.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  name: SaveChangesAsync(Nullable<CancellationToken>)
  nameWithType: IGenericRepository<TEntity>.SaveChangesAsync(Nullable<CancellationToken>)
  fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChangesAsync(System.Nullable<System.Threading.CancellationToken>)
  nameWithType.vb: IGenericRepository(Of TEntity).SaveChangesAsync(Nullable(Of CancellationToken))
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SaveChangesAsync(System.Nullable(Of System.Threading.CancellationToken))
  name.vb: SaveChangesAsync(Nullable(Of CancellationToken))
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
    name: SaveChangesAsync
    nameWithType: IGenericRepository<TEntity>.SaveChangesAsync
    fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
    name: SaveChangesAsync
    nameWithType: IGenericRepository(Of TEntity).SaveChangesAsync
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CancellationToken>
  nameWithType: Nullable<CancellationToken>
  fullName: System.Nullable<System.Threading.CancellationToken>
  nameWithType.vb: Nullable(Of CancellationToken)
  fullname.vb: System.Nullable(Of System.Threading.CancellationToken)
  name.vb: Nullable(Of CancellationToken)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  name: SaveChangesAsync(Nullable<CancellationToken>)
  nameWithType: IGenericRepository<TEntity>.SaveChangesAsync(Nullable<CancellationToken>)
  fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChangesAsync(System.Nullable<System.Threading.CancellationToken>)
  nameWithType.vb: IGenericRepository(Of TEntity).SaveChangesAsync(Nullable(Of CancellationToken))
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SaveChangesAsync(System.Nullable(Of System.Threading.CancellationToken))
  name.vb: SaveChangesAsync(Nullable(Of CancellationToken))
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
    name: SaveChangesAsync
    nameWithType: IGenericRepository<TEntity>.SaveChangesAsync
    fullName: Intranet.Common.IGenericRepository<TEntity>.SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SaveChangesAsync(System.Nullable{System.Threading.CancellationToken})
    name: SaveChangesAsync
    nameWithType: IGenericRepository(Of TEntity).SaveChangesAsync
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Data.Entity.Infrastructure.DbEntityEntry`1
  commentId: T:System.Data.Entity.Infrastructure.DbEntityEntry`1
  isExternal: true
  name: DbEntityEntry<TEntity>
  nameWithType: DbEntityEntry<TEntity>
  fullName: System.Data.Entity.Infrastructure.DbEntityEntry<TEntity>
  nameWithType.vb: DbEntityEntry(Of TEntity)
  fullname.vb: System.Data.Entity.Infrastructure.DbEntityEntry(Of TEntity)
  name.vb: DbEntityEntry(Of TEntity)
  spec.csharp:
  - uid: System.Data.Entity.Infrastructure.DbEntityEntry`1
    name: DbEntityEntry
    nameWithType: DbEntityEntry
    fullName: System.Data.Entity.Infrastructure.DbEntityEntry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Entity.Infrastructure.DbEntityEntry`1
    name: DbEntityEntry
    nameWithType: DbEntityEntry
    fullName: System.Data.Entity.Infrastructure.DbEntityEntry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.Entry*
  commentId: Overload:Intranet.Common.GenericRepository`2.Entry
  isExternal: false
  name: Entry<TAnyEntity>
  nameWithType: GenericRepository<TContext, TEntity>.Entry<TAnyEntity>
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.Entry<TAnyEntity>
  nameWithType.vb: GenericRepository(Of TContext, TEntity).Entry(Of TAnyEntity)
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).Entry(Of TAnyEntity)
  name.vb: Entry(Of TAnyEntity)
- uid: Intranet.Common.IGenericRepository{{TEntity}}.Entry``1({TAnyEntity})
  commentId: M:Intranet.Common.IGenericRepository{`1}.Entry``1(``0)
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.Entry``1(``0)
  name: Entry<TAnyEntity>(TAnyEntity)
  nameWithType: IGenericRepository<TEntity>.Entry<TAnyEntity>(TAnyEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Entry<TAnyEntity>(TAnyEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Entry(Of TAnyEntity)(TAnyEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Entry(Of TAnyEntity)(TAnyEntity)
  name.vb: Entry(Of TAnyEntity)(TAnyEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Entry``1(``0)
    name: Entry<TAnyEntity>
    nameWithType: IGenericRepository<TEntity>.Entry<TAnyEntity>
    fullName: Intranet.Common.IGenericRepository<TEntity>.Entry<TAnyEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAnyEntity
    nameWithType: TAnyEntity
    fullName: TAnyEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Entry``1(``0)
    name: Entry(Of TAnyEntity)
    nameWithType: IGenericRepository(Of TEntity).Entry(Of TAnyEntity)
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Entry(Of TAnyEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAnyEntity
    nameWithType: TAnyEntity
    fullName: TAnyEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TAnyEntity}'
  commentId: '!:TAnyEntity'
  definition: TAnyEntity
  name: TAnyEntity
  nameWithType: TAnyEntity
  fullName: TAnyEntity
- uid: System.Data.Entity.Infrastructure.DbEntityEntry{{TAnyEntity}}
  commentId: T:System.Data.Entity.Infrastructure.DbEntityEntry{``0}
  parent: System.Data.Entity.Infrastructure
  definition: System.Data.Entity.Infrastructure.DbEntityEntry`1
  name: DbEntityEntry<TAnyEntity>
  nameWithType: DbEntityEntry<TAnyEntity>
  fullName: System.Data.Entity.Infrastructure.DbEntityEntry<TAnyEntity>
  nameWithType.vb: DbEntityEntry(Of TAnyEntity)
  fullname.vb: System.Data.Entity.Infrastructure.DbEntityEntry(Of TAnyEntity)
  name.vb: DbEntityEntry(Of TAnyEntity)
  spec.csharp:
  - uid: System.Data.Entity.Infrastructure.DbEntityEntry`1
    name: DbEntityEntry
    nameWithType: DbEntityEntry
    fullName: System.Data.Entity.Infrastructure.DbEntityEntry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAnyEntity
    nameWithType: TAnyEntity
    fullName: TAnyEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Entity.Infrastructure.DbEntityEntry`1
    name: DbEntityEntry
    nameWithType: DbEntityEntry
    fullName: System.Data.Entity.Infrastructure.DbEntityEntry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAnyEntity
    nameWithType: TAnyEntity
    fullName: TAnyEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.Entry``1(``0)
  commentId: M:Intranet.Common.IGenericRepository`1.Entry``1(``0)
  isExternal: false
  name: Entry<TAnyEntity>(TAnyEntity)
  nameWithType: IGenericRepository<TEntity>.Entry<TAnyEntity>(TAnyEntity)
  fullName: Intranet.Common.IGenericRepository<TEntity>.Entry<TAnyEntity>(TAnyEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).Entry(Of TAnyEntity)(TAnyEntity)
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).Entry(Of TAnyEntity)(TAnyEntity)
  name.vb: Entry(Of TAnyEntity)(TAnyEntity)
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.Entry``1(``0)
    name: Entry<TAnyEntity>
    nameWithType: IGenericRepository<TEntity>.Entry<TAnyEntity>
    fullName: Intranet.Common.IGenericRepository<TEntity>.Entry<TAnyEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: TAnyEntity
    nameWithType: TAnyEntity
    fullName: TAnyEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.Entry``1(``0)
    name: Entry(Of TAnyEntity)
    nameWithType: IGenericRepository(Of TEntity).Entry(Of TAnyEntity)
    fullName: Intranet.Common.IGenericRepository(Of TEntity).Entry(Of TAnyEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: TAnyEntity
    nameWithType: TAnyEntity
    fullName: TAnyEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TAnyEntity
  isExternal: false
  name: TAnyEntity
  nameWithType: TAnyEntity
  fullName: TAnyEntity
- uid: System.Data.Entity.Infrastructure
  commentId: N:System.Data.Entity.Infrastructure
  isExternal: false
  name: System.Data.Entity.Infrastructure
  nameWithType: System.Data.Entity.Infrastructure
  fullName: System.Data.Entity.Infrastructure
- uid: Intranet.Common.GenericRepository`2.CountRecords*
  commentId: Overload:Intranet.Common.GenericRepository`2.CountRecords
  isExternal: false
  name: CountRecords
  nameWithType: GenericRepository<TContext, TEntity>.CountRecords
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.CountRecords
  nameWithType.vb: GenericRepository(Of TContext, TEntity).CountRecords
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).CountRecords
- uid: Intranet.Common.IGenericRepository{{TEntity}}.CountRecords
  commentId: M:Intranet.Common.IGenericRepository{`1}.CountRecords
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.CountRecords
  name: CountRecords()
  nameWithType: IGenericRepository<TEntity>.CountRecords()
  fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecords()
  nameWithType.vb: IGenericRepository(Of TEntity).CountRecords()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).CountRecords()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.CountRecords
    name: CountRecords
    nameWithType: IGenericRepository<TEntity>.CountRecords
    fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.CountRecords
    name: CountRecords
    nameWithType: IGenericRepository(Of TEntity).CountRecords
    fullName: Intranet.Common.IGenericRepository(Of TEntity).CountRecords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.CountRecords
  commentId: M:Intranet.Common.IGenericRepository`1.CountRecords
  isExternal: false
  name: CountRecords()
  nameWithType: IGenericRepository<TEntity>.CountRecords()
  fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecords()
  nameWithType.vb: IGenericRepository(Of TEntity).CountRecords()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).CountRecords()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.CountRecords
    name: CountRecords
    nameWithType: IGenericRepository<TEntity>.CountRecords
    fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.CountRecords
    name: CountRecords
    nameWithType: IGenericRepository(Of TEntity).CountRecords
    fullName: Intranet.Common.IGenericRepository(Of TEntity).CountRecords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.CountRecordsAsync*
  commentId: Overload:Intranet.Common.GenericRepository`2.CountRecordsAsync
  isExternal: false
  name: CountRecordsAsync
  nameWithType: GenericRepository<TContext, TEntity>.CountRecordsAsync
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.CountRecordsAsync
  nameWithType.vb: GenericRepository(Of TContext, TEntity).CountRecordsAsync
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).CountRecordsAsync
- uid: Intranet.Common.IGenericRepository{{TEntity}}.CountRecordsAsync
  commentId: M:Intranet.Common.IGenericRepository{`1}.CountRecordsAsync
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.CountRecordsAsync
  name: CountRecordsAsync()
  nameWithType: IGenericRepository<TEntity>.CountRecordsAsync()
  fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecordsAsync()
  nameWithType.vb: IGenericRepository(Of TEntity).CountRecordsAsync()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).CountRecordsAsync()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.CountRecordsAsync
    name: CountRecordsAsync
    nameWithType: IGenericRepository<TEntity>.CountRecordsAsync
    fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecordsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.CountRecordsAsync
    name: CountRecordsAsync
    nameWithType: IGenericRepository(Of TEntity).CountRecordsAsync
    fullName: Intranet.Common.IGenericRepository(Of TEntity).CountRecordsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.CountRecordsAsync
  commentId: M:Intranet.Common.IGenericRepository`1.CountRecordsAsync
  isExternal: false
  name: CountRecordsAsync()
  nameWithType: IGenericRepository<TEntity>.CountRecordsAsync()
  fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecordsAsync()
  nameWithType.vb: IGenericRepository(Of TEntity).CountRecordsAsync()
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).CountRecordsAsync()
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.CountRecordsAsync
    name: CountRecordsAsync
    nameWithType: IGenericRepository<TEntity>.CountRecordsAsync
    fullName: Intranet.Common.IGenericRepository<TEntity>.CountRecordsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.CountRecordsAsync
    name: CountRecordsAsync
    nameWithType: IGenericRepository(Of TEntity).CountRecordsAsync
    fullName: Intranet.Common.IGenericRepository(Of TEntity).CountRecordsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.FindAsync*
  commentId: Overload:Intranet.Common.GenericRepository`2.FindAsync
  isExternal: false
  name: FindAsync
  nameWithType: GenericRepository<TContext, TEntity>.FindAsync
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.FindAsync
  nameWithType.vb: GenericRepository(Of TContext, TEntity).FindAsync
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).FindAsync
- uid: Intranet.Common.IGenericRepository{{TEntity}}.FindAsync(System.Object[])
  commentId: M:Intranet.Common.IGenericRepository{`1}.FindAsync(System.Object[])
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
  name: FindAsync(Object[])
  nameWithType: IGenericRepository<TEntity>.FindAsync(Object[])
  fullName: Intranet.Common.IGenericRepository<TEntity>.FindAsync(System.Object[])
  nameWithType.vb: IGenericRepository(Of TEntity).FindAsync(Object())
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).FindAsync(System.Object())
  name.vb: FindAsync(Object())
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
    name: FindAsync
    nameWithType: IGenericRepository<TEntity>.FindAsync
    fullName: Intranet.Common.IGenericRepository<TEntity>.FindAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
    name: FindAsync
    nameWithType: IGenericRepository(Of TEntity).FindAsync
    fullName: Intranet.Common.IGenericRepository(Of TEntity).FindAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullname.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
  commentId: M:Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
  isExternal: true
  name: FindAsync(Object[])
  nameWithType: IGenericRepository<TEntity>.FindAsync(Object[])
  fullName: Intranet.Common.IGenericRepository<TEntity>.FindAsync(System.Object[])
  nameWithType.vb: IGenericRepository(Of TEntity).FindAsync(Object())
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).FindAsync(System.Object())
  name.vb: FindAsync(Object())
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
    name: FindAsync
    nameWithType: IGenericRepository<TEntity>.FindAsync
    fullName: Intranet.Common.IGenericRepository<TEntity>.FindAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.FindAsync(System.Object[])
    name: FindAsync
    nameWithType: IGenericRepository(Of TEntity).FindAsync
    fullName: Intranet.Common.IGenericRepository(Of TEntity).FindAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Entity.Infrastructure.DbSqlQuery`1
  commentId: T:System.Data.Entity.Infrastructure.DbSqlQuery`1
  isExternal: true
  name: DbSqlQuery<TEntity>
  nameWithType: DbSqlQuery<TEntity>
  fullName: System.Data.Entity.Infrastructure.DbSqlQuery<TEntity>
  nameWithType.vb: DbSqlQuery(Of TEntity)
  fullname.vb: System.Data.Entity.Infrastructure.DbSqlQuery(Of TEntity)
  name.vb: DbSqlQuery(Of TEntity)
  spec.csharp:
  - uid: System.Data.Entity.Infrastructure.DbSqlQuery`1
    name: DbSqlQuery
    nameWithType: DbSqlQuery
    fullName: System.Data.Entity.Infrastructure.DbSqlQuery
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Entity.Infrastructure.DbSqlQuery`1
    name: DbSqlQuery
    nameWithType: DbSqlQuery
    fullName: System.Data.Entity.Infrastructure.DbSqlQuery
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.GenericRepository`2.SqlQuery*
  commentId: Overload:Intranet.Common.GenericRepository`2.SqlQuery
  isExternal: false
  name: SqlQuery
  nameWithType: GenericRepository<TContext, TEntity>.SqlQuery
  fullName: Intranet.Common.GenericRepository<TContext, TEntity>.SqlQuery
  nameWithType.vb: GenericRepository(Of TContext, TEntity).SqlQuery
  fullname.vb: Intranet.Common.GenericRepository(Of TContext, TEntity).SqlQuery
- uid: Intranet.Common.IGenericRepository{{TEntity}}.SqlQuery(System.String,System.Object[])
  commentId: M:Intranet.Common.IGenericRepository{`1}.SqlQuery(System.String,System.Object[])
  parent: Intranet.Common.IGenericRepository{{TEntity}}
  definition: Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
  name: SqlQuery(String, Object[])
  nameWithType: IGenericRepository<TEntity>.SqlQuery(String, Object[])
  fullName: Intranet.Common.IGenericRepository<TEntity>.SqlQuery(System.String, System.Object[])
  nameWithType.vb: IGenericRepository(Of TEntity).SqlQuery(String, Object())
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SqlQuery(System.String, System.Object())
  name.vb: SqlQuery(String, Object())
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
    name: SqlQuery
    nameWithType: IGenericRepository<TEntity>.SqlQuery
    fullName: Intranet.Common.IGenericRepository<TEntity>.SqlQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
    name: SqlQuery
    nameWithType: IGenericRepository(Of TEntity).SqlQuery
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SqlQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Entity.Infrastructure.DbSqlQuery{{TEntity}}
  commentId: T:System.Data.Entity.Infrastructure.DbSqlQuery{`1}
  parent: System.Data.Entity.Infrastructure
  definition: System.Data.Entity.Infrastructure.DbSqlQuery`1
  name: DbSqlQuery<TEntity>
  nameWithType: DbSqlQuery<TEntity>
  fullName: System.Data.Entity.Infrastructure.DbSqlQuery<TEntity>
  nameWithType.vb: DbSqlQuery(Of TEntity)
  fullname.vb: System.Data.Entity.Infrastructure.DbSqlQuery(Of TEntity)
  name.vb: DbSqlQuery(Of TEntity)
  spec.csharp:
  - uid: System.Data.Entity.Infrastructure.DbSqlQuery`1
    name: DbSqlQuery
    nameWithType: DbSqlQuery
    fullName: System.Data.Entity.Infrastructure.DbSqlQuery
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Data.Entity.Infrastructure.DbSqlQuery`1
    name: DbSqlQuery
    nameWithType: DbSqlQuery
    fullName: System.Data.Entity.Infrastructure.DbSqlQuery
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
  commentId: M:Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
  isExternal: true
  name: SqlQuery(String, Object[])
  nameWithType: IGenericRepository<TEntity>.SqlQuery(String, Object[])
  fullName: Intranet.Common.IGenericRepository<TEntity>.SqlQuery(System.String, System.Object[])
  nameWithType.vb: IGenericRepository(Of TEntity).SqlQuery(String, Object())
  fullname.vb: Intranet.Common.IGenericRepository(Of TEntity).SqlQuery(System.String, System.Object())
  name.vb: SqlQuery(String, Object())
  spec.csharp:
  - uid: Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
    name: SqlQuery
    nameWithType: IGenericRepository<TEntity>.SqlQuery
    fullName: Intranet.Common.IGenericRepository<TEntity>.SqlQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Intranet.Common.IGenericRepository`1.SqlQuery(System.String,System.Object[])
    name: SqlQuery
    nameWithType: IGenericRepository(Of TEntity).SqlQuery
    fullName: Intranet.Common.IGenericRepository(Of TEntity).SqlQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
