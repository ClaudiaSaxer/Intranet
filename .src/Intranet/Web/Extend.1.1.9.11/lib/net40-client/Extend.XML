<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Extend</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
                Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
                For a parameter that is expected to be one of the limited set of values.
                Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
                for method output means that the methos doesn't return normally.<br />
                <c>canbenull</c> annotation is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
                or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
                as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly when marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by ReSharper code completion
                as a 'Source Template'. When extension method is completed over some expression, it's source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
            >
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
                <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation or property access
                over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:Extend.AttributeDefinitionProperty`1">
            <summary>
                Class representing a attribute definition.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
        </member>
        <member name="P:Extend.AttributeDefinitionProperty`1.Property">
            <summary>
                Gets or sets the property which is decorated with the attributes.
            </summary>
            <value>The property which is decorated with the attributes.</value>
        </member>
        <member name="P:Extend.AttributeDefinitionProperty`1.Attributes">
            <summary>
                Gets or sets a collection of attributes of the specified type.
            </summary>
            <value>A collection of attributes of the specified type.</value>
        </member>
        <member name="T:Extend.AttributeDefinitionType`1">
            <summary>
                Class representing a type and it's attributes of a specific type.
            </summary>
            <typeparam name="T">The type of the attributes.</typeparam>
        </member>
        <member name="P:Extend.AttributeDefinitionType`1.Attributes">
            <summary>
                Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Extend.AttributeDefinitionType`1.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Extend.IAttributeDefinitionProperty`1">
            <summary>
                Interface representing the attribute definitions of a property.
            </summary>
            <typeparam name="T">The type of the attributes.</typeparam>
        </member>
        <member name="P:Extend.IAttributeDefinitionProperty`1.Property">
            <summary>
                Gets or sets the property which is decorated with the attributes.
            </summary>
            <value>The property which is decorated with the attributes.</value>
        </member>
        <member name="P:Extend.IAttributeDefinitionProperty`1.Attributes">
            <summary>
                Gets or sets a collection of attributes of the specified type.
            </summary>
            <value>A collection of attributes of the specified type.</value>
        </member>
        <member name="T:Extend.IAttributeDefinitionType`1">
            <summary>
                Interface representing the attribute definitions of a type.
            </summary>
            <typeparam name="T">The type of the attributes.</typeparam>
        </member>
        <member name="P:Extend.IAttributeDefinitionType`1.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Extend.IAttributeDefinitionType`1.Attributes">
            <summary>
                Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="T:Extend.IIndexedItem`1">
            <summary>
                Interface representing an item with an index.
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="P:Extend.IIndexedItem`1.Index">
            <summary>
                Gets the index of the item.
            </summary>
            <value>The index of the item.</value>
        </member>
        <member name="P:Extend.IIndexedItem`1.Item">
            <summary>
                Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Extend.IndexedItem`1">
            <summary>
                Class representing an item with an index.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:Extend.IndexedItem`1.#ctor(System.Int32,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.IndexedItem`1" /> class.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:Extend.IndexedItem`1.Index">
            <summary>
                Gets the index of the item.
            </summary>
            <value>The index of the item.</value>
        </member>
        <member name="P:Extend.IndexedItem`1.Item">
            <summary>
                Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Extend.SpecificationEx">
            <summary>
                Class containing some extension methods for <see cref="T:Extend.ISpecification`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:Extend.ISpecification`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:Extend.ISpecification`1" />.
            </summary>
        </member>
        <member name="M:Extend.SpecificationEx.XOr``1(Extend.ISpecification{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Combines the current specification with the given expression using a XOr link.
            </summary>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <typeparam name="T">The target type of the specification.</typeparam>
            <param name="specification">The current specification.</param>
            <param name="expression">The expression to add.</param>
            <param name="message">The validation error message.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="M:Extend.SpecificationEx.Or``1(Extend.ISpecification{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Combines the current specification with the given expression using a OR link.
            </summary>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <typeparam name="T">The target type of the specification.</typeparam>
            <param name="specification">The current specification.</param>
            <param name="expression">The expression to add.</param>
            <param name="message">The validation error message.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="M:Extend.SpecificationEx.And``1(Extend.ISpecification{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Combines the current specification with the given expression using an AND link.
            </summary>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <typeparam name="T">The target type of the specification.</typeparam>
            <param name="specification">The current specification.</param>
            <param name="expression">The expression to add.</param>
            <param name="message">The validation error message.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="T:Extend.IExecutionResult`1">
            <summary>
                Interface representing the result of a safe method execution.
            </summary>
        </member>
        <member name="P:Extend.IExecutionResult`1.Exception">
            <summary>
                Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Extend.IExecutionResult`1.Result">
            <summary>
                Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Extend.ActionEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Action" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Action" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Action" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Action" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Action" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Action" />.
            </summary>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse(System.Action,System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="trueAction">The action to execute if all of the given value is true.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``1(System.Action{``0},``0,System.Action{``0},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="trueAction">The action to execute if all values are true.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``2(System.Action{``0,``1},``0,``1,System.Action{``0,``1},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="trueAction">The action to execute if all values are true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``3(System.Action{``0,``1,``2},``0,``1,``2,System.Action{``0,``1,``2},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="trueAction">The action to execute if all values are true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="trueAction">The action to execute if all values are true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse(System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``1(System.Action{``0},``0,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``2(System.Action{``0,``1},``0,``1,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``3(System.Action{``0,``1,``2},``0,``1,``2,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyFalse``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue(System.Action,System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``1(System.Action{``0},``0,System.Action{``0},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``2(System.Action{``0,``1},``0,``1,System.Action{``0,``1},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``3(System.Action{``0,``1,``2},``0,``1,``2,System.Action{``0,``1,``2},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue(System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``1(System.Action{``0},``0,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``2(System.Action{``0,``1},``0,``1,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``3(System.Action{``0,``1,``2},``0,``1,``2,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfAnyTrue``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Boolean[])">
            <summary>
                Executes the specified action if one of the given Boolean values is true.
            </summary>
            <exception cref="T:System.ArgumentNullException">True action can not be null, if any value is true.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="trueAction">The action to execute if one of the values is true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse(System.Action,System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="trueAction">The action to execute if any of the given values is true.</param>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``1(System.Action{``0},``0,System.Action{``0},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="trueAction">The action to execute if any of the given values is true.</param>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``2(System.Action{``0,``1},``0,``1,System.Action{``0,``1},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="trueAction">The action to execute if any of the given values is true.</param>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``3(System.Action{``0,``1,``2},``0,``1,``2,System.Action{``0,``1,``2},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="trueAction">The action to execute if any of the given values is true.</param>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false,
                otherwise it executes the specified true action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="trueAction">The action to execute if any of the given values is true.</param>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse(System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``1(System.Action{``0},``0,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``2(System.Action{``0,``1},``0,``1,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``3(System.Action{``0,``1,``2},``0,``1,``2,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfFalse``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are false.
            </summary>
            <exception cref="T:System.ArgumentNullException">falseAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="falseAction">The action to execute if the given values are false.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue(System.Action,System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``1(System.Action{``0},``0,System.Action{``0},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``2(System.Action{``0,``1},``0,``1,System.Action{``0,``1},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``3(System.Action{``0,``1,``2},``0,``1,``2,System.Action{``0,``1,``2},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true,
                otherwise it executes the specified false action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="falseAction">The action to execute if any of the given values is false.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue(System.Action,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``1(System.Action{``0},``0,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``2(System.Action{``0,``1},``0,``1,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``3(System.Action{``0,``1,``2},``0,``1,``2,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.ExecuteIfTrue``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Boolean[])">
            <summary>
                Executes the specified action if the given Boolean values are true.
            </summary>
            <exception cref="T:System.ArgumentNullException">trueAction can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="trueAction">The action to execute if the given values are true.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="values">The Boolean values to check.</param>
        </member>
        <member name="M:Extend.ActionEx.SafeExecute(System.Action)">
            <summary>
                Executes the given action inside of a try catch block and catches all exceptions.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecute``1(System.Action)">
            <summary>
                Executes the given action inside of a try catch block. Catches exceptions of the given type.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecute``2(System.Action)">
            <summary>
                Executes the given action inside of a try catch block. Catches exceptions of the given types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException1">The first exception type to catch.</typeparam>
            <typeparam name="TException2">The second exception type to catch.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecute``3(System.Action)">
            <summary>
                Executes the given action inside of a try catch block. Catches exceptions of the given types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException1">The first exception type to catch.</typeparam>
            <typeparam name="TException2">The second exception type to catch.</typeparam>
            <typeparam name="TException3">The third exception type to catch.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecute``4(System.Action)">
            <summary>
                Executes the given action inside of a try catch block. Catches exceptions of the given types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException1">The first exception type to catch.</typeparam>
            <typeparam name="TException2">The second exception type to catch.</typeparam>
            <typeparam name="TException3">The third exception type to catch.</typeparam>
            <typeparam name="TException4">The fourth exception type to catch.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecute(System.Action,System.Type[])">
            <summary>
                Executes the given action inside of a try catch block. Catches all exception types contained in the given list of
                exception types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">exceptionsToCatch can not be null.</exception>
            <param name="action">The action to execute.</param>
            <param name="exceptionsToCatch">A list of exception types to catch.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecuteExcept``1(System.Action)">
            <summary>
                Executes the given action inside of a try catch block and catches all exception expect the specified type.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException">The type of the exception to throw.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecuteExcept``2(System.Action)">
            <summary>
                Executes the given action inside of a try catch block and catches all exception expect the specified types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException1">The first exception type to throw.</typeparam>
            <typeparam name="TException2">The second exception type to throw.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecuteExcept``3(System.Action)">
            <summary>
                Executes the given action inside of a try catch block and catches all exception expect the specified types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException1">The first exception type to throw.</typeparam>
            <typeparam name="TException2">The second exception type to throw.</typeparam>
            <typeparam name="TException3">The third exception type to throw.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecuteExcept``4(System.Action)">
            <summary>
                Executes the given action inside of a try catch block and catches all exception expect the specified types.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="TException1">The first exception type to throw.</typeparam>
            <typeparam name="TException2">The second exception type to throw.</typeparam>
            <typeparam name="TException3">The third exception type to throw.</typeparam>
            <typeparam name="TException4">The fourth exception type to throw.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="M:Extend.ActionEx.SafeExecuteExcept(System.Action,System.Type[])">
            <summary>
                Executes the given action inside of a try catch block and catches all exception expect the given ones.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">exceptionsToThrow can not be null.</exception>
            <param name="action">The action to execute.</param>
            <param name="exceptionsToThrow">The exceptions to throw.</param>
            <returns>Returns true if the action was executed without an exception, otherwise false.</returns>
        </member>
        <member name="T:Extend.ArrayEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Array" />.
            </summary>
        </member>
        <member name="M:Extend.ArrayEx.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
                Sets a range of elements in the array to zero, to false, or to null, depending on the element type.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <param name="array">The array whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
        </member>
        <member name="M:Extend.ArrayEx.Copy(System.Array,System.Array,System.Int32)">
            <summary>
                Copies a range of elements from an array starting at the first element and pastes them into another array starting
                at the first element. The length is specified as a 32-bit integer.
            </summary>
            <exception cref="T:System.ArgumentNullException">source array can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">destination array can not be null.</exception>
            <param name="sourceArray">The array that contains the data to copy.</param>
            <param name="destinationArray">The array that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:Extend.ArrayEx.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
                Copies a range of elements from an array starting at the specified source index and pastes them to another array
                starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <exception cref="T:System.ArgumentNullException">Source array can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">destination array can not be null.</exception>
            <param name="sourceArray">The array that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the  at which copying begins.</param>
            <param name="destinationArray">The array that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the  at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:Extend.ArrayEx.IndexOf(System.Array,System.Object)">
            <summary>
                Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <returns>
                The index of the first occurrence of value in array, if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
                Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its
                first occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>
                The index of the first occurrence of value, if it’s found, within the range of elements in array that extends from
                startIndex to the last element; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs
                first occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements to search.</param>
            <returns>
                The index of the first occurrence of value, if it’s found, in the array from index startIndex to startIndex + count
                - 1; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.LastIndexOf(System.Array,System.Object)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional
                Array.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <returns>
                The index of the last occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements in the
                one-dimensional Array that extends from the first element to the specified index.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that extends from the first element to ,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements in the
                one-dimensional
                Array that contains the specified number of elements and ends at the specified index.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that contains the number of elements
                specified in  and ends at , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.Reverse(System.Array)">
            <summary>
                Reverses the sequence of the elements in the entire one-dimensional array.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <param name="array">The one-dimensional array to reverse.</param>
        </member>
        <member name="M:Extend.ArrayEx.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
                Reverses the sequence of the elements in a range of elements in the one-dimensional array.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <param name="array">The one-dimensional array to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
        </member>
        <member name="M:Extend.ArrayEx.ClearAll(System.Array)">
            <summary>
                Clears the given array.
            </summary>
            <exception cref="T:System.ArgumentNullException">The array can not be null.</exception>
            <param name="array">The array to clear.</param>
        </member>
        <member name="M:Extend.ArrayEx.WithinIndex(System.Array,System.Int32)">
            <summary>
                Checks if the given index is within the array or not.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <param name="array">The array to check.</param>
            <param name="index">a Zero-based index.</param>
            <returns>Returns a value of true if the index is within the array, otherwise false.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Populate``1(``0[],``0)">
            <summary>
                Populates the given array with the specified value.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="value">The value.</param>
            <returns>Returns the given array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Slice``1(``0[],System.Int32,System.Int32,``0[])">
            <summary>
                Copies the specified range of items from the source array to the given target array.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">targetArray can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The start index must be greater or equals to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items to copy must be greater or equals to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The start index cannot be greater than the length of the given array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The number of items to copy cannot be greater than the length of the
                target array.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The number of items to copy cannot be greater than the length of the
                source array (minus the start index).
            </exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The source array.</param>
            <param name="startIndex">The start index of the items range.</param>
            <param name="itemsToCpoy">The number of items to copy, starting at the given start index.</param>
            <param name="targetArray">The target array.</param>
            <returns>Returns the target array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
                Copies the specified range of items from the source array to the given target array.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">targetArray can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The start index must be greater or equals to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items to copy must be greater or equals to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The start index cannot be greater than the length of the given array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The number of items to copy cannot be greater than the length of the
                source array (minus the start index).
            </exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The source array.</param>
            <param name="startIndex">The start index of the items range.</param>
            <param name="itemsToCpoy">The number of items to copy, starting at the given start index.</param>
            <returns>Returns the target array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Slice``1(``0[],System.Int32,``0[])">
            <summary>
                Copies the specified range of items from the source array to the given target array.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">targetArray can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items to copy must be greater or equals to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The number of items to copy cannot be greater than the length of the
                target array.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The number of items to copy cannot be greater than the length of the
                source array.
            </exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The source array.</param>
            <param name="itemsToCpoy">The number of items to copy, starting at the given start index.</param>
            <param name="targetArray">The target array.</param>
            <returns>Returns the target array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Slice``1(``0[],System.Int32)">
            <summary>
                Copies the specified range of items from the source array to the given target array.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items to copy must be greater or equals to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The number of items to copy cannot be greater than the length of the
                source array.
            </exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The source array.</param>
            <param name="itemsToCpoy">The number of items to copy, starting at the given start index.</param>
            <returns>Returns the target array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.ToList``1(System.Array,System.Func{System.Object,``0})">
            <summary>
                Converts the given array to a list using the specified selector.
            </summary>
            <exception cref="T:System.ArgumentNullException">items can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <param name="items">The array containing the items.</param>
            <param name="selector">The selector.</param>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <returns>The items of the array as list.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Clear``1(``0[],System.Int32,System.Int32)">
            <summary>
                Sets a range of elements in the array to zero, to false, or to null, depending on the element type.
            </summary>
            <exception cref="T:System.ArgumentNullException">The array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
            <returns>Returns the cleared array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.ClearAll``1(``0[])">
            <summary>
                Clears the given array.
            </summary>
            <exception cref="T:System.ArgumentNullException">The array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array to clear.</param>
            <returns>Returns the cleared array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Resize``1(``0[],System.Int32)">
            <summary>
                Resizes the given array to the specified size.
            </summary>
            <exception cref="T:System.ArgumentNullException">The array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array to resize.</param>
            <param name="newSize">The new size of the array.</param>
            <returns>Returns the given array with the new size.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Reverse``1(``0[])">
            <summary>
                Reverses the sequence of the elements in the entire one-dimensional array.
            </summary>
            <exception cref="T:System.ArgumentNullException">The array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional array to reverse.</param>
            <returns>Returns the reversed array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.Reverse``1(``0[],System.Int32,System.Int32)">
            <summary>
                Reverses the sequence of the elements in a range of elements in the one-dimensional .
            </summary>
            <exception cref="T:System.ArgumentNullException">The array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional array to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <returns>Returns the reversed array.</returns>
        </member>
        <member name="M:Extend.ArrayEx.ToGenericList``2(``0[],System.Func{``0,``1})">
            <summary>
                Converts the given array to a list using the specified selector.
            </summary>
            <exception cref="T:System.ArgumentNullException">items can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <param name="items">The array containing the items.</param>
            <param name="selector">The selector.</param>
            <typeparam name="TArray">The type of the items in the array.</typeparam>
            <typeparam name="TResult">The type of the items in the list.</typeparam>
            <returns>The items of the array as list.</returns>
        </member>
        <member name="M:Extend.ArrayEx.IndexOf``1(``0[],``0)">
            <summary>
                Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <returns>
                The index of the first occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.IndexOf``1(``0[],``0,System.Int32)">
            <summary>
                Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its
                first occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>
                The index of the first occurrence of  within the range of elements in  that extends from  to the last element,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its
                first occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">Array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the first occurrence of  within the range of elements in  that starts at  and contains the
                number of elements specified in , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.LastIndexOf``1(``0[],``0)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the entire
                <see cref="T:System.Array" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <returns>
                The index of the last occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements in the
                <see cref="T:System.Array" /> that extends from the first element to the specified index.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that extends from the first element to ,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extend.ArrayEx.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements in the
                <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.
            </summary>
            <exception cref="T:System.ArgumentNullException">array can not be null.</exception>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that contains the number of elements
                specified in  and ends at , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="T:Extend.IDictionaryEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="M:Extend.IDictionaryEx.ConcatAllToDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
                Concatenates the given sequences.
            </summary>
            <exception cref="T:System.ArgumentNullException">dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">dictionaries can not be null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the dictionary.</exception>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <param name="dictionary">The first dictionary to concatenate.</param>
            <param name="dictionaries">The other dictionaries to concatenate.</param>
            <returns>
                Returns an <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains the concatenated elements of the given
                sequences.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ConcatToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Concatenates the given sequences.
            </summary>
            <exception cref="T:System.ArgumentNullException">first can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">second can not be null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the dictionary.</exception>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The second sequence to concatenate.</param>
            <returns>
                Returns an <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains the concatenated elements of the two input
                sequences.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ConcatAllToDictionarySafe``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
                Concatenates the given sequences in a safe manner.
            </summary>
            <remarks>
                Duplicated key are getting removed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">dictionaries can not be null.</exception>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <param name="dictionary">The first dictionary to concatenate.</param>
            <param name="dictionaries">The other dictionaries to concatenate.</param>
            <returns>
                Returns an <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains the concatenated elements of the given
                sequences.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ConcatToDictionarySafe``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Concatenates the given sequences in a safe manner.
            </summary>
            <remarks>
                Duplicated key are getting removed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">first can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">second can not be null.</exception>
            <typeparam name="TValue">The type of the values.</typeparam>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The second sequence to concatenate.</param>
            <returns>
                Returns an <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains the concatenated elements of the two input
                sequences.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.StringJoin``2(System.Collections.Generic.IDictionary{``0,``1},System.String,System.String)">
            <summary>
                Concatenates all the elements of a first  using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The first can not be null.</exception>
            <typeparam name="TValue">The type of the values in the first.</typeparam>
            <typeparam name="TKey">The type of the keys in the first.</typeparam>
            <param name="dictionary">A first that contains the elements to concatenate.</param>
            <param name="keyValueSeparator">The string to use as a separator between each key and value.</param>
            <param name="separator">
                The string to use as a separator.
                The separator is included in the returned string only if the given first has more than one item.
            </param>
            <returns>
                A string that consists of the elements in the first delimited by the separator string.
                If the given first is empty, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds the given key value pair to the dictionary, if it not already contains the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">the type of the value.</typeparam>
            <param name="dictionary">The dictionary to which the item should get added.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>True if the item was added to the dictionary, otherwise false.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
                Adds the given key value pair to the dictionary, if it not already contains the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">key can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">the type of the value.</typeparam>
            <param name="dictionary">The dictionary to which the item should get added.</param>
            <param name="keyValuePair">The KeyValuePair to add.</param>
            <returns>True if the item was added to the dictionary, otherwise false.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                Adds the key and value returned by the given factory to the dictionary, if it not already contains the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The factory can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">the type of the value.</typeparam>
            <param name="dictionary">The dictionary to which the item should get added.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The factory which creates the value for the key value pair.</param>
            <returns>True if the item was added to the dictionary, otherwise false.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds the key and value returned by the given factory to the dictionary, if it not already contains the key.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The factory can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">the type of the value.</typeparam>
            <param name="dictionary">The dictionary to which the item should get added.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The factory which creates the value for the key value pair.</param>
            <returns>True if the item was added to the dictionary, otherwise false.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds the given key value pair to the dictionary, if the key does not already exist,
                otherwise updates the value of the given key in the dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException">dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">key can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary to work on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="value">The value to be added or updated.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
                Adds the given key value pair to the dictionary, if the key does not already exist,
                otherwise updates the value of the given key in the dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException">dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">key can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary to work on.</param>
            <param name="keyValuePair">The KeyValuePair to be added or updated.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                Adds the given key and the value created by the value factory to the dictionary, if the key does not already exist,
                otherwise updates the value of the given key in the dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException">dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">key can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">valueFactory can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The Dictionary to work on.</param>
            <param name="key">The Key.</param>
            <param name="valueFactory">The factory which creates the value for the key value pair.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds the given key and the value created by the value factory to the dictionary, if the key does not already exist,
                otherwise updates the value of the given key in the dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The Dictionary to work on.</param>
            <param name="key">The Key.</param>
            <param name="valueFactory">The factory which creates the value for the key value pair.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                Checks if the dictionary contains all given keys.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The keys can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The Dictionary to act on.</param>
            <param name="keys">A list of keys.</param>
            <returns>Returns true if the dictionary contains all keys.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the dictionary contains all given keys.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The keys can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The Dictionary to act on.</param>
            <param name="keys">A list of keys.</param>
            <returns>Returns true if the dictionary contains all keys.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                Checks if the dictionary contains any of the given keys.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The keys can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="keys">A list of keys.</param>
            <returns>Returns true if the dictionary contains any of the given keys, otherwise false.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the dictionary contains any of the given keys.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The keys can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="keys">A list of keys.</param>
            <returns>Returns true if the dictionary contains any of the given keys, otherwise false.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds the given key value pair to the dictionary if the key does not already exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>
                Returns the value for the key.
                This will be either the existing value for the key if the key is already in the
                dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
                Adds the given key value pair to the dictionary if the key does not already exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="keyValuePair">The key value pair to add or get.</param>
            <returns>
                Returns the value for the key.
                This will be either the existing value for the key if the key is already in the
                dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                Adds the key value pair to the dictionary, by using the specified function, if the key does not already exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The factory can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">TThe function used to generate a value for the key.</param>
            <returns>
                Returns the value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value for the key as returned by value factory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds the key value pair to the dictionary, by using the specified function, if the key does not already exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The factory can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The key can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">TThe function used to generate a value for the key.</param>
            <returns>
                Returns the value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value for the key as returned by value factory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extend.IDictionaryEx.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Adds the values of the given dictionary to the dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The other dictionary can not be null.</exception>
            <param name="dictionary">The dictionary to add the items to.</param>
            <param name="otherDictionary">The dictionary containing the items to add.</param>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <returns>Returns the dictionary containing all the items..</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.GetAllKeys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Gets all keys of the given dictionary.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The Dictionary to act on.</param>
            <returns>Returns all keys of the given dictionary.</returns>
        </member>
        <member name="M:Extend.IDictionaryEx.GetAllKeysAsList``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Gets all keys of the given dictionary as list.
            </summary>
            <exception cref="T:System.ArgumentNullException">The dictionary can not be null.</exception>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The Dictionary to act on.</param>
            <returns>Returns all keys of the given dictionary as list.</returns>
        </member>
        <member name="T:Extend.IEnumerableTEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:Extend.IEnumerableTEx.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Appends the given item to the given sequence.
            </summary>
            <exception cref="T:System.ArgumentNullException">source can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="source">The sequence to append an item to.</param>
            <param name="item">The item to append.</param>
            <returns>The source sequence followed by the appended item.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Except``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Produces the set difference of two sequences by using the specified
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
            </summary>
            <exception cref="T:System.ArgumentNullException">first can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">second can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">keySelector can not be null.</exception>
            <typeparam name="TSource">The type of the items to compare.</typeparam>
            <typeparam name="TKey">The type of the item keys.</typeparam>
            <param name="first">
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also
                in <paramref name="second" /> will be returned.
            </param>
            <param name="second">
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur
                in the first sequence will cause those elements to be removed from the returned sequence.
            </param>
            <param name="keySelector">A function used to select the key of the items to compare.</param>
            <param name="comparer">
                An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare the
                keys of the items.
            </param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.GetEqualItemsFromStart``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Returns the equal items of two IEnumerables, according to the specified comparer.
                Beginning at the start of the IEnumerables, ending when first different item is found.
            </summary>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="left">The first IEnumerable.</param>
            <param name="right">The second IEnumerable.</param>
            <param name="comparer">The comparer used to test items for equality.</param>
            <returns>
                A sequence consisting of the first elements of <paramref name="left" /> that match the first elements of
                <paramref name="right" />.
                The resulting sequence ends when the two input sequence start to differ.
            </returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.GetRandomItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets a random item form the given IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the enumerable.</typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <returns>Returns an random item of the given IEnumerable.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Intersect``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Produces the set intersection of two sequences.
            </summary>
            <exception cref="T:System.ArgumentNullException">first can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">second can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">keySelector can not be null.</exception>
            <typeparam name="TSource">The type of the items to compare.</typeparam>
            <typeparam name="TKey">The type of the item keys.</typeparam>
            <param name="first">
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also
                appear in second will be returned.
            </param>
            <param name="second">
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also
                appear in the first sequence will be returned.
            </param>
            <param name="keySelector">A function used to select the key of the items to compare.</param>
            <param name="comparer">
                An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare the
                keys of the items.
            </param>
            <returns>Returns a sequence that contains the elements that form the set intersection of two sequences.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Partitions the given sequence into blocks with the specified size.
            </summary>
            <exception cref="T:System.ArgumentNullException">source can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">size is smaller than 1.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="source">The sequence to partition.</param>
            <param name="size">The number of items per block.</param>
            <returns>Returns the created blocks.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Prepends the given item to the given sequence.
            </summary>
            <exception cref="T:System.ArgumentNullException">source can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="source">The sequence to prepend an item to.</param>
            <param name="item">The item to prepend.</param>
            <returns>The source sequence preceded by the prepended item.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.WhereNot``1(System.Collections.Generic.IEnumerable{``0},Extend.ISpecification{``0})">
            <summary>
                Returns all items of the given enumerable which doesn't satisfy the given specification.
            </summary>
            <exception cref="T:System.ArgumentNullException">enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <typeparam name="T">The type of the item in the enumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="specification">The specification.</param>
            <returns>Returns the items which doesn't satisfy the given specification.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Where``1(System.Collections.Generic.IEnumerable{``0},Extend.ISpecification{``0})">
            <summary>
                Returns all items of the given enumerable which satisfy the given specification.
            </summary>
            <exception cref="T:System.ArgumentNullException">enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <typeparam name="T">The type of the item in the enumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="specification">The specification.</param>
            <returns>Returns the items which satisfy the given specification.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.SpecificationForItems``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
                Creates a specification with the given condition and message.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <typeparam name="T">The target type of the expression.</typeparam>
            <param name="enumerable">The enumerable to create the expression on.</param>
            <param name="expression">An expression determining whether an object matches the specification or not.</param>
            <param name="message">An error messaged, returned when an object doesn't match the specification.</param>
            <returns>Returns a specification with the given condition and message.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.EnsureNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Ensures that the given <see cref="T:System.Collections.Generic.IEnumerable`1" /> is not null.
            </summary>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <returns>Returns the given IEnumerable if it's not null, otherwise an empty array of type T.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Associates an index to each element of the source IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">source can not be null.</exception>
            <typeparam name="T">The type of the items in the given IEnumerable.</typeparam>
            <param name="source">The source IEnumerable.</param>
            <returns>A sequence of elements paired with their index in the sequence.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.WithoutIndex``1(System.Collections.Generic.IEnumerable{Extend.IIndexedItem{``0}})">
            <summary>
                Removes the indexes from a IEnumerable of indexed elements, returning only the elements themselves.
            </summary>
            <exception cref="T:System.ArgumentNullException">source can not be null.</exception>
            <typeparam name="T">The type of the items in the given IEnumerable.</typeparam>
            <param name="source">The IEnumerable to remove the indexes from.</param>
            <returns>A IEnumerable of elements without their associated indexes.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the enumerable is empty or null.
            </summary>
            <typeparam name="T">The type of the items in the enumerable.</typeparam>
            <param name="enumerable">The enumerable to check.</param>
            <returns>Returns true if the enumerable is empty or null, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                s
                Checks if the IEnumerable contains all given values.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable to act on.</param>
            <param name="values">The values to search for.</param>
            <returns>Returns true if the IEnumerable contains all given values, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                s
                Checks if the IEnumerable contains all values of the given IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable to act on.</param>
            <param name="values">The IEnumerable containing the values to search for.</param>
            <returns>Returns true if the IEnumerable contains all given values, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                Checks if the IEnumerable contains any of the given values.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable to act on.</param>
            <param name="values">The values to search for.</param>
            <returns>Returns true if the IEnumerable contains any of the given values, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the IEnumerable contains any of the values of the given IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable to act on.</param>
            <param name="values">The IEnumerable containing the values to search for.</param>
            <returns>
                Returns true if the IEnumerable contains any of the values of the given IEnumerable,
                otherwise false.
            </returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified action on each object in the given enumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The source collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The action can not be null.</exception>
            <typeparam name="T">The type of the items in the given enumerable.</typeparam>
            <param name="enumerable">The enumerable containing all the items.</param>
            <param name="action">The action to perform on each item of the given enumerable.</param>
        </member>
        <member name="M:Extend.IEnumerableTEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
                Performs the specified action on each object in the given enumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The source collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The action can not be null.</exception>
            <typeparam name="T">The type of the items in the given enumerable.</typeparam>
            <param name="enumerable">The enumerable containing all the items.</param>
            <param name="action">
                The action to perform on each item of the given enumerable.
                The action takes a item of the given enumerable and it's index as parameter.
            </param>
        </member>
        <member name="M:Extend.IEnumerableTEx.ForEachReverse``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Executes the given action for each item in the IEnumerable in a reversed order.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The action can not be null.</exception>
            <remarks>It's save to remove items from the IEnumerable within the loop.</remarks>
            <param name="enumerable">The IEnumerable to act on.</param>
            <param name="action">The action to execute for each item in the IEnumerable.</param>
        </member>
        <member name="M:Extend.IEnumerableTEx.NotAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the given IEnumerable contains no items, or not.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <param name="enumerable">The IEnumerable to check.</param>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <returns>Returns true if the IEnumerable doesn't contain any items, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.NotAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether the given IEnumerable contains no items matching the given predicate, or not.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <param name="enumerable">The IEnumerable to check.</param>
            <param name="predicate">The predicate.</param>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <returns>Returns true if the IEnumerable doesn't contain any items, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.AnyAndNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the given IEnumerable is not null and contains some items.
            </summary>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable to act on.</param>
            <returns>Returns true if the IEnumerable is not null or empty, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.AnyAndNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Checks if the given IEnumerable is not null and contains some items
                which mates the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true if the IEnumerable is not null or empty, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">An IEnumerable that contains the elements to concatenate.</param>
            <param name="separator">
                The string to use as a separator.
                The separator is included in the returned string only if the given IEnumerable has more than one item.
            </param>
            <returns>
                A string that consists of the elements in the IEnumerable delimited by the separator string.
                If the given IEnumerable is empty, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">An IEnumerable that contains the elements to concatenate.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="separator">
                The string to use as a separator.
                The separator is included in the returned string only if the given IEnumerable has more than one item.
            </param>
            <returns>
                A string that consists of the elements in the IEnumerable delimited by the separator string.
                If the given IEnumerable is empty, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
                Performs a where predicate on the IEnumerable, if the given condition is true,
                otherwise returns all items of the IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The source can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="source">The IEnumerable containing the items.</param>
            <param name="condition">The condition determining whether the where predicate gets applied or not.</param>
            <param name="predicate">The where predicate.</param>
            <returns>Returns the result of the predicate if the condition is true, otherwise the source IEnumerable.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
                Performs a where predicate on the IEnumerable, if the given condition is true,
                otherwise returns all items of the IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The source can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="source">The IEnumerable containing the items.</param>
            <param name="condition">The condition determining whether the where predicate gets applied or not.</param>
            <param name="predicate">The where predicate.</param>
            <returns>Returns the result of the predicate if the condition is true, otherwise the source IEnumerable.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
                Converts the IEnumerable containing the groupings into a Dictionary of those groupings.
            </summary>
            <exception cref="T:System.ArgumentNullException">The groupings can not be null.</exception>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the items.</typeparam>
            <param name="groupings">The enumeration of groupings from a GroupBy() clause.</param>
            <returns>
                Returns a dictionary of groupings such that the key of the dictionary is TKey type and the value is List of
                TValue type.
            </returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Randomize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Orders the items in the IEnumerable randomly.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <param name="enumerable">The IEnumerable.</param>
            <typeparam name="T">The type of the items in the enumerable.</typeparam>
        </member>
        <member name="M:Extend.IEnumerableTEx.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns all unique items, based on the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <param name="enumerable">The IEnumerable.</param>
            <param name="predicate">The Predicate.</param>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <typeparam name="TKey">The input type of the predicate.</typeparam>
        </member>
        <member name="M:Extend.IEnumerableTEx.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts the given IEnumerable to a ObservableCollection.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <param name="enumerable">The IEnumerable.</param>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <returns>The given IEnumerable as ObservableCollection.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Many``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Gets whether the IEnumerable contains more than one item matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true if the IEnumerable contains more than one item matching the given predicate, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.Many``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets whether the IEnumerable contains more than one item.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <returns>Returns true if the IEnumerable contains more than one item, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.MinimumOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
                Gets whether the IEnumerable contains at least the specified number of items matching the specified predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <param name="count">The minimum number of items.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                Returns true if the IEnumerable contains at least the specified number of items matching the specified
                predicate, otherwise false.
            </returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.MinimumOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Gets whether the IEnumerable contains at least the specified number of items.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <param name="count">The minimum number of items.</param>
            <returns>Returns true if the IEnumerable contains at least the specified number of items, otherwise false.</returns>
        </member>
        <member name="M:Extend.IEnumerableTEx.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Takes items from the given IEnumerable until the first item matches the specified predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <param name="enumerable">The IEnumerable.</param>
            <param name="predicate">The predicate.</param>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <returns>Returns the items from the start of the IEnumerable until the first item matching the predicate.</returns>
        </member>
        <member name="T:Extend.IEqualityComparerEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
        </member>
        <member name="M:Extend.IEqualityComparerEx.By``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Creates an equality comparer based on the specified comparison key and key comparer.
            </summary>
            <exception cref="T:System.ArgumentNullException">keySelector can not be null.</exception>
            <typeparam name="TSource">The type of the objects to test for equality.</typeparam>
            <typeparam name="TKey">The type of the key to compare.</typeparam>
            <param name="keySelector">A function that returns the comparison key.</param>
            <param name="comparer">An optional comparer, used to compare the keys.</param>
            <returns>Returns an equality comparer based on the specified comparison key and key comparer.</returns>
        </member>
        <member name="T:Extend.DateTimeEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="M:Extend.DateTimeEx.GetWeekOfYear(System.DateTime)">
            <summary>
                Gets the week-number of the given date-time value.
            </summary>
            <remarks>
                This implementation is ISO 8601 compatible see: https://en.wikipedia.org/wiki/ISO_8601.
                For .Net details see: http://stackoverflow.com/questions/11154673/get-the-correct-week-number-of-a-given-date
                This presumes that weeks start with Monday.
                Week 1 is the 1st week of the year with a Thursday in it.
            </remarks>
            <param name="dateTime">The date-time value.</param>
            <returns>Returns the number of the given week.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsLastDayOfMonth(System.DateTime)">
            <summary>
                Gets a value indicating whether the given date-time value is the last day of the month represented in
                <paramref name="dateTime" />.
            </summary>
            <param name="dateTime">The date-time value.</param>
            <returns>Returns a value of true if the given date-time value is the last day of the month.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsSameDay(System.DateTime,System.DateTime)">
            <summary>
                Gets whether the given date-time values are the same day.
            </summary>
            <param name="dateTime">The first date-time value.</param>
            <param name="otherDateTime">The second date-time value.</param>
            <returns>Returns true if the given date-time values are the same day, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsSameMonthAndYear(System.DateTime,System.DateTime)">
            <summary>
                Gets whether the given date-time values are the same month and year.
            </summary>
            <param name="dateTime">The first date-time value.</param>
            <param name="otherDateTime">The second date-time value.</param>
            <returns>Returns true if the given date-time values are the same month and year, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.NextWeekDay(System.DateTime)">
            <summary>
                Gets the next week day, based on the given day.
            </summary>
            <param name="day">The day.</param>
            <returns>Returns the next week day (can be <paramref name="day" /> if the given day is a week day).</returns>
        </member>
        <member name="M:Extend.DateTimeEx.NextMonthStart(System.DateTime)">
            <summary>
                Returns the first day of the next month, based on the given date-time value.
            </summary>
            <param name="dateTime">The date-time value.</param>
            <returns>Returns the first day of the next month, based on the given date-time value.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToFullDateTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a full date time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a full date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToFullDateTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a full date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a full date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToFullDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a full date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a full date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongDateShortTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a long date short time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a long date short time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongDateShortTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a long date short time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a long date short time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongDateShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a long date short time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a long date short time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongDateString(System.DateTime)">
            <summary>
                Converts the DateTime value to a long date time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a long date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongDateString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a long date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a long date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a long date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a long date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a long time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a long time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a long time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a long time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a long time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a long time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToMonthDayString(System.DateTime)">
            <summary>
                Converts the DateTime value to a month day string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a month day string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToMonthDayString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a month day string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a month day string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToMonthDayString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a month day string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a month day string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateLongTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a short date long time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a short date long time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateLongTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a short date long time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a short date long time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a short date long time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a short date long time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateString(System.DateTime)">
            <summary>
                Converts the DateTime value to a short date string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a short date string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a short date string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a short date string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a short date string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a short date string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a short date time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a short date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a short date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a short date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a short date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a short date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a short time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a short time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a short time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a short time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a short time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a short time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToSortableDateTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a sortable date time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a sortable date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToSortableDateTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a sortable date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a sortable date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a sortable date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a sortable date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToUniversalSortableDateTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a universal sortable date time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a universal sortable date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToUniversalSortableDateTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a universal sortable date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a universal sortable date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToUniversalSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a universal sortable date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a universal sortable date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToUniversalSortableLongDateTimeString(System.DateTime)">
            <summary>
                Converts the DateTime value to a universal sortable long date time string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a universal sortable long date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToUniversalSortableLongDateTimeString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a universal sortable long date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to a universal sortable long date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToUniversalSortableLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a universal sortable long date time string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a universal sortable long date time string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToMonthString(System.DateTime)">
            <summary>
                Converts the DateTime value to a month string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a year month string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToMonthString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to a month string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to year month string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToMonthString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a month string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a year month string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToYearMonthString(System.DateTime)">
            <summary>
                Converts the DateTime value to a year month string.
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns>The given value converted to a year month string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToYearMonthString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
                Converts the DateTime value to year month string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format info can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="formatInfo">The date time format info.</param>
            <returns>The given value converted to year month string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.ToYearMonthString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                Converts the DateTime value to a year month string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The culture can not be null.</exception>
            <param name="dateTime">The DateTime value to convert.</param>
            <param name="culture">The culture.</param>
            <returns>The given value converted to a year month string.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.Age(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
                Calculates the difference between the year of the current and the given date time.
            </summary>
            <remarks>
                <paramref name="now" /> can be smaller than <paramref name="dateTime" />, which results in negative results.
                Source from: http://stackoverflow.com/questions/9/how-do-i-calculate-someones-age-in-c
            </remarks>
            <param name="dateTime">The date time value.</param>
            <param name="now">The 'current' date used to calculate the age, or null to use <see cref="P:System.DateTime.Now" />.</param>
            <returns>The difference between the year of the current and the given date time.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.Elapsed(System.DateTime)">
            <summary>
                Calculates the elapsed time between the given date time value and DateTime.Now.
            </summary>
            <param name="dateTime">The date time value.</param>
            <returns>Returns the elapsed time between the given date time value and DateTime.Now.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.EndOfDay(System.DateTime)">
            <summary>
                Returns the last moment of the day ("23:59:59:999") represented by the given date time value.
            </summary>
            <param name="day">The day to get the end of.</param>
            <returns>Returns the last moment of the day ("23:59:59:999") represented by the given date time value.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.EndOfMonth(System.DateTime)">
            <summary>
                Returns the last moment ("23:59:59:999") of the month represented by the given date time value.
            </summary>
            <param name="month">The @this to act on.</param>
            <returns>Returns the last moment ("23:59:59:999") of the month represented by the given date time value.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.EndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                Returns the last day of the current week.
                Note: This method uses the given day as last day of the week.
                Default is Sunday.
            </summary>
            <param name="week">The week to return the end of.</param>
            <param name="lastDayOfWeek">The last day of the week. Default is Sunday.</param>
            <returns>Returns the last day of the current week.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.EndOfYear(System.DateTime)">
            <summary>
                Returns the last moment ("23:59:59:999") of the year represented by the given date time.
            </summary>
            <param name="year">The year to return the end of.</param>
            <returns>Returns the last moment ("23:59:59:999") of the year represented by the given date time.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.FirstDayOfWeek(System.DateTime)">
            <summary>
                Returns the first day of the week, represented by the given date time.
            </summary>
            <param name="week">The week to return the first day of.</param>
            <returns>Returns the first day of the week, represented by the given date time.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsAfternoon(System.DateTime)">
            <summary>
                Checks whether the given date time value is at afternoon or not.
            </summary>
            <param name="dateTime">The date time to check.</param>
            <returns>Returns true if the date time value is at afternoon, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsFuture(System.DateTime)">
            <summary>
                Checks if the date time value is in the future.
            </summary>
            <param name="dateTime">The @date time to check.</param>
            <returns>Returns true if the value is in the future, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsMorning(System.DateTime)">
            <summary>
                Checks is the date time value is morning.
            </summary>
            <param name="dateTime">The date time to check.</param>
            <returns>Returns true if the date time is morning, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsPast(System.DateTime)">
            <summary>
                Checks if the date time value is in the past.
            </summary>
            <param name="dateTime">The date time to check.</param>
            <returns>Returns true if the value is in the past, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsToday(System.DateTime)">
            <summary>
                Checks if the given date time is today.
            </summary>
            <param name="dateTime">The date time to check.</param>
            <returns>Returns true if the date time value is today, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsWeekendDay(System.DateTime)">
            <summary>
                Checks if the given day is a weekend day (Saturday or Sunday).
            </summary>
            <param name="day">The day to check.</param>
            <returns>Returns true if the day is a weekend day, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.LastDayOfWeek(System.DateTime)">
            <summary>
                Returns the last day of the given week.
            </summary>
            <param name="week">The week to get the last day of.</param>
            <returns>Returns the last day of the given week.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.StartOfDay(System.DateTime)">
            <summary>
                Returns the start of the given day ("00:00:00:000").
            </summary>
            <param name="day">The day to get the start of.</param>
            <returns>Returns the start of the given day ("00:00:00:000").</returns>
        </member>
        <member name="M:Extend.DateTimeEx.StartOfMonth(System.DateTime)">
            <summary>
                Returns the start of the given month (with time set to "00:00:00:000").
            </summary>
            <param name="month">The month to get the start of.</param>
            <returns>Returns the start of the given month (with time set to "00:00:00:000").</returns>
        </member>
        <member name="M:Extend.DateTimeEx.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                Returns the first day of the current week.
                Note: This method uses the given day as first day of the week.
                Default is Monday.
            </summary>
            <param name="week">The week to return the start of.</param>
            <param name="firstDayOfWeek">The first day of the week. Default is Monday.</param>
            <returns>Returns the first day of the current week.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.StartOfYear(System.DateTime)">
            <summary>
                Returns the start of the given year with time set to "00:00:00:000".
            </summary>
            <param name="year">The year to get the start of.</param>
            <returns>Returns the start of the given year with time set to "00:00:00:000".</returns>
        </member>
        <member name="M:Extend.DateTimeEx.Tomorrow(System.DateTime)">
            <summary>
                Adds a day to the given date time value.
            </summary>
            <param name="dateTime">The date time to increase.</param>
            <returns>Tomorrow date at same time.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.Yesterday(System.DateTime)">
            <summary>
                Subtracts a day to the given date dateTime value.
            </summary>
            <param name="dateTime">The date dateTime to decrease.</param>
            <returns>Yesterday date at same dateTime.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.Intersects(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                Checks if the two date ranges intersects.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="intersectingStartDate">The intersecting start date.</param>
            <param name="intersectingEndDate">The intersecting end date.</param>
            <returns>Returns true if the two date ranges intersects, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsTimeEquals(System.DateTime,System.DateTime)">
            <summary>
                Checks if the time is equals to the given time.
            </summary>
            <param name="time">The time to check.</param>
            <param name="timeToCompare">The time to compare.</param>
            <returns>Returns true if the time is equals, otherwise false.</returns>
        </member>
        <member name="M:Extend.DateTimeEx.IsWeekdDay(System.DateTime)">
            <summary>
                Checks if the given day is a week day (MOnday - Friday).
            </summary>
            <param name="day">The day to check.</param>
            <returns>Returns true if the day is a week day, otherwise false.</returns>
        </member>
        <member name="T:Extend.EnumEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Enum" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Enum" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Enum" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Enum" />.
            </summary>
        </member>
        <member name="M:Extend.EnumEx.GetValuesExpect``1(``0[])">
            <summary>
                Gets all values of the specified enumeration type, expect the specified values.
            </summary>
            <exception cref="T:System.ArgumentException">T must be an enumerated type.</exception>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="exceptions">The values to exclude from the result.</param>
            <returns>Returns all values of the specified enumeration type, expect the specified values.</returns>
        </member>
        <member name="M:Extend.EnumEx.GetValuesExpect(System.Type,System.Object[])">
            <summary>
                Gets all values of the specified enumeration type, expect the specified values.
            </summary>
            <remarks>
                How to cast returned values:
                values.Cast{Object}();
                values.Select( x => Convert.ChangeType( x, type ) );
            </remarks>
            <exception cref="T:System.ArgumentException">T must be an enumerated type.</exception>
            <param name="type">The type of the enumeration.</param>
            <param name="exceptions">The values to exclude from the result.</param>
            <returns>Returns all values of the specified enumeration type, expect the specified values.</returns>
        </member>
        <member name="M:Extend.EnumEx.GetValueAndStringValue``1">
            <summary>
                Gets a dictionary containing the string value for each value of the enumeration of the given type.
            </summary>
            <exception cref="T:System.ArgumentException">T must be an enumerated type.</exception>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>Returns a key value pair for each value of the specified enumeration type.</returns>
        </member>
        <member name="M:Extend.EnumEx.GetStringValues``1">
            <summary>
                Gets the values of the specified enumeration as strings.
            </summary>
            <exception cref="T:System.ArgumentException">T must be an enumerated type.</exception>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>All values of the specified enumeration as strings.</returns>
        </member>
        <member name="M:Extend.EnumEx.GetValues``1">
            <summary>
                Gets the values of the specified enumeration.
            </summary>
            <exception cref="T:System.ArgumentException">T must be an enumerated type.</exception>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>All values of the specified enumeration.</returns>
        </member>
        <member name="M:Extend.EnumEx.GetValues(System.Type)">
            <summary>
                Gets the values of the specified enumeration.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <remarks>
                How to cast returned values:
                values.Cast{Object}();
                values.Select( x => Convert.ChangeType( x, type ) );
            </remarks>
            <exception cref="T:System.ArgumentException">T must be an enumerated type.</exception>
            <param name="type">The type of the enumeration.</param>
            <returns>All values of the specified enumeration.</returns>
        </member>
        <member name="T:Extend.ExpressionTDelegateEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
        </member>
        <member name="M:Extend.ExpressionTDelegateEx.GetMemberInfoFromExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the member info of from the given member expression.
            </summary>
            <remarks>
                Contains logic to work with unary expressions:
                E.g. to work with expressions containing a Convert node.
            </remarks>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <typeparam name="TDeclairingType">The type of the declaring type.</typeparam>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>Returns the member info from the given expression, or null if the expression is not valid.</returns>
        </member>
        <member name="M:Extend.ExpressionTDelegateEx.GetMemberPath``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets a dotted path of property names representing the property expression. E.g. Parent.Child.Sibling.Name.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <param name="expression">The expression pointing to the member.</param>
        </member>
        <member name="T:Extend.ExpressionEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        </member>
        <member name="M:Extend.ExpressionEx.TryGetMemberExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.MemberExpression@)">
            <summary>
                Tries to get a <see cref="T:System.Linq.Expressions.MemberExpression" /> from the given expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <param name="expression">The expression.</param>
            <param name="memberExpression">The extracted <see cref="T:System.Linq.Expressions.MemberExpression" />.</param>
            <returns>Returns true if a <see cref="T:System.Linq.Expressions.MemberExpression" /> could be extracted; otherwise, false.</returns>
        </member>
        <member name="T:Extend.ObjectEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="M:Extend.ObjectEx.SatisfiesWithMessages``1(``0,Extend.ISpecification{``0})">
            <summary>
                Checks if the objects satisfies the given specification.
            </summary>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="specification">The specification to use.</param>
            <returns></returns>
        </member>
        <member name="M:Extend.ObjectEx.Specification``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
                Creates a specification with the given condition and message.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <typeparam name="T">The target type of the expression.</typeparam>
            <param name="obj">The object used to create the expression. (Can be null)</param>
            <param name="expression">An expression determining whether an object matches the specification or not.</param>
            <param name="message">An error messaged, returned when an object doesn't match the specification.</param>
            <returns>Returns a specification with the given condition and message.</returns>
        </member>
        <member name="M:Extend.ObjectEx.GetNameChain``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the name, including a full name chain, of the member to which the given expression points.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <exception cref="T:System.NotSupportedException">
                The given expression is of a not supported type (supported are:
                <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />).
            </exception>
            <typeparam name="TObject">The type of the member to which the expression points.</typeparam>
            <param name="obj">The object to call the method on.</param>
            <typeparam name="TMember">The type of the member to which the expression points.</typeparam>
            <param name="expression">An expression pointing to the member to get the name of.</param>
            <returns>Returns the name, including a full name chain, of the member to which the given expression points.</returns>
        </member>
        <member name="M:Extend.ObjectEx.GetNameChain``2(``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
                Gets the name, including a full name chain, of the member to which the given expression points.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <exception cref="T:System.NotSupportedException">
                The given expression is of a not supported type (supported are:
                <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />).
            </exception>
            <typeparam name="TObject">The type of the member to which the expression points.</typeparam>
            <param name="obj">The object to call the method on.</param>
            <typeparam name="TMember">The type of the member to which the expression points.</typeparam>
            <param name="expression">An expression pointing to the member to get the name of.</param>
            <returns>Returns the name, including a full name chain, of the member to which the given expression points.</returns>
        </member>
        <member name="M:Extend.ObjectEx.GetNameChain(System.Linq.Expressions.Expression)">
            <summary>
                Gets the name, including a full name chain, of the member to which the given expression points.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <exception cref="T:System.NotSupportedException">
                The given expression is of a not supported type (supported are:
                <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />).
            </exception>
            <param name="expression">The expression pointing to the member.</param>
            <returns>Returns the name, including a full name chain, of the member to which the given expression points.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Swap``1(System.Object,``0@,``0@)">
            <summary>
                Swaps the given values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="obj">An object to cal the extension method on, can be null.</param>
            <param name="value0">The first value.</param>
            <param name="value1">The second value.</param>
        </member>
        <member name="M:Extend.ObjectEx.ToSingleItemArray``1(``0)">
            <summary>
                Creates a array with the given value as only item.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="value">The value to add to the new created array.</param>
            <returns>Returns the new created array.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Maximum``1(``0,``0[])">
            <summary>
                Returns the maximum value.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="TSource">The type of the values.</typeparam>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Maximum``2(``0,System.Func{``0,``1},``0[])">
            <summary>
                Returns the maximum value.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the values.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <param name="selector"> A transform function to apply to each element.</param>
            <returns>Returns the maximum value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Minimum``1(``0,``0[])">
            <summary>
                Returns the minimum value.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="TSource">The type of the values.</typeparam>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Minimum``2(``0,System.Func{``0,``1},``0[])">
            <summary>
                Returns the minimum value.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the values.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <param name="selector"> A transform function to apply to each element.</param>
            <returns>Returns the minimum value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Satisfies``1(``0,Extend.ISpecification{``0})">
            <summary>
                Checks if the objects satisfies the given specification.
            </summary>
            <exception cref="T:System.ArgumentNullException">specification can not be null.</exception>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="specification">The specification to use.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IfNull``1(``0,``0)">
            <summary>
                Returns the given value if it is not null, otherwise returns the alternative value.
            </summary>
            <param name="value">The value.</param>
            <param name="alternativeValue">The alternative value.</param>
            <typeparam name="T">The type of the values.</typeparam>
            <returns>Returns the value or the alternative value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ThrowIfNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
                Throws a <see cref="T:System.ArgumentNullException" /> exception if <paramref name="obj" /> is null.
            </summary>
            <remarks>
                If <paramref name="errorMessage" /> is null, this method will use the following default message:
                "{object name} can not be null."
            </remarks>
            <typeparam name="TObject">The type <paramref name="obj" />.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="expression">An expression pointing to <paramref name="obj" />.</param>
            <param name="errorMessage">
                The text used as exception message if <paramref name="obj" /> is null.
            </param>
        </member>
        <member name="M:Extend.ObjectEx.ThrowIfNull``1(``0,System.String,System.String)">
            <summary>
                Throws a <see cref="T:System.ArgumentNullException" /> exception if <paramref name="obj" /> is null.
            </summary>
            <remarks>
                If <paramref name="errorMessage" /> is null, this method will use the following default message:
                "{object name} can not be null."
            </remarks>
            <typeparam name="TObject">The type <paramref name="obj" />.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="parameterName">The name of <paramref name="obj" />.</param>
            <param name="errorMessage">
                The text used as exception message if <paramref name="obj" /> is null.
            </param>
        </member>
        <member name="M:Extend.ObjectEx.GetName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the name of the member to which the given expression points.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <exception cref="T:System.NotSupportedException">
                The given expression is of a not supported type (supported are:
                <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />).
            </exception>
            <typeparam name="TObject">The type of the source object.</typeparam>
            <typeparam name="TMember">The type of the member to which the expression points.</typeparam>
            <param name="obj">The source object.</param>
            <param name="expression">An expression pointing to the member to get the name of.</param>
            <returns>Returns the name of the member to which the given expression points.</returns>
        </member>
        <member name="M:Extend.ObjectEx.GetName``2(``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
                Gets the name of the member to which the given expression points.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <exception cref="T:System.NotSupportedException">
                The given expression is of a not supported type (supported are:
                <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />).
            </exception>
            <typeparam name="TObject">The type of the member to which the expression points.</typeparam>
            <typeparam name="TMember">The type of the member to which the expression points.</typeparam>
            <param name="obj">The object to call the method on.</param>
            <param name="expression">An expression pointing to the member to get the name of.</param>
            <returns>Returns the name of the member to which the given expression points.</returns>
        </member>
        <member name="M:Extend.ObjectEx.GetName(System.Linq.Expressions.Expression)">
            <summary>
                Gets the name of the member to which the given expression points.
            </summary>
            <param name="expression">The expression pointing to the member.</param>
            <exception cref="T:System.NotSupportedException">
                expression is not supported (expression is <see cref="T:System.Linq.Expressions.ConstantExpression" /> or
                <see cref="T:System.Linq.Expressions.LambdaExpression" /> with an invalid body).
            </exception>
            <returns>Returns the name of the member to which the given expression points.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsNull(System.Object)">
            <summary>
                Gets whether the given <see cref="T:System.Object" /> is null or not.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to check.</param>
            <returns>A value of true if the <see cref="T:System.Object" /> is null, otherwise false.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsNotNull(System.Object)">
            <summary>
                Gets whether the given <see cref="T:System.Object" /> is NOT null or not.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to check.</param>
            <returns>A value of true if the <see cref="T:System.Object" /> is NOT null, otherwise false.</returns>
        </member>
        <member name="M:Extend.ObjectEx.As``1(System.Object)">
            <summary>
                Cast the given object to the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="obj">The object to cast.</param>
            <returns>The object as the specified type.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Chain``1(``0,System.Action{``0})">
            <summary>
                Executes the action specified, which the given object as parameter.
            </summary>
            <remarks>
                Use this method to chain method calls on the same object.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The action can not be null.</exception>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to act on.</param>
            <param name="action">The action.</param>
            <returns>Returns the given object.</returns>
        </member>
        <member name="M:Extend.ObjectEx.RefEquals(System.Object,System.Object)">
            <summary>
                Determines whether the specified objects instances are the same instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">The first object can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The second object can not be null.</exception>
            <param name="obj0">The first object to compare.</param>
            <param name="obj1">The second object  to compare.</param>
            <returns>Returns true if the objects are the same instance.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Coalesce``1(``0,``0[])">
            <summary>
                Return the first not null value (including <paramref name="value" />).
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <exception cref="T:System.InvalidOperationException">The array only contains null value.</exception>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The first value..</param>
            <param name="values">A list of values.</param>
            <returns>Returns the first not null value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.Coalesce``1(``0,``0)">
            <summary>
                Return the first not null value (including <paramref name="value" />).
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The first value.</param>
            <param name="value0">The second value.</param>
            <returns>Returns the first not null value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.CoalesceOrDefault``1(``0,``0,``0[])">
            <summary>
                Return the first not null value (including <paramref name="value" />).
                If all values are null, returns a default value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">defaultValue can not be null.</exception>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The first value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="values">A list of values.</param>
            <returns>Returns the first not null value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.CoalesceOrDefault``1(``0,System.Func{``0},``0[])">
            <summary>
                Return the first not null value (including <paramref name="value" />).
                If all values are null, returns a default value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">defaultValueFactory can not be null.</exception>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="value">The first value.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="values">A list of values.</param>
            <returns>Returns the first not null value.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ExecuteSafe``1(``0,System.Action{``0})">
            <summary>
                Executes the given action with the value as parameter and handles any exceptions during the execution.
            </summary>
            <exception cref="T:System.ArgumentNullException">The action can not be null.</exception>
            <param name="value">The value.</param>
            <param name="action">The action.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>Returns the given value as result or an exception if one is occurred.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ExecuteSafe``2(``0,System.Func{``0,``1})">
            <summary>
                Executes the given function with the value as parameter and handles any exceptions during the execution.
            </summary>
            <exception cref="T:System.ArgumentNullException">The func can not be null.</exception>
            <param name="value">The value.</param>
            <param name="func">The function.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>Returns the result of the function or an exception if one is occurred.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToBoolean(System.Object)">
            <summary>
                Converts the value of a specified object to an equivalent Boolean value.
            </summary>
            <exception cref="T:System.FormatException">
                value is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or
                <see cref="F:System.Boolean.FalseString" />.
            </exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the IConvertible interface.
                The conversion of value to a <see cref="T:System.Boolean" /> is not supported.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null..</param>
            <returns>
                true or false, which reflects the value returned by invoking the
                System.IConvertible.ToBoolean(System.IFormatProvider) method for the underlying type of value.
                If value is null, the method returns false.
            </returns>
        </member>
        <member name="M:Extend.ObjectEx.ToBoolean(System.Object,System.IFormatProvider)">
            <summary>
                Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific
                formatting information.
            </summary>
            <exception cref="T:System.FormatException">
                value is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or
                <see cref="F:System.Boolean.FalseString" />.
            </exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the IConvertible interface.
                The conversion of value to a <see cref="T:System.Boolean" /> is not supported.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
                true or false, which reflects the value returned by invoking the
                System.IConvertible.ToBoolean(System.IFormatProvider) method for the underlying type of value.
                If value is null, the method returns false.
            </returns>
        </member>
        <member name="M:Extend.ObjectEx.ToByte(System.Object)">
            <summary>
                Converts the value of the specified object to an 8-bit unsigned integer.
            </summary>
            <exception cref="T:System.FormatException">value is not in the property format for a <see cref="T:System.Byte" /> value.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement System.IConvertible. -or-Conversion from value to the
                <see cref="T:System.Byte" /> type is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Byte.MinValue" /> or
                greater than <see cref="F:System.Byte.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface.</param>
            <returns>An 8-bit unsigned integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToByte(System.Object,System.IFormatProvider)">
            <summary>
                Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific
                formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not in the property format for a <see cref="T:System.Byte" /> value.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement System.IConvertible. -or-Conversion from value to the
                <see cref="T:System.Byte" /> type is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Byte.MinValue" /> or
                greater than <see cref="F:System.Byte.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>An 8-bit unsigned integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToChar(System.Object)">
            <summary>
                Converts the value of the specified object to a Unicode character.
            </summary>
            <exception cref="T:System.ArgumentNullException">value is a null <see cref="T:System.String" />.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion of value to a <see cref="T:System.Char" /> is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface.</param>
            <returns>
                A Unicode character that is equivalent to value, or <see cref="F:System.Char.MinValue" /> if value is null.
            </returns>
        </member>
        <member name="M:Extend.ObjectEx.ToChar(System.Object,System.IFormatProvider)">
            <summary>
                Converts the value of the specified object to its equivalent Unicode character, using the specified
                culture-specific formatting information.
            </summary>
            <exception cref="T:System.ArgumentNullException">value is a null <see cref="T:System.String" />.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion of value to a <see cref="T:System.Char" /> is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface.</param>
            <param name="provider">A format provider.</param>
            <returns>
                A Unicode character that is equivalent to value, or <see cref="F:System.Char.MinValue" /> if value is null.
            </returns>
        </member>
        <member name="M:Extend.ObjectEx.ToDateTime(System.Object)">
            <summary>
                Converts the value of the specified object to a System.DateTime object.
            </summary>
            <exception cref="T:System.FormatException">value is not a valid date and time value.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <returns>
                The date and time equivalent of the value of value, or a date and time equivalent of
                <see cref="F:System.DateTime.MinValue" />
                if value is null.
            </returns>
        </member>
        <member name="M:Extend.ObjectEx.ToDateTime(System.Object,System.IFormatProvider)">
            <summary>
                Converts the value of the specified object to a System.DateTime object, using the specified culture-specific
                formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not a valid date and time value.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
                The date and time equivalent of the value of value, or a date and time equivalent of
                <see cref="F:System.DateTime.MinValue" />
                if value is null.
            </returns>
        </member>
        <member name="M:Extend.ObjectEx.ToDecimal(System.Object)">
            <summary>
                Converts the value of the specified object to an equivalent decimal number.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface. -or-The conversion
                is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than
                <see cref="F:System.Decimal.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <returns>A decimal number that is equivalent to value, or 0 (zero) if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToDecimal(System.Object,System.IFormatProvider)">
            <summary>
                Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific
                formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface. -or-The conversion
                is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than
                <see cref="F:System.Decimal.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A decimal number that is equivalent to value, or 0 (zero) if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToDouble(System.Object)">
            <summary>
                Converts the value of the specified object to a double-precision floating-point number.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than
                <see cref="F:System.Double.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <returns>A double-precision floating-point number that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToDouble(System.Object,System.IFormatProvider)">
            <summary>
                Converts the value of the specified object to an double-precision floating-point number, using the specified
                culture-specific formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than
                <see cref="F:System.Double.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A double-precision floating-point number that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToInt32(System.Object)">
            <summary>
                Converts the value of the specified object to a 32-bit signed integer.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for an <see cref="T:System.Int32" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than
                <see cref="F:System.Int32.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <returns>A 32-bit signed integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToInt32(System.Object,System.IFormatProvider)">
            <summary>
                Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the
                specified culture-specific formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for an <see cref="T:System.Int32" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than
                <see cref="F:System.Int32.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A 32-bit signed integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToInt16(System.Object)">
            <summary>
                Converts the value of the specified object to a 16-bit signed integer.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for an <see cref="T:System.Int16" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than
                <see cref="F:System.Int16.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <returns>A 16-bit signed integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToInt16(System.Object,System.IFormatProvider)">
            <summary>
                Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the
                specified culture-specific formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for an <see cref="T:System.Int16" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than
                <see cref="F:System.Int16.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A 16-bit signed integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToInt64(System.Object)">
            <summary>
                Converts the value of the specified object to a 64-bit signed integer.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for an <see cref="T:System.Int64" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than
                <see cref="F:System.Int64.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <returns>A 64-bit signed integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.ToInt64(System.Object,System.IFormatProvider)">
            <summary>
                Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the
                specified culture-specific formatting information.
            </summary>
            <exception cref="T:System.FormatException">value is not in an appropriate format for an <see cref="T:System.Int64" /> type.</exception>
            <exception cref="T:System.InvalidCastException">
                value does not implement the System.IConvertible interface.
                Or the conversion is not supported.
            </exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than
                <see cref="F:System.Int64.MaxValue" />.
            </exception>
            <param name="obj">An object that implements the System.IConvertible interface, or null.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A 64-bit signed integer that is equivalent to value, or zero if value is null.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsIn``1(``0,``0[])">
            <summary>
                Checks if the value is present in the given array.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="value">The value to search for.</param>
            <param name="values">A IEnumerable containing the values.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>>Returns true if the value is present in the array.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the value is present in the given IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="value">The value to search for.</param>
            <param name="values">A IEnumerable containing the values.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>>Returns true if the value is present in the IEnumerable.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsNotIn``1(``0,``0[])">
            <summary>
                Checks if the value is not present in the given array.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The value to search for.</param>
            <param name="values">A IEnumerable containing the values.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>>Returns true if the value is not present in the array.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the value is not present in the given IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The value to search for.</param>
            <param name="values">A IEnumerable containing the values.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>>Returns true if the value is not present in the IEnumerable.</returns>
        </member>
        <member name="M:Extend.ObjectEx.IsDefault``1(``0)">
            <summary>
                Checks if the given value is the default value of it's type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to check.</param>
            <returns>Returns true if the value is the default value of it's type.</returns>
        </member>
        <member name="T:Extend.BooleanEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Boolean" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Boolean" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="M:Extend.BooleanEx.IfFalse(System.Boolean,System.Action,System.Action)">
            <summary>
                Executes the specified action if the given Boolean is false,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <param name="value">The Boolean to check.</param>
            <param name="action">The action to execute if the given value is false.</param>
            <param name="alternativeAction">The action to execute if the given value is true.></param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfFalse``1(System.Boolean,``0,System.Action{``0},System.Action{``0})">
            <summary>
                Executes the specified action if the given Boolean is false,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is false.</param>
            <param name="alternativeAction">The action to execute if the given value is true.></param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfFalse``2(System.Boolean,``0,``1,System.Action{``0,``1},System.Action{``0,``1})">
            <summary>
                Executes the specified action if the given Boolean is false,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is false.</param>
            <param name="alternativeAction">The action to execute if the given value is true.></param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfFalse``3(System.Boolean,``0,``1,``2,System.Action{``0,``1,``2},System.Action{``0,``1,``2})">
            <summary>
                Executes the specified action if the given Boolean is false,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is false.</param>
            <param name="alternativeAction">The action to execute if the given value is true.></param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfFalse``4(System.Boolean,``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3})">
            <summary>
                Executes the specified action if the given Boolean is false,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is false.</param>
            <param name="alternativeAction">The action to execute if the given value is true.></param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfTrue(System.Boolean,System.Action,System.Action)">
            <summary>
                Executes the specified action if the given Boolean is true,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <param name="value">The Boolean to check.</param>
            <param name="action">The action to execute if the given value is true.</param>
            <param name="alternativeAction">The action to execute if the given value is false.</param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfTrue``1(System.Boolean,``0,System.Action{``0},System.Action{``0})">
            <summary>
                Executes the specified action if the given Boolean is true,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter">The parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is true.</param>
            <param name="alternativeAction">The action to execute if the given value is false.</param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfTrue``2(System.Boolean,``0,``1,System.Action{``0,``1},System.Action{``0,``1})">
            <summary>
                Executes the specified action if the given Boolean is true,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is true.</param>
            <param name="alternativeAction">The action to execute if the given value is false.</param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfTrue``3(System.Boolean,``0,``1,``2,System.Action{``0,``1,``2},System.Action{``0,``1,``2})">
            <summary>
                Executes the specified action if the given Boolean is true,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is true.</param>
            <param name="alternativeAction">The action to execute if the given value is false.</param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.IfTrue``4(System.Boolean,``0,``1,``2,``3,System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3})">
            <summary>
                Executes the specified action if the given Boolean is true,
                otherwise it executes the specified alternative action, if one is specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">action can not be null.</exception>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="value">The Boolean to check.</param>
            <param name="parameter1">The first parameter to pass to the action with gets executed.</param>
            <param name="parameter2">The second parameter to pass to the action with gets executed.</param>
            <param name="parameter3">The third parameter to pass to the action with gets executed.</param>
            <param name="parameter4">The fourth parameter to pass to the action with gets executed.</param>
            <param name="action">The action to execute if the given value is true.</param>
            <param name="alternativeAction">The action to execute if the given value is false.</param>
            <returns>Returns the given boolean value.</returns>
        </member>
        <member name="M:Extend.BooleanEx.SelectValue``1(System.Boolean,``0,``0)">
            <summary>
                Returns the true or false value based on the given Boolean value.
            </summary>
            <param name="value">The Boolean to check</param>
            <param name="trueValue">The true value to be returned if the given value is true.</param>
            <param name="falseValue">The false value to be returned if the given value is false.</param>
            <returns>The true value if the given Boolean is true, otherwise the false value.</returns>
        </member>
        <member name="T:Extend.CharEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Char" />.
            </summary>
        </member>
        <member name="M:Extend.CharEx.IsDigit(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is a decimal digit, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.IsLetter(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a Unicode letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is a letter, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.IsLetterOrDigit(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is a letter or a decimal digit, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.IsLower(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a lowercase letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is a lowercase letter, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.IsNumber(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a number.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is a number, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.IsUpper(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as an uppercase letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is an uppercase letter, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.IsWhiteSpace(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>True if the given char is a white space, otherwise false.</returns>
        </member>
        <member name="M:Extend.CharEx.ToLower(System.Char)">
            <summary>
                Converts the value of a Unicode character to its lowercase equivalent.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if
                <paramref name="c" /> is already lowercase or not alphabetic.
            </returns>
        </member>
        <member name="M:Extend.CharEx.ToUpper(System.Char)">
            <summary>
                Converts the value of a Unicode character to its uppercase equivalent.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if
                <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.
            </returns>
        </member>
        <member name="M:Extend.CharEx.Repeat(System.Char,System.Int32)">
            <summary>
                Repeats the given Char the specified number of times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">repeatCount is less than zero.</exception>
            <param name="c">The Char to repeat.</param>
            <param name="repeatCount">Number of repeats.</param>
            <returns>The repeated Char as String.</returns>
        </member>
        <member name="T:Extend.CollectionTEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Extend.CollectionTEx.AddIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                Adds the specified value to the given value it satisfies the predicated provided.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the given collection..</typeparam>
            <param name="collection">The collection to which the item should get added.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value to add.</param>
            <returns>True if the value was added to the collection, otherwise false.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Adds the given value to the collection if the collection doesn't contains it already.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the item should get added.</param>
            <param name="value">The value. to add</param>
            <returns>True if the value was added to the collection, otherwise false.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                Adds the given range of values to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the values should get added.</param>
            <param name="values">The values to add.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds the items of the given IEnumerable to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the values should get added.</param>
            <param name="enumerable">The IEnumerable containing the items.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
                Adds all given values who satisfies the predicate to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the values should get added.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">The values to add.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds all items of the given IEnumerable who satisfies the predicate to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the values should get added.</param>
            <param name="predicate">The predicate.</param>
            <param name="enumerable">The IEnumerable containing the items.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                Adds the given values to the collection, if it not already contains it.
            </summary>
            <exception cref="T:System.ArgumentNullException">collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the values should get added.</param>
            <param name="values">The values to add.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds all items of the given IEnumerable to the collection, if it not already contains it.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to which the values should get added.</param>
            <param name="enumerable">The IEnumerable containing the items.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.RemoveIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                Removes the given value from the collection, if it matches the predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="value">The value to remove.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.RemoveRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                Removes the given values from the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection, from which the values should get removed.</param>
            <param name="values">The values to remove.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes the given values from the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">The collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection, from which the values should get removed.</param>
            <param name="enumerable">A IEnumerable containing the items to remove from the collection.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.RemoveRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
                Removes the given values that satisfy the predicate from the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection, from which the values should get removed.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">The values to remove.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="M:Extend.CollectionTEx.RemoveRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes the items of the given IEnumerable that satisfy the predicate from the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">collection can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable can not be null.</exception>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection, from which the values should get removed.</param>
            <param name="predicate">The predicate.</param>
            <param name="enumerable">A IEnumerable containing the items to remove from the collection.</param>
            <returns>Returns the given collection.</returns>
        </member>
        <member name="T:Extend.DecimalEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Decimal" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Decimal" />.
            </summary>
        </member>
        <member name="M:Extend.DecimalEx.Sum(System.Decimal,System.Decimal[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.DecimalEx.Sum(System.Nullable{System.Decimal},System.Nullable{System.Decimal}[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.DecimalEx.Sum``1(``0,System.Func{``0,System.Decimal},``0[])">
            <summary>
                Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.DecimalEx.Sum``1(``0,System.Func{``0,System.Nullable{System.Decimal}},``0[])">
            <summary>
                Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.DecimalEx.PercentageOf(System.Decimal,System.Int32)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.DecimalEx.PercentageOf(System.Decimal,System.Decimal)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.DecimalEx.PercentageOf(System.Decimal,System.Int64)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.DecimalEx.PercentOf(System.Decimal,System.Int32)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.DecimalEx.PercentOf(System.Decimal,System.Decimal)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.DecimalEx.PercentOf(System.Decimal,System.Int64)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="T:Extend.DoubleEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="M:Extend.DoubleEx.IsInfinity(System.Double)">
            <summary>
                Returns whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="value">The double to check.</param>
            <returns>Returns true if the given double is infinity, otherwise false.</returns>
        </member>
        <member name="M:Extend.DoubleEx.IsNaN(System.Double)">
            <summary>
                Returns whether the specified value is not a number.
            </summary>
            <param name="value">The double to check.</param>
            <returns>Returns true if the value is not a number, otherwise false.</returns>
        </member>
        <member name="M:Extend.DoubleEx.IsNegativeInfinity(System.Double)">
            <summary>
                Returns whether the specified number evaluates to negative infinity.
            </summary>
            <param name="value">The double to check.</param>
            <returns>Returns true if the given double is negative infinity, otherwise false.</returns>
        </member>
        <member name="M:Extend.DoubleEx.IsPositiveInfinity(System.Double)">
            <summary>
                Returns whether the specified number evaluates to positive infinity.
            </summary>
            <param name="value">The double to check.</param>
            <returns>Returns true if the given double is positive infinity, otherwise false.</returns>
        </member>
        <member name="M:Extend.DoubleEx.Sum(System.Double,System.Double[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.DoubleEx.Sum(System.Nullable{System.Double},System.Nullable{System.Double}[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.DoubleEx.Sum``1(``0,System.Func{``0,System.Double},``0[])">
            <summary>
                Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.DoubleEx.Sum``1(``0,System.Func{``0,System.Nullable{System.Double}},``0[])">
            <summary>
                Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.DoubleEx.ToDays(System.Double)">
            <summary>
                Returns the given Double value as day.
            </summary>
            <param name="value">The Double value.</param>
            <returns>Returns the given Double value as days.</returns>
        </member>
        <member name="M:Extend.DoubleEx.ToHours(System.Double)">
            <summary>
                Returns the given Double value as hours.
            </summary>
            <param name="value">The Double value.</param>
            <returns>Returns the given Double value as hours.</returns>
        </member>
        <member name="M:Extend.DoubleEx.ToMilliseconds(System.Double)">
            <summary>
                Returns the given Double value as milliseconds.
            </summary>
            <param name="value">The Double value.</param>
            <returns>Returns the given Double value as milliseconds.</returns>
        </member>
        <member name="M:Extend.DoubleEx.ToMinutes(System.Double)">
            <summary>
                Returns the given Double value as minutes.
            </summary>
            <param name="value">The Double value.</param>
            <returns>Returns the given Double value as minutes.</returns>
        </member>
        <member name="M:Extend.DoubleEx.ToSeconds(System.Double)">
            <summary>
                Returns the given Double value as seconds.
            </summary>
            <param name="value">The Double value.</param>
            <returns>Returns the given Double value as seconds.</returns>
        </member>
        <member name="M:Extend.DoubleEx.PercentageOf(System.Double,System.Int32)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.DoubleEx.PercentageOf(System.Double,System.Double)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.DoubleEx.PercentageOf(System.Double,System.Int64)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.DoubleEx.PercentOf(System.Double,System.Int32)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.DoubleEx.PercentOf(System.Double,System.Double)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.DoubleEx.PercentOf(System.Double,System.Int64)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="T:Extend.Int16Ex">
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
        </member>
        <member name="M:Extend.Int16Ex.February(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in February
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in February in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.April(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in April
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in April in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.June(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in June
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in June in the specified year.</returns>
            [Pure]
            [PublicAPI]
        </member>
        <member name="M:Extend.Int16Ex.July(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in July
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in July in the specified year.</returns>
            [Pure]
            [PublicAPI]
        </member>
        <member name="M:Extend.Int16Ex.August(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in August
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in August in the specified year.</returns>
            [Pure]
            [PublicAPI]
        </member>
        <member name="M:Extend.Int16Ex.October(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in October
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in October in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.November(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in November
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in November in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.December(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in December
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in December in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.September(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in September
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in September in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.May(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in May
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in May in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.March(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in March
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in March in the specified year.</returns>
        </member>
        <member name="M:Extend.Int16Ex.January(System.Int16,System.Int16)">
            <summary>
                Returns a date-time representing the specified day in January
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in January in the specified year.</returns>
            [Pure]
            [PublicAPI]
        </member>
        <member name="M:Extend.Int16Ex.ToDays(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of days.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int16Ex.ToHours(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where  the specification is accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of hours.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int16Ex.ToMilliseconds(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of milliseconds.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int16Ex.ToMinutes(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of minutes.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int16Ex.ToSeconds(System.Int16)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of seconds.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int16Ex.FactorOf(System.Int16,System.Int16)">
            <summary>
                Checks if the Int16 value is a factor of the specified factor number.
            </summary>
            <exception cref="T:System.DivideByZeroException">value is 0.</exception>
            <param name="value">The Int16 value to check.</param>
            <param name="factorNumer">The factor number.</param>
            <returns>Returns true if the value is a factor of the specified factor number, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int16Ex.IsEven(System.Int16)">
            <summary>
                Checks if the Int16 is even.
            </summary>
            <param name="value">The Int16 to check.</param>
            <returns>Returns true if the Int16 is even, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int16Ex.IsOdd(System.Int16)">
            <summary>
                Checks if the Int16 is odd.
            </summary>
            <param name="value">The Int16 to check.</param>
            <returns>Returns true if the Int16 is odd, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int16Ex.DaysInMonth(System.Int16,System.Int16)">
            <summary>
                Returns the number of days in the specified month of the specified year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns>
                Returns the number of days of the specified month.
                For example February (2), the return value is 28 or 29 depending upon whether is a leap year.
            </returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentageOf(System.Int16,System.Int32)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentageOf(System.Int16,System.Decimal)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentageOf(System.Int16,System.Double)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentageOf(System.Int16,System.Int64)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentOf(System.Int16,System.Int32)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentOf(System.Int16,System.Double)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int16Ex.PercentOf(System.Int16,System.Int64)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int16Ex.RangeTo(System.Int16,System.Int16)">
            <summary>
                Returns a list containing all values of the given range.
            </summary>
            <exception cref="T:System.ArgumentException">The start value can not be greater than the end value.</exception>
            <param name="startValue">The start of the range.</param>
            <param name="endValue">The end of the range.</param>
            <returns>Returns a list containing the specified range.</returns>
        </member>
        <member name="M:Extend.Int16Ex.IsMultipleOf(System.Int16,System.Int16)">
            <summary>
                Checks if the Int16 value is a multiple of the given factor.
            </summary>
            <exception cref="T:System.DivideByZeroException">factor is 0.</exception>
            <param name="value">The Int16 to check.</param>
            <param name="factor">The factor.</param>
            <returns>>Returns true if the Int16 value is a multiple of the given factor.</returns>
        </member>
        <member name="M:Extend.Int16Ex.IsLeapYear(System.Int16)">
            <summary>
                Returns whether the given year is a leap year or not.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns true if the year is a leap year, otherwise false.</returns>
        </member>
        <member name="T:Extend.Int32Ex">
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:Extend.Int32Ex.Sum(System.Int32,System.Int32[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.Int32Ex.Sum(System.Nullable{System.Int32},System.Nullable{System.Int32}[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.Int32Ex.Sum``1(``0,System.Func{``0,System.Int32},``0[])">
            <summary>
                Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.Int32Ex.Sum``1(``0,System.Func{``0,System.Nullable{System.Int32}},``0[])">
            <summary>
                Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.Int32Ex.April(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in April
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in April in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.August(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in August
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in August in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.December(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in December
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in December in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.February(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in February
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in February in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.January(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in January
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in January in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.July(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in July
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in July in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.June(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in June
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in June in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.March(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in March
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in March in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.May(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in May
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in May in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.November(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in November
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in November in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.October(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in October
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in October in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.September(System.Int32,System.Int32)">
            <summary>
                Returns a date-time representing the specified day in September
                in the specified year.
            </summary>
            <param name="day">The day.</param>
            <param name="year">The year.</param>
            <returns>Return a date-time representing the specified day in September in the specified year.</returns>
        </member>
        <member name="M:Extend.Int32Ex.ToMilliseconds(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of milliseconds.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int32Ex.ToSeconds(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of seconds.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int32Ex.ToMinutes(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of minutes.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int32Ex.ToHours(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where  the specification is accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of hours.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int32Ex.ToDays(System.Int32)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of days.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int32Ex.FactorOf(System.Int32,System.Int32)">
            <summary>
                Checks if the Int32 value is a factor of the specified factor number.
            </summary>
            <exception cref="T:System.DivideByZeroException">value is 0.</exception>
            <param name="value">The Int32 value to check.</param>
            <param name="factorNumer">The factor number.</param>
            <returns>Returns true if the value is a factor of the specified factor number, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int32Ex.IsOdd(System.Int32)">
            <summary>
                Checks if the Int32 is odd.
            </summary>
            <param name="value">The Int32 to check.</param>
            <returns>Returns true if the Int32 is odd, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int32Ex.IsEven(System.Int32)">
            <summary>
                Checks if the Int32 is even.
            </summary>
            <param name="value">The Int32 to check.</param>
            <returns>Returns true if the Int32 is even, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int32Ex.DaysInMonth(System.Int32,System.Int32)">
            <summary>
                Returns the number of days in the specified month of the specified year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns>
                Returns the number of days of the specified month.
                For example February (2), the return value is 28 or 29 depending upon whether is a leap year.
            </returns>
        </member>
        <member name="M:Extend.Int32Ex.IsLeapYear(System.Int32)">
            <summary>
                Returns whether the given year is a leap year or not.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns true if the year is a leap year, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int32Ex.IsMultipleOf(System.Int32,System.Int32)">
            <summary>
                Checks if the Int32 value is a multiple of the given factor.
            </summary>
            <exception cref="T:System.DivideByZeroException">factor is 0.</exception>
            <param name="value">The Int32 to check.</param>
            <param name="factor">The factor.</param>
            <returns>>Returns true if the Int32 value is a multiple of the given factor.</returns>
        </member>
        <member name="M:Extend.Int32Ex.PercentageOf(System.Int32,System.Int32)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int32Ex.PercentageOf(System.Int32,System.Decimal)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int32Ex.PercentageOf(System.Int32,System.Double)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int32Ex.PercentageOf(System.Int32,System.Int64)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int32Ex.PercentOf(System.Int32,System.Int32)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int32Ex.PercentOf(System.Int32,System.Double)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int32Ex.RangeTo(System.Int32,System.Int32)">
            <summary>
                Returns a list containing all values of the given range.
            </summary>
            <exception cref="T:System.ArgumentException">The start value can not be greater than the end value.</exception>
            <param name="startValue">The start of the range.</param>
            <param name="endValue">The end of the range.</param>
            <returns>Returns a list containing the specified range.</returns>
        </member>
        <member name="T:Extend.EventHandlerEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.EventHandler" /> and <see cref="T:System.EventHandler`1" />.
            </summary>
        </member>
        <member name="M:Extend.EventHandlerEx.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
                Raises the given <see cref="T:System.EventHandler" /> with
                <paramref name="sender" />as sender and
                <paramref name="e" />as argument.
            </summary>
            <param name="eventHandler">The <see cref="T:System.EventHandler" /> to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <returns>Returns the given event handler.</returns>
        </member>
        <member name="M:Extend.EventHandlerEx.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                Raises the given <see cref="T:System.EventHandler" /> with
                <paramref name="sender" />as sender and
                <paramref name="e" />as argument.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="eventHandler">The <see cref="T:System.EventHandler" /> to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
            <returns>Returns the given event handler.</returns>
        </member>
        <member name="T:Extend.Int64Ex">
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int32" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int16" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:Extend.Int64Ex.Sum(System.Int64,System.Int64[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.Int64Ex.Sum(System.Nullable{System.Int64},System.Nullable{System.Int64}[])">
            <summary>
                Computes the sum of a sequence of the given values.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="value">The first value.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the values.</returns>
        </member>
        <member name="M:Extend.Int64Ex.Sum``1(``0,System.Func{``0,System.Int64},``0[])">
            <summary>
                Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.Int64Ex.Sum``1(``0,System.Func{``0,System.Nullable{System.Int64}},``0[])">
            <summary>
                Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" /></exception>
            <exception cref="T:System.ArgumentNullException">selector can not be null.</exception>
            <typeparam name="TSource">The type of the source values.</typeparam>
            <param name="value">The first value.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="values">The other values.</param>
            <returns>Returns the sum of the projected values.</returns>
        </member>
        <member name="M:Extend.Int64Ex.FactorOf(System.Int64,System.Int64)">
            <summary>
                Checks if the Int64 value is a factor of the specified factor number.
            </summary>
            <exception cref="T:System.DivideByZeroException">value is 0.</exception>
            <param name="value">The Int64 value to check.</param>
            <param name="factorNumer">The factor number.</param>
            <returns>Returns true if the value is a factor of the specified factor number, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int64Ex.IsOdd(System.Int64)">
            <summary>
                Checks if the Int64 is odd.
            </summary>
            <param name="value">The Int64 to check.</param>
            <returns>Returns true if the Int64 is odd, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int64Ex.IsEven(System.Int64)">
            <summary>
                Checks if the Int64 is even.
            </summary>
            <param name="value">The Int64 to check.</param>
            <returns>Returns true if the Int64 is even, otherwise false.</returns>
        </member>
        <member name="M:Extend.Int64Ex.ToDays(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of days.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int64Ex.ToSeconds(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of seconds.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int64Ex.ToMinutes(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of minutes.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int64Ex.ToMilliseconds(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds, where  the specification is
                accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of milliseconds.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int64Ex.ToHours(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where  the specification is accurate
                to the nearest millisecond.
            </summary>
            <exception cref="T:System.OverflowException">
                value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.
            </exception>
            <param name="value">A number of hours.</param>
            <returns>Returns a <see cref="T:System.TimeSpan" /> representing the given value.</returns>
        </member>
        <member name="M:Extend.Int64Ex.IsMultipleOf(System.Int64,System.Int64)">
            <summary>
                Checks if the Int64 value is a multiple of the given factor.
            </summary>
            <exception cref="T:System.DivideByZeroException">factor is 0.</exception>
            <param name="value">The Int64 to check.</param>
            <param name="factor">The factor.</param>
            <returns>>Returns true if the Int64 value is a multiple of the given factor.</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentageOf(System.Int64,System.Int32)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentageOf(System.Int64,System.Decimal)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentageOf(System.Int64,System.Double)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentageOf(System.Int64,System.Int64)">
            <summary>
                Gets the specified percentage of the number.
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>Returns the specified percentage of the number</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentOf(System.Int64,System.Int32)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentOf(System.Int64,System.Double)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int64Ex.PercentOf(System.Int64,System.Int64)">
            <summary>
                Gets the percentage of the number.
            </summary>
            <exception cref="T:System.DivideByZeroException">The number must be greater than zero.</exception>
            <param name="number">The number.</param>
            <param name="total">The total value.</param>
            <returns>Returns the percentage of the number.</returns>
        </member>
        <member name="M:Extend.Int64Ex.RangeTo(System.Int64,System.Int64)">
            <summary>
                Returns a list containing all values of the given range.
            </summary>
            <exception cref="T:System.ArgumentException">The start value can not be greater than the end value.</exception>
            <param name="startValue">The start of the range.</param>
            <param name="endValue">The end of the range.</param>
            <returns>Returns a list containing the specified range.</returns>
        </member>
        <member name="T:Extend.RandomEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Random" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Random" />.
            </summary>
        </member>
        <member name="M:Extend.RandomEx.CoinToss(System.Random)">
            <summary>
                Returns randomly true or false.
            </summary>
            <exception cref="T:System.ArgumentNullException">random can not be null.</exception>
            <param name="random">The random to use.</param>
            <returns>Returns true or false (random value).</returns>
        </member>
        <member name="M:Extend.RandomEx.RandomOne``1(System.Random,``0[])">
            <summary>
                Returns randomly one of the given values.
            </summary>
            <exception cref="T:System.ArgumentNullException">The random can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="random">The random to use.</param>
            <param name="values">A list of values.</param>
            <returns>Returns randomly one of the given values.</returns>
        </member>
        <member name="M:Extend.RandomEx.RandomOne``1(System.Random,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns randomly one of the given values.
            </summary>
            <exception cref="T:System.ArgumentNullException">The random can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="random">The random to use.</param>
            <param name="values">A IEnumerable containing the values.</param>
            <returns>Returns randomly one of the given values.</returns>
        </member>
        <member name="T:Extend.AssemblyEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Reflection.Assembly" />.
            </summary>
        </member>
        <member name="M:Extend.AssemblyEx.GetTypesWithAttribute``1(System.Reflection.Assembly[])">
            <summary>
                Gets all types of the given assemblies which is decorated with an attribute of the specified type.
            </summary>
            <exception cref="T:System.ArgumentNullException">assemblies can not be null.</exception>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="assemblies">The assemblies to search in.</param>
            <returns>Returns the found types and their attributes.</returns>
        </member>
        <member name="M:Extend.AssemblyEx.GetTypesWithAttribute``1(System.Boolean,System.Reflection.Assembly[])">
            <summary>
                Gets all types of the given assemblies which is decorated with an attribute of the specified type.
            </summary>
            <exception cref="T:System.ArgumentNullException">assemblies can not be null.</exception>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="inherit">
                true to search this member's inheritance chain to find the attributes; otherwise, false. This
                parameter is ignored for properties and events; see Remarks.
            </param>
            <param name="assemblies">The assemblies to search in.</param>
            <returns>Returns the found types and their attributes.</returns>
        </member>
        <member name="M:Extend.AssemblyEx.GetTypesWithAttribute``1(System.Boolean,System.Type,System.Reflection.Assembly[])">
            <summary>
                Gets all types of the given assemblies which is decorated with an attribute of the specified type and are sub
                classes of the specified base type.
            </summary>
            <exception cref="T:System.ArgumentNullException">assemblies can not be null.</exception>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="inherit">
                true to search this member's inheritance chain to find the attributes; otherwise, false. This
                parameter is ignored for properties and events; see Remarks.
            </param>
            <param name="baseType">The base type to search for, or null.</param>
            <param name="assemblies">The assemblies to search in.</param>
            <returns>Returns the found types and their attributes.</returns>
        </member>
        <member name="T:Extend.PropertyInfoEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Reflection.PropertyInfo" />.
            </summary>
        </member>
        <member name="M:Extend.PropertyInfoEx.ToMemberInformation(System.Reflection.PropertyInfo,Extend.IMemberInformation)">
            <summary>
                Creates a <see cref="T:Extend.IMemberInformation" /> based on the given <see cref="T:System.Reflection.PropertyInfo" /> and parent information.
            </summary>
            <exception cref="T:System.ArgumentNullException">propertyInfo can not be null.</exception>
            <param name="propertyInfo">The property information.</param>
            <param name="parentMemberInformation">The parent of the given property.</param>
            <returns>Returns the new created member information.</returns>
        </member>
        <member name="T:Extend.StringEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:Extend.StringEx.SaveToBoolean(System.String,System.Boolean)">
            <summary>
                Tries to convert the specified string representation of a logical value to
                its <see cref="T:System.Boolean" /> equivalent.
            </summary>
            <param name="value">A string containing the value to convert.</param>
            <param name="defaultValue">The default value, returned if the conversion fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToByte(System.String,System.Byte)">
            <summary>
                Tries to convert the string representation of a number to its <see cref="T:System.Byte" />
                equivalent.
            </summary>
            <param name="value">
                A string that contains a number to convert. The string is interpreted using
                the <see cref="F:System.Globalization.NumberStyles.Integer" /> numberStyle.
                The string to pars.
            </param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte)">
            <summary>
                Tries to convert the string representation of a number to its <see cref="T:System.Byte" />
                equivalent.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and
                <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
            </exception>
            <param name="value">
                A string that contains a number to convert. The string is interpreted using
                the <see cref="F:System.Globalization.NumberStyles.Integer" /> numberStyle.
                The string to pars.
            </param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in s. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">
                An object that supplies culture-specific formatting information about s.
                If formatProvider is null, the thread current culture is used.
            </param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToChar(System.String,System.Char)">
            <summary>
                Converts the value of the specified string to its equivalent Unicode character.
            </summary>
            <param name="value">A string that contains a single character.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToDateTime(System.String,System.DateTime)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.
            </summary>
            <param name="value">A <see cref="T:System.String" /> containing a date and time to convert.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified culture-specific format information and formatting style.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                dateTimeStyle is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-styles contains
                an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both
                <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
            </exception>
            <param name="value">A <see cref="T:System.String" />containing a date and time to convert.</param>
            <param name="formatProvider">
                An object that supplies culture-specific formatting information about
                <paramref name="value" />.
            </param>
            <param name="dateTimeStyle">
                A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the
                current time zone or the current date.
                A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToDecimal(System.String,System.Decimal)">
            <summary>
                Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal)">
            <summary>
                Converts the string representation of a number to its System.Decimal equivalent
                using the specified numberStyle and culture-specific format.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a System.Globalization.NumberStyles value. -or-style is the
                <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />  value.
            </exception>
            <param name="value">The string representation of the number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the permitted
                format of value. A typical value to specify is System.Globalization.NumberStyles.Number.
            </param>
            <param name="formatProvider">An object that supplies culture-specific parsing information about value.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToDouble(System.String,System.Double)">
            <summary>
                Converts the string representation of a number to its double-precision floating-point
                number equivalent.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its double-precision floating-point number equivalent.
            </summary>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-numberStyle includes
                the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
            </exception>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <param name="value">A string containing a number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates
                the permitted format of <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" />
                combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
            </param>
            <param name="formatProvider">
                An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about value.
            </param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToGuid(System.String,System.Guid)">
            <summary>
                Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="defaultValue">
                The default value, returned if the parsing fails. If not provided default will be
                <see cref="F:System.Guid.Empty" />.
            </param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToInt64(System.String,System.Int64)">
            <summary>
                Converts the string representation of a number to its 64-bit signed integer
                equivalent.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its 64-bit signed integer equivalent.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />
                values.
            </exception>
            <param name="value">A string containing a number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in value. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about value.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToInt32(System.String,System.Int32)">
            <summary>
                Converts the string representation of a number to its 32-bit signed integer
                equivalent.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its 32-bit signed integer equivalent.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />
                values.
            </exception>
            <param name="value">A string containing a number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in value. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about value.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToInt16(System.String,System.Int16)">
            <summary>
                Converts the string representation of a number to its 16-bit signed integer
                equivalent.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.SaveToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its 16-bit signed integer equivalent.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />
                values.
            </exception>
            <param name="value">A string containing a number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in value. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about value.</param>
            <param name="defaultValue">The default value, returned if the parsing fails.</param>
            <returns>Returns the converted value, or the given default value if the conversion failed.</returns>
        </member>
        <member name="M:Extend.StringEx.ToGuid(System.String)">
            <summary>
                Converts the given string to a GUID.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">value is not in a recognized format.</exception>
            <param name="value">The string to convert.</param>
            <returns>Returns the converted GUID.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsGuid(System.String,System.Guid@)">
            <summary>
                Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.
            </summary>
            <param name="value">The GUID to convert.</param>
            <param name="outValue">
                The structure that will contain the parsed value. If the method returns true,result contains a
                valid <see cref="T:System.Guid" />. If the method returns false, result equals <see cref="F:System.Guid.Empty" />.
            </param>
            <returns>Returns true if the parse operation was successful; otherwise, false.</returns>
        </member>
        <member name="M:Extend.StringEx.AppendWithNewLineIfNotEmpty(System.String,System.String,System.String)">
            <summary>
                Appends the given text to the string.
                Adds a newline before <paramref name="append" />, if <paramref name="target" /> is not null.
            </summary>
            <param name="target">The string to append to.</param>
            <param name="append">The string to append.</param>
            <param name="newLine">The new line string to use.</param>
            <returns>Returns the concatenated string.</returns>
        </member>
        <member name="M:Extend.StringEx.ChangeType(System.String,System.Type)">
            <summary>
                Returns an object of the specified type and whose value is equivalent to
                the specified object.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <exception cref="T:System.OverflowException">value represents a number that is out of the range of conversionType.</exception>
            <exception cref="T:System.FormatException">value is not in a format recognized by conversionType.</exception>
            <exception cref="T:System.InvalidCastException">
                This conversion is not supported. -or-value is null and conversionType is
                a value type.-or-value does not implement the System.IConvertible interface.
            </exception>
            <param name="value">An object that implements the System.IConvertible interface.</param>
            <param name="type">The type of object to return.</param>
            <returns>
                An object whose type is conversionType and whose value is equivalent to value.-or-A
                null reference (Nothing in Visual Basic), if value is null and conversionType
                is not a value type.
            </returns>
        </member>
        <member name="M:Extend.StringEx.ChangeType(System.String,System.Type,System.IFormatProvider)">
            <summary>
                Returns an object of the specified type and whose value is equivalent to
                the specified object.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.OverflowException">value represents a number that is out of the range of conversionType.</exception>
            <exception cref="T:System.FormatException">value is not in a format recognized by conversionType.</exception>
            <exception cref="T:System.InvalidCastException">
                This conversion is not supported. -or-value is null and conversionType is
                a value type.-or-value does not implement the System.IConvertible interface.
            </exception>
            <param name="value">An object that implements the System.IConvertible interface.</param>
            <param name="type">The type of object to return.</param>
            <param name="formatProvider"> An object that supplies culture-specific formatting information.</param>
            <returns>
                An object whose type is conversionType and whose value is equivalent to value.-or-A
                null reference (Nothing in Visual Basic), if value is null and conversionType
                is not a value type.
            </returns>
        </member>
        <member name="M:Extend.StringEx.ChangeType``1(System.String)">
            <summary>
                Returns an object of the specified type and whose value is equivalent to
                the specified object.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <exception cref="T:System.OverflowException">value represents a number that is out of the range of conversionType.</exception>
            <exception cref="T:System.FormatException">value is not in a format recognized by conversionType.</exception>
            <exception cref="T:System.InvalidCastException">
                This conversion is not supported. -or-value is null and conversionType is
                a value type.-or-value does not implement the System.IConvertible interface.
            </exception>
            <param name="value">An object that implements the System.IConvertible interface.</param>
            <returns>
                An object whose type is conversionType and whose value is equivalent to value.-or-A
                null reference (Nothing in Visual Basic), if value is null and conversionType
                is not a value type.
            </returns>
        </member>
        <member name="M:Extend.StringEx.ChangeType``1(System.String,System.IFormatProvider)">
            <summary>
                Returns an object of the specified type and whose value is equivalent to
                the specified object.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.OverflowException">value represents a number that is out of the range of conversionType.</exception>
            <exception cref="T:System.FormatException">value is not in a format recognized by conversionType.</exception>
            <exception cref="T:System.InvalidCastException">
                This conversion is not supported. -or-value is null and conversionType is
                a value type.-or-value does not implement the System.IConvertible interface.
            </exception>
            <param name="value">An object that implements the System.IConvertible interface.</param>
            <param name="formatProvider"> An object that supplies culture-specific formatting information.</param>
            <returns>
                An object whose type is conversionType and whose value is equivalent to value.-or-A
                null reference (Nothing in Visual Basic), if value is null and conversionType
                is not a value type.
            </returns>
        </member>
        <member name="M:Extend.StringEx.CharAt(System.String,System.Int32)">
            <summary>
                Gets the character of the given string at the specified position.
            </summary>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The given index is out of range.</exception>
            <param name="value">The string.</param>
            <param name="index">The index.</param>
            <returns>Returns the character at the specified position.</returns>
        </member>
        <member name="M:Extend.StringEx.CompareOrdinal(System.String,System.String)">
            <summary>
                Compares the given strings using <see cref="F:System.StringComparison.Ordinal" />.
            </summary>
            <param name="value">The first string to compare.</param>
            <param name="compareValue">The second string to compare.</param>
            <returns>Returns true if the given strings are equals, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.CompareOrdinalIgnoreCase(System.String,System.String)">
            <summary>
                Compares the given strings using <see cref="F:System.StringComparison.OrdinalIgnoreCase" />.
            </summary>
            <param name="value">The first string to compare.</param>
            <param name="compareValue">The second string to compare.</param>
            <returns>Returns true if the given strings are equals, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                Checks whether a specified substring occurs within the given string, or not.
            </summary>
            <exception cref="T:System.ArgumentException"> comparisonType is not a valid <see cref="T:System.StringComparison" /> value.</exception>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <param name="s">The string to search in.</param>
            <param name="value">The string to seek.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <returns>Returns true if the value parameter occurs within the given string; otherwise, false.</returns>
        </member>
        <member name="M:Extend.StringEx.GetLines(System.String)">
            <summary>
                Enumerates all lines in the given string.
            </summary>
            <param name="value">The string whose lines are to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <returns>An enumerable sequence of lines in this string.</returns>
        </member>
        <member name="M:Extend.StringEx.Left(System.String,System.Int32)">
            <summary>
                Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count is less than 0 or greater than the length of the given string.</exception>
            <param name="value">The string from which the leftmost characters are returned.</param>
            <param name="count">The number of characters to return.</param>
            <returns>Returns a string containing a specified number of characters from the left side of the given string.</returns>
        </member>
        <member name="M:Extend.StringEx.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
                Replaces a single character at the specified position with the specified replacement character.
            </summary>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index doesn't refer to a valid position within the string.</exception>
            <param name="value">The string in which a character will be replaced.</param>
            <param name="index">The position of the character to replace.</param>
            <param name="replace">The replacement character.</param>
            <returns>Returns the string with the replaced character.</returns>
        </member>
        <member name="M:Extend.StringEx.Right(System.String,System.Int32)">
            <summary>
                Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="count">The number of characters to return.</param>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">count is less than 0 or greater than the length of the string.</exception>
            <param name="value">The string from which the rightmost characters are returned.</param>
            <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        </member>
        <member name="M:Extend.StringEx.SafeToCultureInfo(System.String)">
            <summary>
                Tries to create a new <see cref="T:System.Globalization.CultureInfo" /> with the given name.
            </summary>
            <param name="name">The name of the culture.</param>
            <returns>Returns the <see cref="T:System.Globalization.CultureInfo" /> with the given name, or null if the culture is not supported.</returns>
        </member>
        <member name="M:Extend.StringEx.SafeToCultureInfo(System.String,System.Globalization.CultureInfo)">
            <summary>
                Tries to create a new <see cref="T:System.Globalization.CultureInfo" /> with the given name.
            </summary>
            <param name="name">The name of the culture.</param>
            <param name="fallbackCulture">The culture returned if the culture with the given name is not supported.</param>
            <returns>Returns the <see cref="T:System.Globalization.CultureInfo" /> with the given name, or <paramref name="fallbackCulture" />.</returns>
        </member>
        <member name="M:Extend.StringEx.ToCultureInfo(System.String)">
            <summary>
                Creates a new <see cref="T:System.Globalization.CultureInfo" /> with the given name.
            </summary>
            <exception cref="T:System.ArgumentNullException">name can not be null.</exception>
            <exception cref="T:System.Globalization.CultureNotFoundException">Culture is not supported.</exception>
            <param name="name">The name of the culture.</param>
            <returns>Returns the <see cref="T:System.Globalization.CultureInfo" /> with the given name.</returns>
        </member>
        <member name="M:Extend.StringEx.IsEmpty(System.String)">
            <summary>
                Gets whether the given <see cref="T:System.String" /> is empty or not.
            </summary>
            <param name="str">The <see cref="T:System.String" /> to check.</param>
            <returns>A value of true if the given <see cref="T:System.String" /> is empty, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.IsNotEmpty(System.String)">
            <summary>
                Gets whether the given <see cref="T:System.String" /> is empty or not.
            </summary>
            <param name="input">The <see cref="T:System.String" /> to check.</param>
            <returns>A value of true if the given <see cref="T:System.String" /> is not empty, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.SplitLines(System.String,System.StringSplitOptions)">
            <summary>
                Splits the given string at each line break (<see cref="P:System.Environment.NewLine" />).
            </summary>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <param name="value">The string to split.</param>
            <param name="stringSplitOptions">
                <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements
                from the array returned; or System.StringSplitOptions.None to include empty
                array elements in the array returned.
            </param>
            <returns>
                Returns an array whose elements contain the substrings in this string that are delimited by
                <see cref="P:System.Environment.NewLine" />.
            </returns>
        </member>
        <member name="M:Extend.StringEx.SplitLines(System.String)">
            <summary>
                Splits the given string at each line break (<see cref="P:System.Environment.NewLine" />).
            </summary>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <param name="value">The string to split.</param>
            <returns>
                Returns an array whose elements contain the substrings in this string that are delimited by
                <see cref="P:System.Environment.NewLine" />.
            </returns>
        </member>
        <member name="M:Extend.StringEx.TakeAndRemove(System.Int32,System.String@)">
            <summary>
                Returns a specified number of characters from the start of the given value
                and removes the returned characters from the value.
            </summary>
            <param name="value">
                The source value.
            </param>
            <param name="count">The numbers of characters to return.</param>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Count must be smaller than the length of the given value.</exception>
            <returns>A <see cref="T:System.String" /> that contains the specified number of chars. </returns>
        </member>
        <member name="M:Extend.StringEx.ToEnum``1(System.String,System.Boolean)">
            <summary>
                Converts a string to an enumeration.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The String value to convert.</param>
            <param name="ignoreCase">Determines whether or not to ignore the casing of the string.</param>
            <returns>Returns the converted enumeration value.</returns>
        </member>
        <member name="M:Extend.StringEx.TryToEnum``1(System.String,``0@,System.Boolean)">
            <summary>
                Tries to convert a string value to an enum.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The String value to convert.</param>
            <param name="ignoreCase">Determines whether or not to ignore the casing of the string.</param>
            <param name="outValue">The output value.</param>
            <returns>Returns the converted enum value.</returns>
        </member>
        <member name="M:Extend.StringEx.F(System.String,System.Object[])">
            <summary>
                Replaces the format item in a specified <see cref="T:System.String" /> with the <see cref="T:System.String" /> representation of a
                corresponding <see cref="T:System.Object" /> in a specified array.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The arguments can not be null.</exception>
            <exception cref="T:System.FormatException">
                Format is invalid.-or- The index of a format item is less than zero, or greater than
                or equal to the length of the args array.
            </exception>
            <param name="format">The <see cref="T:System.String" /> containing the format items.</param>
            <param name="args">The array containing all the corresponding values.</param>
            <returns>
                A copy of format in which the format items have been replaced by the <see cref="T:System.String"></see>
                representation of the corresponding objects in <paramref name="args" />.
            </returns>
        </member>
        <member name="M:Extend.StringEx.F(System.String,System.IFormatProvider,System.Object[])">
            <summary>
                Replaces the format item in a specified <see cref="T:System.String" /> with the <see cref="T:System.String" /> representation of a
                corresponding <see cref="T:System.Object" /> in a specified array.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The arguments can not be null.</exception>
            <exception cref="T:System.FormatException">
                Format is invalid.-or- The index of a format item is less than zero, or greater than
                or equal to the length of the args array.
            </exception>
            <param name="format">The <see cref="T:System.String" /> containing the format items.</param>
            <param name="args">The array containing all the corresponding values.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
                A copy of format in which the format items have been replaced by the <see cref="T:System.String"></see>
                representation of the corresponding objects in <paramref name="args" />.
            </returns>
        </member>
        <member name="M:Extend.StringEx.IsNotMatch(System.String,System.String)">
            <summary>
                Gets whether a <see cref="N:System.Text.RegularExpressions" /> with the specified pattern finds not a match in the
                specified input <see cref="T:System.String" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">The input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The pattern can not be null.</exception>
            <param name="input">The <see cref="T:System.String" /> to search for a match.</param>
            <param name="pattern">The regular expression pattern used by the <see cref="T:System.Text.RegularExpressions.Regex" />.</param>
            <returns>A value of true if the regular expression doesn't find a match, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.IsNotMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Gets whether a <see cref="T:System.Text.RegularExpressions.Regex" /> with the specified pattern finds not a match in the specified input
                <see cref="T:System.String" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">The input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The pattern can not be null.</exception>
            <param name="input">The <see cref="T:System.String" /> to search for a match.</param>
            <param name="pattern">The regular expression pattern used by the <see cref="T:System.Text.RegularExpressions.Regex" />.</param>
            <param name="options">The regular expression options used by the <see cref="T:System.Text.RegularExpressions.Regex" />.</param>
            <returns>A value of true if the regular expression doesn't find a match, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractFirstDecimal(System.String,System.Int32)">
            <summary>
                Extracts the first Decimal from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted decimal.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllDecimal(System.String,System.Int32)">
            <summary>
                Extracts all Decimals from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimals from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted decimals.</returns>
        </member>
        <member name="M:Extend.StringEx.ToDecimal(System.String)">
            <summary>
                Converts the given string to a decimal.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">The value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than
                <see cref="F:System.Decimal.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <returns>The decimal.</returns>
        </member>
        <member name="M:Extend.StringEx.ToDecimal(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a decimal.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">The value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than
                <see cref="F:System.Decimal.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The decimal.</returns>
        </member>
        <member name="M:Extend.StringEx.ToBoolean(System.String)">
            <summary>
                Converts the given string to a boolean.
            </summary>
            <remarks>
                The framework does not know a culture specific convert method, so does this library.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">Value is not equal to System.Boolean.TrueString or System.Boolean.FalseString.</exception>
            <param name="value">The string to convert.</param>
            <returns>Returns the boolean.</returns>
        </member>
        <member name="M:Extend.StringEx.ToByte(System.String)">
            <summary>
                Converts the given string to a byte.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">The value is not of the correct format.</exception>
            <exception cref="T:System.OverflowException">
                The value represents a number less than System.Byte.MinValue or greater than
                System.Byte.MaxValue.
            </exception>
            <param name="value">The string to convert.</param>
            <returns>Returns a byte value that is equivalent to the number contained in value.</returns>
        </member>
        <member name="M:Extend.StringEx.ToByte(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a byte.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">The value is not of the correct format.</exception>
            <exception cref="T:System.OverflowException">
                The value represents a number less than System.Byte.MinValue or greater than
                System.Byte.MaxValue.
            </exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>Returns a byte value that is equivalent to the number contained in value.</returns>
        </member>
        <member name="M:Extend.StringEx.ToChar(System.String)">
            <summary>
                Converts the first character of a specified string to a Unicode character.
            </summary>
            <remarks>
                The framework does not know a culture specific convert method, so does this library.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">The length of value is not 1.</exception>
            <param name="value">A string of length 1.</param>
            <returns>Returns a Unicode character that is equivalent to the first and only character in value.</returns>
        </member>
        <member name="M:Extend.StringEx.ToDateTime(System.String)">
            <summary>
                Converts the given string to a date time value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid string representation of a date and time.</exception>
            <param name="value">The string to convert.</param>
            <returns>Returns the date time value.</returns>
        </member>
        <member name="M:Extend.StringEx.ToDateTime(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a date time value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid string representation of a date and time.</exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>Returns the date time value.</returns>
        </member>
        <member name="M:Extend.StringEx.ToDouble(System.String)">
            <summary>
                Converts the given string to a double.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">value does not represent a number in a valid format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Double.MinValue" /> or
                greater than <see cref="F:System.Double.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <returns>The double.</returns>
        </member>
        <member name="M:Extend.StringEx.ToDouble(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a double.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">value does not represent a number in a valid format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number that is less than <see cref="F:System.Double.MinValue" /> or
                greater than <see cref="F:System.Double.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The double.</returns>
        </member>
        <member name="M:Extend.StringEx.ToInt16(System.String)">
            <summary>
                Converts the given string to a Int16.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">value  s not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than
                <see cref="F:System.Int16.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <returns>Returns the converted Int16.</returns>
        </member>
        <member name="M:Extend.StringEx.ToInt16(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a Int16.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">value  s not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than
                <see cref="F:System.Int16.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>Returns the converted Int16.</returns>
        </member>
        <member name="M:Extend.StringEx.ToInt32(System.String)">
            <summary>
                Converts the given string to a Int32.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">value  s not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than
                <see cref="F:System.Int32.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <returns>Returns the converted Int32.</returns>
        </member>
        <member name="M:Extend.StringEx.ToInt32(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a Int32.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">value  s not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than
                <see cref="F:System.Int32.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>Returns the converted Int32.</returns>
        </member>
        <member name="M:Extend.StringEx.ToInt64(System.String)">
            <summary>
                Converts the given string to a Int64.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.FormatException">value  s not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than
                <see cref="F:System.Int64.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <returns>Returns the converted Int64.</returns>
        </member>
        <member name="M:Extend.StringEx.ToInt64(System.String,System.IFormatProvider)">
            <summary>
                Converts the given string to a Int64.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.FormatException">value  s not in the correct format.</exception>
            <exception cref="T:System.OverflowException">
                value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than
                <see cref="F:System.Int64.MaxValue" />.
            </exception>
            <param name="value">The string to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>Returns the converted Int64.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsBoolean(System.String,System.Boolean@)">
            <summary>
                Tries to convert the specified string representation of a logical value to
                its <see cref="T:System.Boolean" /> equivalent. A return value indicates whether the conversion
                succeeded or failed.
            </summary>
            <param name="value">A string containing the value to convert.</param>
            <param name="outValue">
                When this method returns, if the conversion succeeded, contains true if value
                is equal to <see cref="F:System.Boolean.TrueString" /> or false if value is equal to <see cref="F:System.Boolean.FalseString" />.
                If the conversion failed, contains false. The conversion fails if value is
                null or is not equal to the value of either the <see cref="F:System.Boolean.TrueString" />
                or <see cref="F:System.Boolean.FalseString" /> field.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsByte(System.String,System.Byte@)">
            <summary>
                Tries to convert the string representation of a number to its <see cref="T:System.Byte" />
                equivalent, and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="value">
                A string that contains a number to convert. The string is interpreted using
                the <see cref="F:System.Globalization.NumberStyles.Integer" /> numberStyle.
                The string to pars.
            </param>
            <param name="outValue">
                The parsed value.
                When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the
                number contained in s if the conversion succeeded, or zero if the conversion
                failed. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the
                conversion succeeded or failed.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and
                <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
            </exception>
            <param name="value">
                A string containing a number to convert. The string is interpreted using
                the numberStyle specified by numberStyle.
            </param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in s. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">
                An object that supplies culture-specific formatting information about s.
                If formatProvider is null, the thread current culture is used.
            </param>
            <param name="outValue">
                When this method returns, contains the 8-bit unsigned integer value equivalent
                to the number contained in s if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" />
                or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsChar(System.String,System.Char@)">
            <summary>
                Converts the value of the specified string to its equivalent Unicode character.
                A return code indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string that contains a single character.</param>
            <param name="outValue">
                When this method returns, contains a Unicode character equivalent to the
                sole character in s, if the conversion succeeded, or an undefined value if
                the conversion failed. The conversion fails if the s parameter is null or
                the length of s is not 1. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDateTime(System.String,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and
                returns a value that
                indicates whether the conversion succeeded.
            </summary>
            <param name="value">A <see cref="T:System.String" /> containing a date and time to convert.</param>
            <param name="result">
                When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in
                <paramref name="value" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion
                failed. The conversion fails if the <paramref name="value" />
                parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time.
                This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the s parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified culture-specific format information and formatting style, and returns a value that indicates whether the
                conversion succeeded.
            </summary>
            <exception cref="T:System.ArgumentNullException">The format provider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                dateTimeStyle is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-styles contains
                an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both
                <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
            </exception>
            <param name="value">A <see cref="T:System.String" />containing a date and time to convert.</param>
            <param name="formatProvider">
                An object that supplies culture-specific formatting information about
                <paramref name="value" />.
            </param>
            <param name="dateTimeStyle">
                A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the
                current time zone or the current date.
                A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </param>
            <param name="result">
                When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in
                <paramref name="value" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion
                failed. The conversion fails if the <paramref name="value" /> parameter is
                null, is an empty string (""), or does not contain a valid string representation of a date and time.
                This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the s parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDecimal(System.String,System.Decimal@)">
            <summary>
                Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.
                A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="outValue">
                The parsed value.
                When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent
                to the numeric value contained in s, if the conversion succeeded, or is zero
                if the conversion failed. The conversion fails if the s parameter is null
                or System.String.Empty, is not a number in a valid format, or represents
                a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.
                This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
            <summary>
                Converts the string representation of a number to its System.Decimal equivalent
                using the specified numberStyle and culture-specific format. A return value indicates
                whether the conversion succeeded or failed.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a System.Globalization.NumberStyles value. -or-style is the
                <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />  value.
            </exception>
            <param name="value">The string representation of the number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the permitted
                format of value. A typical value to specify is System.Globalization.NumberStyles.Number.
            </param>
            <param name="formatProvider">An object that supplies culture-specific parsing information about value.</param>
            <param name="outValue">
                When this method returns, contains the System.Decimal number that is equivalent
                to the numeric value contained in s, if the conversion succeeded, or is zero
                if the conversion failed. The conversion fails if the s parameter is null
                or System.String.Empty, is not in a format compliant with numberStyle, or represents
                a number less than System.Decimal.MinValue or greater than System.Decimal.MaxValue.
                This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDouble(System.String,System.Double@)">
            <summary>
                Converts the string representation of a number to its double-precision floating-point
                number equivalent. A return value indicates whether the conversion succeeded
                or failed.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="outValue">
                When this method returns, contains the double-precision floating-point number
                equivalent of the <paramref name="value" /> parameter, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the <paramref name="value" /> parameter is null or
                <see cref="F:System.String.Empty" />,
                is not a number in a valid format, or represents a number less than <see cref="F:System.Double.MinValue" />
                or greater than <see cref="F:System.Double.MaxValue" />. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its double-precision floating-point number equivalent. A return
                value indicates whether the conversion succeeded or failed.
            </summary>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-numberStyle includes
                the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.
            </exception>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <param name="value">A string containing a number to convert.</param>
            <param name="numberStyle">
                A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates
                the permitted format of <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" />
                combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.
            </param>
            <param name="formatProvider">
                An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about
                <paramref name="value" />.
            </param>
            <param name="outValue">
                When this method returns, contains a double-precision floating-point number
                equivalent of the numeric value or symbol contained in <paramref name="value" />, if the conversion
                succeeded, or zero if the conversion failed. The conversion fails if the
                <paramref name="value" /> parameter is null or <see cref="F:System.String.Empty" />, is not in a format compliant
                with numberStyle, represents a number less than <see cref="F:System.SByte.MinValue" /> or greater
                than <see cref="F:System.SByte.MaxValue" />, or if numberStyle is not a valid combination of <see cref="T:System.Globalization.NumberStyles" />
                enumerated constants. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsInt16(System.String,System.Int16@)">
            <summary>
                Converts the string representation of a number to its 16-bit signed integer
                equivalent. A return value indicates whether the conversion succeeded or
                failed.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="outValue">
                When this method returns, contains the 16-bit signed integer value equivalent
                to the number contained in s, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not of the correct format, or represents a number less than <see cref="F:System.Int16.MinValue" />
                or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its 16-bit signed integer equivalent. A return value indicates
                whether the conversion succeeded or failed.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />
                values.
            </exception>
            <param name="value">
                A string containing a number to convert.
            </param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in value. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about value.</param>
            <param name="outValue">
                When this method returns, contains the 16-bit signed integer value equivalent
                to the number contained in s, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not in a format compliant with numberStyle, or represents a number less than
                <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter
                is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsInt32(System.String,System.Int32@)">
            <summary>
                Converts the string representation of a number to its 32-bit signed integer
                equivalent. A return value indicates whether the conversion succeeded or
                failed.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <param name="value">A string containing a number to convert.</param>
            <param name="outValue">
                When this method returns, contains the 32-bit signed integer value equivalent
                to the number contained in s, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not of the correct format, or represents a number less than <see cref="F:System.Int32.MinValue" />
                or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
            <summary>
                Converts the string representation of a number in a specified numberStyles and culture-specific
                format to its 32-bit signed integer equivalent. A return value indicates
                whether the conversion succeeded or failed.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and
                <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
            </exception>
            <param name="value">
                A string containing a number to convert. The string is interpreted using
            </param>
            <param name="numberStyles">
                A bitwise combination of enumeration values that indicates the numberStyles elements
                that can be present in value. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about value.</param>
            <param name="outValue">
                When this method returns, contains the 32-bit signed integer value equivalent
                to the number contained in s, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not in a format compliant with numberStyles, or represents a number less than
                <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter
                is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsInt64(System.String,System.Int64@)">
            <summary>
                Converts the string representation of a number to its 64-bit signed integer
                equivalent. A return value indicates whether the conversion succeeded or
                failed.
            </summary>
            <param name="value">A string containing a number to convert.</param>
            <param name="outValue">
                When this method returns, contains the 64-bit signed integer value equivalent
                to the number contained in s, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" />
                or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
            <summary>
                Converts the string representation of a number in a specified numberStyle and culture-specific
                format to its 64-bit signed integer equivalent. A return value indicates
                whether the conversion succeeded or failed.
            </summary>
            <exception cref="T:System.ArgumentNullException">formatProvider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                numberStyle is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a
                combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and
                <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
            </exception>
            <param name="value">
                A string containing a number to convert. The string is interpreted using
            </param>
            <param name="numberStyle">
                A bitwise combination of enumeration values that indicates the numberStyle elements
                that can be present in value. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about value.</param>
            <param name="outValue">
                When this method returns, contains the 64-bit signed integer value equivalent
                to the number contained in s, if the conversion succeeded, or zero if the
                conversion failed. The conversion fails if the s parameter is null or <see cref="F:System.String.Empty" />,
                is not in a format compliant with numberStyle, or represents a number less than
                <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter
                is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractFirstDouble(System.String,System.Int32)">
            <summary>
                Extracts the first double from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted double.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllDouble(System.String,System.Int32)">
            <summary>
                Extracts all Doubles from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the doubles from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted doubles.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its DateTime equivalent using the specified
                format,
                culture-specific format information, and style.
                The format of the string representation must match the specified format exactly.
                The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <exception cref="T:System.ArgumentNullException">format can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">format provider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                dateTimeStyle is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-styles
                contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both
                <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
            </exception>
            <param name="value">A <see cref="T:System.String" /> containing a date and time to convert.</param>
            <param name="format">The required format of s. See the Remarks section for more information.</param>
            <param name="formatProvider">
                An object that supplies culture-specific formatting information about
                <paramref name="value" />.
            </param>
            <param name="dateTimeStyle">
                A bitwise combination of one or more enumeration values that indicate the permitted format
                of <paramref name="value" />.
            </param>
            <param name="outValue">
                When this method returns, contains the s<see cref="T:System.DateTime" /> value equivalent to the date and time contained in
                <paramref name="value" />,
                if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed.
                The conversion fails if either the s or format parameter is null, is an empty string, or does not contain a date
                and time that correspond to the pattern specified in format.
                This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.TryParsDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified array of formats,
                culture-specific format information, and style. The format of the string representation must match at least one of
                the specified formats exactly.
                The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <remarks>
                The DateTime.TryParseExact(String, String[], IFormatProvider, DateTimeStyles, DateTime) method parses the string
                representation
                of a date that matches any one of the patterns assigned to the formats parameter.
                It is like the DateTime.ParseExact(String, String[], IFormatProvider, DateTimeStyles) method, except the
                TryParseExact method does not throw an exception if the conversion fails.
            </remarks>
            <exception cref="T:System.ArgumentNullException">formats can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">format provider can not be null.</exception>
            <exception cref="T:System.ArgumentException">
                dateTimeStyle is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-styles
                contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both
                <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).
            </exception>
            <param name="value">A <see cref="T:System.String" /> containing a date and time to convert.</param>
            <param name="formats">An array of allowable formats of s. See the Remarks section for more information.</param>
            <param name="formatProvider">
                An object that supplies culture-specific formatting information about
                <paramref name="value" />.
            </param>
            <param name="dateTimeStyle">
                A bitwise combination of one or more enumeration values that indicate the permitted format
                of <paramref name="value" />.
            </param>
            <param name="outValue">
                When this method returns, contains the s<see cref="T:System.DateTime" /> value equivalent to the date and time contained in
                <paramref name="value" />,
                if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed.
                The conversion fails if either the s or format parameter is null, is an empty string, or does not contain a date
                and time that correspond to the pattern specified in format.
                This parameter is passed uninitialized.
            </param>
            <returns>Returns true if the parsing was successful, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractFirstInt16(System.String,System.Int32)">
            <summary>
                Extracts the first Int16 from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted Int16.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractFirstInt32(System.String,System.Int32)">
            <summary>
                Extracts the first Int32 from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted Int32.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractFirstInt64(System.String,System.Int32)">
            <summary>
                Extracts the first Int64 from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted Int64.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllInt16(System.String,System.Int32)">
            <summary>
                Extracts all Int16 from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted Int16.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllInt32(System.String,System.Int32)">
            <summary>
                Extracts all Int32 from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted Int32.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllInt64(System.String,System.Int32)">
            <summary>
                Extracts all Int64 from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted Int64.</returns>
        </member>
        <member name="M:Extend.StringEx.ConcatAll(System.String,System.String[])">
            <summary>
                Concatenates all given strings.
            </summary>
            <exception cref="T:System.ArgumentNullException">strings can not be null.</exception>
            <param name="str">The first string to concatenate.</param>
            <param name="strings">All strings to concatenate.</param>
            <returns>The concatenation of all strings.</returns>
        </member>
        <member name="M:Extend.StringEx.ConcatAll(System.String[])">
            <summary>
                Concatenates all given strings.
            </summary>
            <exception cref="T:System.ArgumentNullException">strings can not be null.</exception>
            <param name="strings">All strings to concatenate.</param>
            <returns>The concatenation of all strings.</returns>
        </member>
        <member name="M:Extend.StringEx.ConcatAll(System.String,System.Object[])">
            <summary>
                Concatenates all given values.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="str">The first string to concatenate.</param>
            <param name="values">All values to concatenate.</param>
            <returns>The concatenation of all values.</returns>
        </member>
        <member name="M:Extend.StringEx.ConcatAll(System.Object[])">
            <summary>
                Concatenates all given values.
            </summary>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="values">All values to concatenate.</param>
            <returns>The concatenation of all values.</returns>
        </member>
        <member name="M:Extend.StringEx.Join(System.String,System.String[])">
            <summary>
                Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="separator">
                The string to use as a separator.
                Is included in the returned string only if it has more than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements in  delimited by the  string.
                If is an empty array, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.StringEx.Join(System.String,System.Object[])">
            <summary>
                Concatenates all the elements of a object array, using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="separator">
                The string to use as a separator.
                Is included in the returned string only if it has more than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements in  delimited by the  string.
                If is an empty array, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.StringEx.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <typeparam name="T">The type of the items in the IEnumerable.</typeparam>
            <param name="separator">
                The string to use as a separator.
                Is included in the returned string only if it has more than one element.
            </param>
            <param name="values">An IEnumerable that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements in  delimited by the string.
                If is an empty IEnumerable, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.StringEx.Join(System.String,System.String[],System.Int32,System.Int32)">
            <summary>
                Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="separator">
                The string to use as a separator.
                Is included in the returned string only if it has more than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <param name="startIndex">The first element in to use.</param>
            <param name="count">The number of elements of to use.</param>
            <returns>
                A string that consists of the elements in  delimited by the  string.
                If is an empty array, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extend.StringEx.IsMatch(System.String,System.String)">
            <summary>
                Gets whether a <see cref="T:System.Text.RegularExpressions.Regex" /> with the specified pattern finds a match in the specified input
                <see cref="T:System.String" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">The input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The pattern can not be null.</exception>
            <param name="input">The <see cref="T:System.String" /> to search for a match.</param>
            <param name="pattern">The regular expression pattern used by the <see cref="T:System.Text.RegularExpressions.Regex" />.</param>
            <returns>A value of true if the regular expression finds a match, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Gets whether a <see cref="T:System.Text.RegularExpressions.Regex" /> with the specified pattern finds a match in the specified input
                <see cref="T:System.String" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">The input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The pattern can not be null.</exception>
            <param name="input">The <see cref="T:System.String" /> to search for a match.</param>
            <param name="pattern">The regular expression pattern used by the <see cref="T:System.Text.RegularExpressions.Regex" />.</param>
            <param name="options">The regular expression options used by the <see cref="T:System.Text.RegularExpressions.Regex" />.</param>
            <returns>A value of true if the regular expression finds a match, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.Match(System.String,System.String)">
            <summary>
                Searches the specified input string for the first occurrence of the specified regular expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">pattern can not be null.</exception>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Extend.StringEx.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Searches the input string for the first occurrence of the specified regular expression, using the specified
                matching options.
            </summary>
            <exception cref="T:System.ArgumentNullException">input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">pattern can not be null.</exception>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Extend.StringEx.Matches(System.String,System.String)">
            <summary>
                Searches the specified input string for all occurrences of a specified regular expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">pattern can not be null.</exception>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>
                A collection of the  objects found by the search. If no matches are found, the method returns an empty
                collection object.
            </returns>
        </member>
        <member name="M:Extend.StringEx.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Searches the specified input string for all occurrences of a specified regular expression, using the
                specified matching options.
            </summary>
            <exception cref="T:System.ArgumentNullException">input can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">pattern can not be null.</exception>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
            <returns>
                A collection of the  objects found by the search. If no matches are found, the method returns an empty
                collection object.
            </returns>
        </member>
        <member name="M:Extend.StringEx.ContainsAll(System.String,System.String[])">
            <summary>
                Checks if the string contains all values given.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="s">The string to check.</param>
            <param name="values">A list of string values.</param>
            <returns>Returns true if the string contains all values, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
                Checks if the string contains all values given.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="s">The string to check.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="values">A list of string values.</param>
            <returns>Returns true if the string contains all values, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ContainsAny(System.String,System.String[])">
            <summary>
                Checks if the string contains any of the values given.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="str">The string to check.</param>
            <param name="values">The values to search for.</param>
            <returns>Returns true if the string contains any of the values given, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
                Checks if the string contains any of the values given.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The values can not be null.</exception>
            <param name="str">The string to check.</param>
            <param name="values">The values to search for.</param>
            <param name="comparisonType">The string comparison type.</param>
            <returns>Returns true if the string contains any of the values given, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.Extract(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                Extracts parts of the input string, based on the predicate given.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <param name="str">The string to extract.</param>
            <param name="predicate">The predicate.</param>
            <returns>The extracted parts of the input string.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractNumbers(System.String)">
            <summary>
                Extracts all numbers of the input string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to extract the numbers from.</param>
            <returns>The extracted numbers.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractLetters(System.String)">
            <summary>
                Extracts all letters of the input string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to extract the letters from.</param>
            <returns>The extracted letters.</returns>
        </member>
        <member name="M:Extend.StringEx.GetAfter(System.String,System.String,System.Int32)">
            <summary>
                Gets the part of the string after the specified value, starting at the given start index.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified start index is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search.</param>
            <param name="startIndex">The start index of the substring.</param>
            <returns>The string after the specified value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetAfter(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                Gets the part of the string after the specified value, starting at the given start index
                and ending after the specified number of characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search.</param>
            <param name="startIndex">The start index of the string.</param>
            <param name="length">The length of the string, from the start index.</param>
            <returns>The string after the specified value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetAfter(System.String,System.Char,System.Int32)">
            <summary>
                Gets the part of the string after the specified value, starting at the given start index.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified start index is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search.</param>
            <param name="startIndex">The start index of the substring.</param>
            <returns>The string after the specified value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetAfter(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
                Gets the part of the string after the specified value, starting at the given start index
                and ending after the specified number of characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search.</param>
            <param name="startIndex">The start index of the string.</param>
            <param name="length">The length of the string, from the start index.</param>
            <returns>The string after the specified value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetBefore(System.String,System.String,System.Int32)">
            <summary>
                Gets the part of the string before the specified value, starting at the given start index.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified start index is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search for.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>
                The part of the string before the specified value, starting at the given start index.
                Or an empty string if the given string doesn't contain the given value.
            </returns>
        </member>
        <member name="M:Extend.StringEx.GetBefore(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                Gets the part of the string before the specified value, starting at the given start index
                and ending after the specified number of characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search for.</param>
            <param name="startIndex">The start index of the string.</param>
            <param name="length">The length of the string, from the start index.</param>
            <returns>
                The part of the string before the specified value, starting at the given start index.
                Or an empty string if the given string doesn't contain the given value.
            </returns>
        </member>
        <member name="M:Extend.StringEx.GetBefore(System.String,System.Char,System.Int32)">
            <summary>
                Gets the part of the string before the specified value, starting at the given start index.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified start index is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search for.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>
                The part of the string before the specified value, starting at the given start index.
                Or an empty string if the given string doesn't contain the given value.
            </returns>
        </member>
        <member name="M:Extend.StringEx.GetBefore(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
                Gets the part of the string before the specified value, starting at the given start index
                and ending after the specified number of characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="value">The value to search for.</param>
            <param name="startIndex">The start index of the string.</param>
            <param name="length">The length of the string, from the start index.</param>
            <returns>
                The part of the string before the specified value, starting at the given start index.
                Or an empty string if the given string doesn't contain the given value.
            </returns>
        </member>
        <member name="M:Extend.StringEx.GetBetween(System.String,System.String,System.String,System.Int32)">
            <summary>
                Gets the part of the input string between the before and after value, starting at the given start index.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified start index is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The part of the string between the before and after value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetBetween(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                Gets the part of the input string between the before and after value, starting at the given start index,
                and ending after the specified number of characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
            <param name="startIndex">The start index of the string.</param>
            <param name="length">The length of the string, from the start index.</param>
            <returns>The part of the string between the before and after value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetBetween(System.String,System.Char,System.Char,System.Int32)">
            <summary>
                Gets the part of the input string between the before and after value, starting at the given start index.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified start index is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The part of the string between the before and after value.</returns>
        </member>
        <member name="M:Extend.StringEx.GetBetween(System.String,System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
                Gets the part of the input string between the before and after value, starting at the given start index,
                and ending after the specified number of characters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified range is invalid.</exception>
            <param name="s">The input string.</param>
            <param name="before">The before value.</param>
            <param name="after">The after value.</param>
            <param name="startIndex">The start index of the string.</param>
            <param name="length">The length of the string, from the start index.</param>
            <returns>The part of the string between the before and after value.</returns>
        </member>
        <member name="M:Extend.StringEx.IfNotEmpty(System.String,System.String)">
            <summary>
                Returns the input value if it's not empty, otherwise the alternative value.
            </summary>
            <param name="value">The input string.</param>
            <param name="alternativeValue">The alternative value.</param>
            <returns>The input or the alternative value.</returns>
        </member>
        <member name="M:Extend.StringEx.IsAlphaNumeric(System.String)">
            <summary>
                Checks if the string is alpha numeric.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to check.</param>
            <returns>Returns true if the string is alpha numeric, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.IsNumeric(System.String)">
            <summary>
                Checks if the string is numeric.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to check.</param>
            <returns>Returns true if the string is numeric only, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.SubstringLeft(System.String,System.Int32)">
            <summary>
                Returns the specified number of characters from the start of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <param name="s">The string to get the substring of.</param>
            <param name="length">The number of characters.</param>
            <returns>Returns the specified number of characters from the start of the string.</returns>
        </member>
        <member name="M:Extend.StringEx.SubstringRight(System.String,System.Int32)">
            <summary>
                Returns the specified number of characters from the end of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to get the substring of.</param>
            <param name="length">The number of characters.</param>
            <returns>Returns the specified number of characters from the end of the string.</returns>
        </member>
        <member name="M:Extend.StringEx.SubstringLeftSafe(System.String,System.Int32)">
            <summary>
                Returns the specified number of characters from the start of the string.
                Checks if the given length is valid, if not it uses the length of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <param name="s">The string to get the substring of.</param>
            <param name="length">The number of characters.</param>
            <returns>Returns the specified number of characters from the start of the string.</returns>
        </member>
        <member name="M:Extend.StringEx.SubstringLeftSafe(System.String,System.Int32,System.Int32)">
            <summary>
                Returns the specified number of characters from the start index.
                Checks if the given start index and length is valid, if not it uses the length of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <param name="s">The string to get the substring of.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The number of characters.</param>
            <returns>Returns the specified number of characters from the start index of the string.</returns>
        </member>
        <member name="M:Extend.StringEx.SubstringRightSafe(System.String,System.Int32)">
            <summary>
                Returns the specified number of characters from the end of the string.
                Checks if the given length is valid, if not it uses the length of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to get the substring of.</param>
            <param name="length">The number of characters.</param>
            <returns>Returns the specified number of characters from the end of the string.</returns>
        </member>
        <member name="M:Extend.StringEx.RemoveLetters(System.String)">
            <summary>
                Removes all letters from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The input string.</param>
            <returns>The given string without any letters.</returns>
        </member>
        <member name="M:Extend.StringEx.RemoveNumbers(System.String)">
            <summary>
                Removes all numbers from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <param name="s">The input string.</param>
            <returns>The given string without any numbers.</returns>
        </member>
        <member name="M:Extend.StringEx.RemoveLettersAndNumbers(System.String)">
            <summary>
                Removes all letters and numbers from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <param name="s">The input string.</param>
            <returns>The given string without any letters or numbers.</returns>
        </member>
        <member name="M:Extend.StringEx.RemoveWhere(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                Removes some characters from the given string, based on the predicate specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="s">The input string.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns the input string without any of the removed characters.</returns>
        </member>
        <member name="M:Extend.StringEx.KeepWhere(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                Returns a string which only contains the characters matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate can not be null.</exception>
            <param name="str">The input string.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns a string which only contains the characters matching the given predicate.</returns>
        </member>
        <member name="M:Extend.StringEx.KeepLetters(System.String)">
            <summary>
                Removes all characters which aren't letters.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The input string.</param>
            <returns>A new string containing the letters of the input string.</returns>
        </member>
        <member name="M:Extend.StringEx.KeepNumbers(System.String)">
            <summary>
                Removes all characters which aren't numbers.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The input string.</param>
            <returns>A new string containing the numbers of the input string.</returns>
        </member>
        <member name="M:Extend.StringEx.KeepLettersAndNumbers(System.String)">
            <summary>
                Removes all characters which aren't letters or numbers.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The input string.</param>
            <returns>A new string containing the letters and numbers of the input string.</returns>
        </member>
        <member name="M:Extend.StringEx.Repeat(System.String,System.Int32)">
            <summary>
                Repeats the given string a specified number of times.
            </summary>
            <param name="s">The input string.</param>
            <param name="repeatCount">The number of repeats.</param>
            <returns>Returns the repeated string.</returns>
        </member>
        <member name="M:Extend.StringEx.ReplaceByEmpty(System.String,System.String[])">
            <summary>
                Replace all given values by an empty string.
            </summary>
            <exception cref="T:System.ArgumentNullException">s can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">values can not be null.</exception>
            <param name="s">The input string.</param>
            <param name="values">A list of all values to replace.</param>
            <returns>Returns a string with all specified values replaced by an empty string.</returns>
        </member>
        <member name="M:Extend.StringEx.Reverse(System.String)">
            <summary>
                Reverses the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="s">The string to reverse.</param>
            <returns>Returns the reversed string.</returns>
        </member>
        <member name="M:Extend.StringEx.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
                Returns a string array that contains the substrings in this string that are
                delimited by the given separator. A parameter specifies
                whether to return empty array elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The separator can not be null.</exception>
            <param name="value">The string to split.</param>
            <param name="separator">A string that delimit the substrings in this string.</param>
            <param name="stringSplitOption">
                <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements
                from the array returned; or System.StringSplitOptions.None to include empty
                array elements in the array returned.
            </param>
            <returns>
                Returns an array whose elements contain the substrings in this string that are delimited by the separator.
            </returns>
        </member>
        <member name="M:Extend.StringEx.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
                Returns a string array that contains the substrings in this string that are
                delimited by elements of a specified string array. A parameter specifies
                whether to return empty array elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The separator can not be null.</exception>
            <param name="value">The string to split.</param>
            <param name="separators">
                An array of strings that delimit the substrings in this string, an empty
                array that contains no delimiters, or null.
            </param>
            <param name="stringSplitOption">
                <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements
                from the array returned; or System.StringSplitOptions.None to include empty
                array elements in the array returned.
            </param>
            <returns>
                Returns an array whose elements contain the substrings in this string that are delimited
                by one or more strings in separator.
            </returns>
        </member>
        <member name="M:Extend.StringEx.Truncate(System.String,System.Int32,System.String)">
            <summary>
                Truncates the given string to the specified maximum length and adds the specified
                suffix to the end of the truncated string.
            </summary>
            <param name="str">The string to truncate.</param>
            <param name="maxLength">The maximum length of the truncated string.</param>
            <param name="suffix">The suffix of the truncated string.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:Extend.StringEx.IsAlpha(System.String)">
            <summary>
                Checks if the string is alpha.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string can not be null.</exception>
            <param name="str">The string to check.</param>
            <returns>Returns true if the string is alpha only, otherwise false.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractNumber(System.String,System.Int32)">
            <summary>
                Extracts the first none floating point number from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the number from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted number as string.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractFloatingNumber(System.String,System.Int32)">
            <summary>
                Extracts the first floating point number from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the number from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted floating point number as string.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllNumbers(System.String,System.Int32)">
            <summary>
                Extracts all numbers from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted numbers as string.</returns>
        </member>
        <member name="M:Extend.StringEx.ExtractAllFloatingNumbers(System.String,System.Int32)">
            <summary>
                Extracts all floating point numbers from the given string.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start index.</exception>
            <param name="value">The string to extract the decimal from.</param>
            <param name="startIndex">The start index of the string.</param>
            <returns>The extracted floating point numbers as strings.</returns>
        </member>
        <member name="M:Extend.StringEx.FormatFileExtension(System.String)">
            <summary>
                Formats the given file extension.
            </summary>
            <remarks>
                Formatted extension will have the following format: ".txt".
            </remarks>
            <param name="fileExtension">The file extension to format.</param>
            <exception cref="T:System.ArgumentNullException">The file extension can not be null.</exception>
            <exception cref="T:System.ArgumentException">Can not format a empty string to a file extension.</exception>
            <returns>The correct formatted file extension.</returns>
        </member>
        <member name="M:Extend.StringEx.GetFileExtension(System.String)">
            <summary>
                Gets the extension of the given file.
            </summary>
            <exception cref="T:System.ArgumentNullException">The file name can not be null.</exception>
            <param name="fileName">The name of the file.</param>
            <returns>The file extension.</returns>
        </member>
        <member name="T:Extend.StringBuilderEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Text.StringBuilder" />.
            </summary>
        </member>
        <member name="M:Extend.StringBuilderEx.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
                Appends a formated line to the given string builder.
            </summary>
            <exception cref="T:System.ArgumentNullException">The string builder can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The format can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The arguments can not be null.</exception>
            <param name="sb">The string builder to append the line to.</param>
            <param name="format">The <see cref="T:System.String" /> containing the format items.</param>
            <param name="args">The array containing all the corresponding values.</param>
            <returns>Returns the string builder.</returns>
        </member>
        <member name="T:Extend.TimeSpanEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.TimeSpan" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.TimeSpan" />.
            </summary>
        </member>
        <member name="M:Extend.TimeSpanEx.Past(System.TimeSpan)">
            <summary>
                Subtracts the specified time span to the current date time.
            </summary>
            <param name="timeSpan">The time span to subtract.</param>
            <returns>Returns the current date time with the specified time span subtracted from it.</returns>
        </member>
        <member name="M:Extend.TimeSpanEx.Future(System.TimeSpan)">
            <summary>
                Adds the given time span to the current date time.
            </summary>
            <param name="timeSpan">The time span to add.</param>
            <returns>Returns the current date time with the specified time span added to it.</returns>
        </member>
        <member name="T:Extend.ExecutionResult`1">
            <summary>
                Class representing the result of a safe method execution.
            </summary>
        </member>
        <member name="P:Extend.ExecutionResult`1.Exception">
            <summary>
                Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Extend.ExecutionResult`1.Result">
            <summary>
                Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Extend.IComparableTEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.IComparable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.IComparable`1" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.IComparable" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.IComparable" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.IComparable" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.IComparable`1" />.
            </summary>
        </member>
        <member name="M:Extend.IComparableTEx.Between``1(``0,``0,``0)">
            <summary>
                Checks if the given value is between (exclusive) the minValue and maxValue.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The min value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The max value can not be null.</exception>
            <typeparam name="T">The type of the values to compare.</typeparam>
            <param name="value">The value to check.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>Returns true if the given value is between the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:Extend.IComparableTEx.BetweenInclusive``1(``0,``0,``0)">
            <summary>
                Checks if the given value is between (inclusive) the minValue and maxValue.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The min value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The max value can not be null.</exception>
            <typeparam name="T">The type of the values to compare.</typeparam>
            <param name="value">The value to check.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>Returns true if the given value is between the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:Extend.IComparableTEx.SmallerOrEquals``1(``0,``0)">
            <summary>
                Checks if the value is smaller or equals to the given compare value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The compare value can not be null.</exception>
            <param name="value">The value to check.</param>
            <param name="compareValue">The value to compare with.</param>
            <returns>
                Returns true if the value is smaller or equals to the given compare value,
                otherwise false.
            </returns>
        </member>
        <member name="M:Extend.IComparableTEx.Smaller``1(``0,``0)">
            <summary>
                Checks if the value is smaller than the given compare value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The compare value can not be null.</exception>
            <param name="value">The value to check.</param>
            <param name="compareValue">The value to compare with.</param>
            <returns>
                Returns true if the value is smaller than the given compare value,
                otherwise false.
            </returns>
        </member>
        <member name="M:Extend.IComparableTEx.GreaterOrEquals``1(``0,``0)">
            <summary>
                Checks if the value is greater or equals to the given compare value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The compare value can not be null.</exception>
            <param name="value">The value to check.</param>
            <param name="compareValue">The value to compare with.</param>
            <returns>
                Returns true if the value is greater or equals to the given compare value,
                otherwise false.
            </returns>
        </member>
        <member name="M:Extend.IComparableTEx.Greater``1(``0,``0)">
            <summary>
                Checks if the value is greater than the given compare value.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The compare value can not be null.</exception>
            <param name="value">The value to check.</param>
            <param name="compareValue">The value to compare with.</param>
            <returns>
                Returns true if the value is greater than the given compare value,
                otherwise false.
            </returns>
        </member>
        <member name="T:Extend.TypeEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
            <summary>
                Class containing some extension methods for <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:Extend.TypeEx.GetAttributeDefinitions``1(System.Type)">
            <summary>
                Gets the attributes of the proprieties of the given type.
            </summary>
            <exception cref="T:System.ArgumentNullException">t can not be null.</exception>
            <typeparam name="TAttribute">The type of attributes to return.</typeparam>
            <param name="t">The type to get the attribute definitions from.</param>
            <returns>Returns the attribute definitions of the given type.</returns>
        </member>
        <member name="M:Extend.TypeEx.GetGenericTypeArgument(System.Type)">
            <summary>
                Gets the first generic argument of the given type.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to get the generic argument from.</param>
            <returns>Returns the first generic argument of the given type, or null if the type does not have any generic arguments.</returns>
        </member>
        <member name="M:Extend.TypeEx.GetNameWithNamespace(System.Type)">
            <summary>
                Gets the name including namespace and assembly of the given type.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to get the name of.</param>
            <returns>Returns the name of the given type.</returns>
        </member>
        <member name="M:Extend.TypeEx.GetAssemblyName(System.Type)">
            <summary>
                Gets the name of the assembly of the given type.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to get the assembly name of.</param>
            <returns>Returns the assembly name without version and key.</returns>
        </member>
        <member name="M:Extend.TypeEx.GetNameWithNamespaceSimpleType(System.Type)">
            <summary>
                Gets the name of a type without any generic arguments.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to get the name of.</param>
            <returns>Returns the name and namespace of a simple type.</returns>
        </member>
        <member name="M:Extend.TypeEx.GetPublicSettableProperties(System.Type)">
            <summary>
                Gets the property info of each public settable property of the given type.
            </summary>
            <exception cref="T:System.ArgumentNullException">memberType can not be null.</exception>
            <param name="memberType">The type to get the properties of.</param>
            <returns>Returns the property infos.</returns>
        </member>
        <member name="M:Extend.TypeEx.ImplementsICollectionT(System.Type)">
            <summary>
                Checks if the given type implements <see cref="T:System.Collections.Generic.ICollection`1" />
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to check.</param>
            <returns>Returns a value of true if the given type implements <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:Extend.TypeEx.IsIEnumerableT(System.Type)">
            <summary>
                Checks if the given type implements <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to check.</param>
            <returns>Returns a value of true if the given type implements <see cref="T:System.Collections.Generic.IEnumerable`1" />; otherwise, false.</returns>
        </member>
        <member name="M:Extend.TypeEx.IsMicrosoftType(System.Type)">
            <summary>
                Checks if th given type is a Microsoft type, based on the company attribute of it's declaring assembly.
            </summary>
            <exception cref="T:System.ArgumentNullException">type can not be null.</exception>
            <param name="type">The type to check.</param>
            <returns>Returns a value of true if the given type is a Microsoft type; otherwise, false.</returns>
        </member>
        <member name="T:Extend.KeyEqualityComparer`2">
            <summary>
                Key based equality comparer.
            </summary>
            <typeparam name="TSource">The type of the objects to test for equality.</typeparam>
            <typeparam name="TKey">The type of the key to compare.</typeparam>
        </member>
        <member name="F:Extend.KeyEqualityComparer`2._comparer">
            <summary>
                Stores the key comparer.
            </summary>
        </member>
        <member name="F:Extend.KeyEqualityComparer`2._keySelector">
            <summary>
                Stores the key selector.
            </summary>
        </member>
        <member name="M:Extend.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
                Creates a new instance of the <see cref="T:Extend.KeyEqualityComparer`2" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">keySelector can not be null.</exception>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">An optional comparer, used to compare the keys.</param>
        </member>
        <member name="M:Extend.KeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
                Determines whether the specified objects are equal.
            </summary>
            <returns>
                true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <typeparamref name="TSource" /> to compare.</param>
            <param name="y">The second object of type <typeparamref name="TSource" /> to compare.</param>
        </member>
        <member name="M:Extend.KeyEqualityComparer`2.GetHashCode(`0)">
            <summary>
                Returns a hash code for the specified object.
            </summary>
            <returns>
                A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">
                The type of <paramref name="obj" /> is a reference type and
                <paramref name="obj" /> is null.
            </exception>
        </member>
        <member name="T:Extend.InstanceCreator">
            <summary>
                Class containing the logic to create instances.
            </summary>
        </member>
        <member name="P:Extend.InstanceCreator.DefaultFactories">
            <summary>
                Gets the default factories.
            </summary>
            <remarks>The default factories.</remarks>
        </member>
        <member name="P:Extend.InstanceCreator.DefaultMemberSelectionRules">
            <summary>
                Gets the default member selection rule.
            </summary>
            <value>The default member selection rule.</value>
        </member>
        <member name="P:Extend.InstanceCreator.DefaultMemberChildreSelectionRules">
            <summary>
                Gets the default member children selection rule.
            </summary>
            <value>The default member children selection rule.</value>
        </member>
        <member name="P:Extend.InstanceCreator.PopulateCollections">
            <summary>
                Gets or sets a value determining whether collections should get populated or not.
            </summary>
            <value>A value determining whether collections should get populated or not.</value>
        </member>
        <member name="P:Extend.InstanceCreator.PopulateCollectionsMinCount">
            <summary>
                Gets or sets the minimum number of items to generate for a collection.
            </summary>
            <value>The minimum number of items to generate for a collection.</value>
        </member>
        <member name="P:Extend.InstanceCreator.PopulateCollectionsMaxCount">
            <summary>
                Gets or sets the maximum number of items to generate for a collection.
            </summary>
            <value>The maximum number of items to generate for a collection.</value>
        </member>
        <member name="P:Extend.InstanceCreator.AnonymousItemName">
            <summary>
                Gets or sets the name used for anonymous items.
            </summary>
            <remarks>
                Targets collection items.
            </remarks>
            <value>The name used for anonymous items.</value>
        </member>
        <member name="P:Extend.InstanceCreator.RuleInspector">
            <summary>
                Gets or sets the <see cref="T:Extend.IMemberSelectionRuleInspector" /> used to inspect member selection rules.
            </summary>
            <value>The <see cref="T:Extend.IMemberSelectionRuleInspector" /> used to inspect member selection rules.</value>
        </member>
        <member name="M:Extend.InstanceCreator.#cctor">
            <summary>
                Initializes the <see cref="T:Extend.InstanceCreator" /> class.
            </summary>
        </member>
        <member name="M:Extend.InstanceCreator.CreateInstanceOptions``1">
            <summary>
                Creates instance options for the specified type.
            </summary>
            <typeparam name="T">The type to create an instance of.</typeparam>
            <returns>Returns the new created create instance options.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.CreateInstance``1">
            <summary>
                Creates an instance of the specified type without any special configuration.
            </summary>
            <typeparam name="T">The type to create an instance of.</typeparam>
            <returns>Returns the new created instance.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.CreateInstance``1(Extend.ICreateInstanceOptionsComplete{``0})">
            <summary>
                Creates an instance of the specified type based on the given options.
            </summary>
            <exception cref="T:System.ArgumentNullException">options can not be null.</exception>
            <typeparam name="T">The type to create an instance of.</typeparam>
            <param name="options">Some create instance options.</param>
            <returns>Returns the new created instance.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetMemberInformation(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Extend.IMemberInformation)">
            <summary>
                Gets a <see cref="T:Extend.IMemberInformation" /> for each given <see cref="T:System.Reflection.PropertyInfo" />.
            </summary>
            <param name="propertyInfos">The property informations.</param>
            <param name="parentMemberInformation">The parent of the given properties.</param>
            <returns>Returns the new created <see cref="T:Extend.IMemberInformation" />.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.IncludeMember``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Gets a value determining whether the member should be included or not.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">No matching rule was found.</exception>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns a value of true if the member should be included; otherwise, false.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.IncludeChildMembers``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Gets a value determining whether the children should be included or not.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">No matching rule was found.</exception>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns a value of true if the children should be included; otherwise, false.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.ShouldMemberBeIncluded(Extend.IMemberInformation,System.Collections.Generic.IEnumerable{Extend.IMemberSelectionRule}[])">
            <summary>
                Gets a value determining whether the member should be included or not.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">No matching rule was found.</exception>
            <param name="memberInformation">The member to check.</param>
            <param name="selectionRuleSets">
                A set of member selection rules.
                Note: collections must be in correct order.
            </param>
            <returns>Returns a value of true if the member should be included; otherwise, false.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetCollectionItemCount``1(Extend.ICreateInstanceOptionsComplete{``0})">
            <summary>
                Gets the number of items to create for a collection.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <returns>Returns the number of items to create.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.PopulateCollection``1(Extend.ICreateInstanceOptionsComplete{``0})">
            <summary>
                Gets a value determining whether collections should get populated or not.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <returns>Returns a value of true if collections should get populated or not.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetAnonymousItemName``1(Extend.ICreateInstanceOptionsComplete{``0})">
            <summary>
                Gets the name for anonymous items.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <returns>Returns the name to use.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.CreateRootMember``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Creates the root instance.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">Value creation failed.</exception>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to create.</param>
            <returns>Returns the created value.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetValue``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Gets a value for the given member.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">Value creation failed.</exception>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns the created value.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.TryCreateIEnumerableValue(Extend.IMemberInformation)">
            <summary>
                Tries to create an IEnumerable value for the given type.
            </summary>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns the created value, or null if the given type is not an array type (IEnumerable).</returns>
        </member>
        <member name="M:Extend.InstanceCreator.TryCreateArrayValue``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Tries to create an array value for the given type.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns the created value, or null if the given type is not an array type.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.CreateValueUsingAcrivator(Extend.IMemberInformation)">
            <summary>
                Creates a value for the given member using <see cref="T:System.Activator" />.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">Creation throw an exception.</exception>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns the created value.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetFactory``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Gets the matching factory for the given member.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">Multiple matching factories found.</exception>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns the matching factory, or null if no factory was found.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetExactlymatchingFactory``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Gets the matching factory for the given member.
            </summary>
            <exception cref="T:Extend.CreateInstanceException">Multiple matching factories found.</exception>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <returns>Returns the matching factory, or null if no factory was found.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.GetTypeFromNullable(System.Type)">
            <summary>
                Gets the 'inner' type from a nullable type.
            </summary>
            <param name="possibleNullableType">The possible nullable type.</param>
            <returns>Returns the inner type, or null if the given type is not a nullable.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.TryPopulateCollection``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation,System.Object)">
            <summary>
                Populates the given instance if it is a collection, based on the collection configuration.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The member to check.</param>
            <param name="collectionInstance">The instance to populate.</param>
            <returns>Returns the populated or unmodified instance.</returns>
        </member>
        <member name="M:Extend.InstanceCreator.SetAllMembers``1(Extend.ICreateInstanceOptionsComplete{``0},Extend.IMemberInformation)">
            <summary>
                Sets all members of the given member.
            </summary>
            <typeparam name="T">The type to create an instance of.</typeparam>
            <param name="options">Some create instance options.</param>
            <param name="memberInformation">The current member.</param>
        </member>
        <member name="M:Extend.InstanceCreator.CreateDefaultFactories">
            <summary>
                Creates the default factories.
            </summary>
        </member>
        <member name="M:Extend.InstanceCreator.CreateDefaultMemberSelectionRules">
            <summary>
                Creates the default member selection rules.
            </summary>
        </member>
        <member name="M:Extend.InstanceCreator.CreateDefaultMemberChildreSelectionRules">
            <summary>
                Creates the default member children selection rules.
            </summary>
        </member>
        <member name="T:Extend.CreateInstanceException">
            <summary>
                Exception thrown when the creation of an instance fails.
            </summary>
        </member>
        <member name="P:Extend.CreateInstanceException.FactoryInformation">
            <summary>
                Gets information about the factories.
            </summary>
            <value>Information about the factories.</value>
        </member>
        <member name="P:Extend.CreateInstanceException.SelectionRuleRuleInformation">
            <summary>
                Gets information about the selection.
            </summary>
            <value>Information about the selection rules.</value>
        </member>
        <member name="P:Extend.CreateInstanceException.MemberInformation">
            <summary>
                Gets information about the member.
            </summary>
            <value>Information about the member.</value>
        </member>
        <member name="M:Extend.CreateInstanceException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.CreateInstanceException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Extend.CreateInstanceException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.CreateInstanceException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference  if no inner exception is specified.
            </param>
        </member>
        <member name="M:Extend.CreateInstanceException.#ctor(System.String,System.Exception,System.String,System.String,Extend.IMemberInformation)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.CreateInstanceException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference  if no inner exception is specified.
            </param>
            <param name="factoryInformation">Information about the factories.</param>
            <param name="selectionRuleInformation">Information about selection rules.</param>
            <param name="memberInformation">The current member.</param>
        </member>
        <member name="T:Extend.MemberSelectionResultEx">
            <summary>
                Class containing some extension methods for <see cref="T:Extend.MemberSelectionResult" />.
            </summary>
        </member>
        <member name="M:Extend.MemberSelectionResultEx.AsBoolean(Extend.MemberSelectionResult)">
            <summary>
                Converts the given <see cref="T:Extend.MemberSelectionResult" /> to a boolean value indicating whether to include or not.
            </summary>
            <param name="memberSelectionResult">The <see cref="T:Extend.MemberSelectionResult" /> to convert.</param>
            <returns>Returns the boolean value of the given <see cref="T:Extend.MemberSelectionResult" />.</returns>
        </member>
        <member name="T:Extend.InstanceFactoryBase">
            <summary>
                Base class for instance factories.
            </summary>
        </member>
        <member name="M:Extend.InstanceFactoryBase.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.InstanceFactoryBase" /> class.
            </summary>
            <param name="name">The name of the factory.</param>
            <param name="description">The description of the factory.</param>
        </member>
        <member name="M:Extend.InstanceFactoryBase.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:Extend.InstanceFactoryBase.AddSelectionRule(Extend.IMemberSelectionRule)">
            <summary>
                Adds the given <see cref="T:Extend.IMemberSelectionRule" /> to the factory.
            </summary>
            <exception cref="T:System.ArgumentNullException">memberSelectionRule can not be null.</exception>
            <param name="memberSelectionRule">The <see cref="T:Extend.IMemberSelectionRule" /> to add.</param>
            <returns>Returns the modified factory.</returns>
        </member>
        <member name="M:Extend.InstanceFactoryBase.CreateValue(Extend.IMemberInformation)">
            <summary>
                Gets the value for the given <see cref="T:Extend.IMemberInformation" />.
            </summary>
            <param name="memberInformation">Information about the member to create a value for.</param>
            <returns>Returns the created value.</returns>
        </member>
        <member name="P:Extend.InstanceFactoryBase.FactoryName">
            <summary>
                Gets the name of the factory.
            </summary>
            <value>The name of the factory.</value>
        </member>
        <member name="P:Extend.InstanceFactoryBase.FactoryDescription">
            <summary>
                Gets the description of the factory.
            </summary>
            <value>The description of the factory.</value>
        </member>
        <member name="P:Extend.InstanceFactoryBase.SelectionRules">
            <summary>
                Gets the selection rules of the factory.
            </summary>
            <value>The selection rules of the factory.</value>
        </member>
        <member name="T:Extend.IInstanceFactory">
            <summary>
                Interface representing a value factory.
            </summary>
        </member>
        <member name="P:Extend.IInstanceFactory.FactoryName">
            <summary>
                Gets the name of the factory.
            </summary>
            <value>The name of the factory.</value>
        </member>
        <member name="P:Extend.IInstanceFactory.FactoryDescription">
            <summary>
                Gets the description of the factory.
            </summary>
            <value>The description of the factory.</value>
        </member>
        <member name="P:Extend.IInstanceFactory.SelectionRules">
            <summary>
                Gets the selection rules of the factory.
            </summary>
            <value>The selection rules of the factory.</value>
        </member>
        <member name="M:Extend.IInstanceFactory.AddSelectionRule(Extend.IMemberSelectionRule)">
            <summary>
                Adds the given <see cref="T:Extend.IMemberSelectionRule" /> to the factory.
            </summary>
            <exception cref="T:System.ArgumentNullException">memberSelectionRule can not be null.</exception>
            <param name="memberSelectionRule">The <see cref="T:Extend.IMemberSelectionRule" /> to add.</param>
            <returns>Returns the modified factory.</returns>
        </member>
        <member name="M:Extend.IInstanceFactory.CreateValue(Extend.IMemberInformation)">
            <summary>
                Gets the value for the given <see cref="T:Extend.IMemberInformation" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">memberSelectionRule can not be null.</exception>
            <param name="memberInformation">Information about the member to create a value for.</param>
            <returns>Returns the created value.</returns>
        </member>
        <member name="T:Extend.ExpressionInstanceFactory">
            <summary>
                Factory used to create values for instance members.
            </summary>
        </member>
        <member name="F:Extend.ExpressionInstanceFactory._factory">
            <summary>
                The factory.
            </summary>
        </member>
        <member name="M:Extend.ExpressionInstanceFactory.#ctor(System.Func{Extend.IMemberInformation,System.Object},System.String,System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Extend.ExpressionInstanceFactory" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">factory can not be null.</exception>
            <param name="factory">The factory.</param>
            <param name="name">The name of the factory.</param>
            <param name="description">The description of the factory.</param>
        </member>
        <member name="M:Extend.ExpressionInstanceFactory.CreateValue(Extend.IMemberInformation)">
            <summary>
                Gets the value for the given <see cref="T:Extend.IMemberInformation" />.
            </summary>
            <param name="memberInformation">Information about the member to create a value for.</param>
            <returns>Returns the created value.</returns>
        </member>
        <member name="T:Extend.InstanceFactoryProvider">
            <summary>
                Factory provider.
            </summary>
        </member>
        <member name="M:Extend.InstanceFactoryProvider.GetDefaultFactories">
            <summary>
                Gets the default instance factories.
            </summary>
            <returns>Returns the factories.</returns>
        </member>
        <member name="T:Extend.CreateInstanceOptions`1">
            <summary>
                Class representing the options for the create instance feature.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
        </member>
        <member name="F:Extend.CreateInstanceOptions`1._currentFactoriy">
            <summary>
                Gets or sets the current factory.
            </summary>
            <value>The current factory.</value>
        </member>
        <member name="F:Extend.CreateInstanceOptions`1._currentMemberSelectionMode">
            <summary>
                Gets or sets the current member selection mode (include or exclude).
            </summary>
            <value>The current member selection mode (include or exclude).</value>
        </member>
        <member name="F:Extend.CreateInstanceOptions`1._currentMemberSelectionTarget">
            <summary>
                Gets the current member selection target (member or member-children).
            </summary>
            <value>The current member selection target (member or member-children).</value>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.AddMemberSlectionRule(Extend.IMemberSelectionRule)">
            <summary>
                Adds the given member selection rule to the correct member selection collection.
            </summary>
            <param name="memberSelectionRule">The member selection rule to add.</param>
            <returns>Returns the current instance.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.Including(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Includes all members matching the specified options.
            </summary>
            <exception cref="T:System.ArgumentNullException">configurationFunc can not be null.</exception>
            <param name="configurationFunc">Function used to configure the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.Including(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Includes all members matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to find the members to include.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.Excluding(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Excludes all members matching the specified options.
            </summary>
            <exception cref="T:System.ArgumentNullException">configurationFunc can not be null.</exception>
            <param name="configurationFunc">Function used to configure the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.Excluding(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Excludes all members matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to find the members to exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.IncludingChildrenOf(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Includes the children of all members matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to find the members to include.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.IncludingChildrenOf(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Includes the children of all members matching the specified options.
            </summary>
            <exception cref="T:System.ArgumentNullException">configurationFunc can not be null.</exception>
            <param name="configurationFunc">Function used to configure the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.ExcludingChildrenOf(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Excludes the children of all members matching the specified options.
                The members themselves will still get created.
            </summary>
            <exception cref="T:System.ArgumentNullException">configurationFunc can not be null.</exception>
            <param name="configurationFunc">Function used to configure the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.ExcludingChildrenOf(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Excludes the children of all members matching the given predicate.
                The members themselves will still get created.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to find the members to exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.PopulateCollectionItemCount(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Configures the number of items to create for collection members.
            </summary>
            <exception cref="T:System.ArgumentException">Maximum is not greater than minimum.</exception>
            <param name="min">The minimum number of items to create.</param>
            <param name="max">The maximum number of items to create.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.PopulateCollectionMembers(System.Nullable{System.Boolean})">
            <summary>
                Configures the creation of collection items.
            </summary>
            <param name="populateCollections">
                A value determining whether items for collection types should be created or not. Null
                means use default configuration.
            </param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.SetAnonymousItemName(System.String)">
            <summary>
                Configures the name of anonymous items.
            </summary>
            <param name="anonymousItemName">The name used for anonymouns items, or null to use global configuration.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.WithFactory(System.Func{Extend.IMemberInformation,System.Object})">
            <summary>
                Adds the given factory to the value providers.
            </summary>
            <exception cref="T:System.ArgumentNullException">factory can not be null.</exception>
            <param name="factory">The factory to add.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.Complete">
            <summary>
                Ends the configuration and returns the configuration result.
            </summary>
            <returns>Returns the completely configured create instance options. </returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.IsTypeOf``1">
            <summary>
                Adds a type based member selection rule.
            </summary>
            <typeparam name="TTarget">The type to match.</typeparam>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.ByPath(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Matches for members which have a matching path.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can no the null.</exception>
            <param name="expression">Expression representing the member path.</param>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.ByPath(System.String)">
            <summary>
                Matches for members which have a matching path.
            </summary>
            <exception cref="T:System.ArgumentNullException">path can no the null.</exception>
            <param name="path">The member path.</param>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.IsNotTypeOf``1">
            <summary>
                Adds a type based member selection rule.
            </summary>
            <typeparam name="TTarget">The type to match.</typeparam>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.AllMembers">
            <summary>
                Matches all members.
            </summary>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.For(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Factory will be used to create values for members matching the specified options.
            </summary>
            <exception cref="T:System.ArgumentNullException">configurationFunc can not be null.</exception>
            <param name="configurationFunc">Function used to configure the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.For(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Factory will be used to create values for members matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to find the members which should get created by the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.NotFor(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Factory will NOT be used to create values for members matching the specified options.
            </summary>
            <exception cref="T:System.ArgumentNullException">configurationFunc can not be null.</exception>
            <param name="configurationFunc">Function used to configure the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.CreateInstanceOptions`1.NotFor(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Factory will NOT be used to create values for members matching the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to find the members which should NOT get created by the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.Factories">
            <summary>
                Gets all factories.
            </summary>
            <value>All factories.</value>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.MemberChildrenSelectionRules">
            <summary>
                Gets all member-children selection rules.
            </summary>
            <value>All member-children selection rules.</value>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.MemberSelectionRules">
            <summary>
                Gets all member selection rules.
            </summary>
            <value>All member selection rules.</value>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.PopulateCollections">
            <summary>
                Gets a value determining whether collection members should be populated or not.
            </summary>
            <value>A value determining whether collection members should be populated or not.</value>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.PopulateCollectionsMaxCount">
            <summary>
                Gets the maximum number of items to create.
            </summary>
            <value>The maximum number of items to create.</value>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.PopulateCollectionsMinCount">
            <summary>
                Gets the minimum number of items to create.
            </summary>
            <value>The minimum number of items to create.</value>
        </member>
        <member name="P:Extend.CreateInstanceOptions`1.AnonymousItemName">
            <summary>
                Gets the name to use for anonymous items.
            </summary>
            <value>The name to use for anonymous items.</value>
        </member>
        <member name="T:Extend.ICreateInstanceOptions`1">
            <summary>
                Interface representing a set of options used to create an instance of a type.
            </summary>
            <typeparam name="T">The type of the instance to create.</typeparam>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.Complete">
            <summary>
                Ends the configuration and returns the configuration result.
            </summary>
            <returns>Returns the completely configured create instance options. </returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.Excluding(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Excludes all members matching the specified options.
            </summary>
            <param name="configurationFunc">Function used to configuration the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.Excluding(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Excludes all members matching the given predicate.
            </summary>
            <param name="predicate">The predicate used to find the members to exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.ExcludingChildrenOf(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Excludes the children of all members matching the given predicate.
                The members themselves will still get created.
            </summary>
            <param name="predicate">The predicate used to find the members to exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.ExcludingChildrenOf(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Excludes the children of all members matching the specified options.
                The members themselves will still get created.
            </summary>
            <param name="configurationFunc">Function used to configure the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.Including(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Includes all members matching the specified options.
            </summary>
            <param name="configurationFunc">Function used to configuration the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.Including(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Includes all members matching the given predicate.
            </summary>
            <param name="predicate">The predicate used to find the members to include.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.IncludingChildrenOf(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Includes the children of all members matching the given predicate.
            </summary>
            <param name="predicate">The predicate used to find the members to include.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.IncludingChildrenOf(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Includes the children of all members matching the specified options.
            </summary>
            <param name="configurationFunc">Function used to configure the exclude.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.PopulateCollectionItemCount(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Configures the number of items to create for collection members.
            </summary>
            <exception cref="T:System.ArgumentException">Maximum is not greater than minimum.</exception>
            <param name="min">The minimum number of items to create.</param>
            <param name="max">The maximum number of items to create.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.PopulateCollectionMembers(System.Nullable{System.Boolean})">
            <summary>
                Configures the creation of collection items.
            </summary>
            <param name="populateCollections">
                A value determining whether items for collection types should be created or not. Null
                means use default configuration.
            </param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.SetAnonymousItemName(System.String)">
            <summary>
                Configures the name of anonymous items.
            </summary>
            <param name="anonymousItemName">The name used for anonymous items, or null to use global configuration.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.ICreateInstanceOptions`1.WithFactory(System.Func{Extend.IMemberInformation,System.Object})">
            <summary>
                Adds the given factory to the value providers.
            </summary>
            <exception cref="T:System.ArgumentNullException">factory can not be null.</exception>
            <param name="factory">The factory to add.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="T:Extend.ICreateInstanceOptionsComplete`1">
            <summary>
                Interface representing a complete create instance options object.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.Factories">
            <summary>
                Gets all factories.
            </summary>
            <value>All factories.</value>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.MemberChildrenSelectionRules">
            <summary>
                Gets all member-children selection rules.
            </summary>
            <value>All member-children selection rules.</value>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.MemberSelectionRules">
            <summary>
                Gets all member selection rules.
            </summary>
            <value>All member selection rules.</value>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.PopulateCollections">
            <summary>
                Gets a value determining whether collection members should be populated or not.
            </summary>
            <value>A value determining whether collection members should be populated or not.</value>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.PopulateCollectionsMaxCount">
            <summary>
                Gets the maximum number of items to create.
            </summary>
            <value>The maximum number of items to create.</value>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.PopulateCollectionsMinCount">
            <summary>
                Gets the minimum number of items to create.
            </summary>
            <value>The minimum number of items to create.</value>
        </member>
        <member name="P:Extend.ICreateInstanceOptionsComplete`1.AnonymousItemName">
            <summary>
                Gets the name to use for anonymous items.
            </summary>
            <value>The name to use for anonymous items.</value>
        </member>
        <member name="T:Extend.IFactoryOptionsConstistent`1">
            <summary>
                Interface representing a configured factory.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
        </member>
        <member name="T:Extend.IFactoryOptionsInconsistent`1">
            <summary>
                Interface representing a not configured factory.
            </summary>
            <remarks>
                Some selection rules must be defined before the factory is valid.
            </remarks>
            <typeparam name="T">The type of the object to create.</typeparam>
        </member>
        <member name="M:Extend.IFactoryOptionsInconsistent`1.For(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Factory will be used to create values for members matching the specified options.
            </summary>
            <param name="configurationFunc">Function used to configure the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.IFactoryOptionsInconsistent`1.For(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Factory will be used to create values for members matching the given predicate.
            </summary>
            <param name="predicate">The predicate used to find the members which should get created by the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.IFactoryOptionsInconsistent`1.NotFor(System.Func{Extend.IIncludeExcludeOptions{`0},Extend.IIncludeExcludeOptions{`0}})">
            <summary>
                Factory will NOT be used to create values for members matching the specified options.
            </summary>
            <param name="configurationFunc">Function used to configure the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="M:Extend.IFactoryOptionsInconsistent`1.NotFor(System.Func{Extend.IMemberInformation,System.Boolean})">
            <summary>
                Factory will NOT be used to create values for members matching the given predicate.
            </summary>
            <param name="predicate">The predicate used to find the members which should NOT get created by the factory.</param>
            <returns>Returns the modified create instance options.</returns>
        </member>
        <member name="T:Extend.IIncludeExcludeOptions`1">
            <summary>
                Interface exposing the include/exclude member options.
            </summary>
            <typeparam name="T">The type to exclude or include members of.</typeparam>
        </member>
        <member name="M:Extend.IIncludeExcludeOptions`1.AllMembers">
            <summary>
                Matches all members.
            </summary>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.IIncludeExcludeOptions`1.ByPath(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Matches for members which have a matching path.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can no the null.</exception>
            <param name="expression">Expression representing the member path.</param>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.IIncludeExcludeOptions`1.ByPath(System.String)">
            <summary>
                Matches for members which have a matching path.
            </summary>
            <exception cref="T:System.ArgumentNullException">path can no the null.</exception>
            <param name="path">The member path.</param>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.IIncludeExcludeOptions`1.IsNotTypeOf``1">
            <summary>
                Matches for members which are NOT of the given type.
            </summary>
            <typeparam name="TTarget">The type to match.</typeparam>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="M:Extend.IIncludeExcludeOptions`1.IsTypeOf``1">
            <summary>
                Matches for members which are of the given type.
            </summary>
            <typeparam name="TTarget">The type to match.</typeparam>
            <returns>Returns the modified options.</returns>
        </member>
        <member name="T:Extend.IMemberInformation">
            <summary>
                Interface exposing information about a member.
            </summary>
        </member>
        <member name="P:Extend.IMemberInformation.MemberName">
            <summary>
                Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:Extend.IMemberInformation.MemberPath">
            <summary>
                Gets the member path of the member.
            </summary>
            <value>The member path of the member.</value>
        </member>
        <member name="P:Extend.IMemberInformation.MemberType">
            <summary>
                Gets the type of the member.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="P:Extend.IMemberInformation.MemberObject">
            <summary>
                Gets or sets a reference to the member.
            </summary>
            <remarks>
                Not always set.
            </remarks>
            <value>A reference to the member.</value>
        </member>
        <member name="P:Extend.IMemberInformation.PropertyInfo">
            <summary>
                Gets the property info representing the member.
            </summary>
            <remarks>
                Not always set.
            </remarks>
            <value>The property info representing the member.</value>
        </member>
        <member name="T:Extend.MemberInformation">
            <summary>
                Class containing information about a member.
            </summary>
        </member>
        <member name="P:Extend.MemberInformation.MemberName">
            <summary>
                Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="P:Extend.MemberInformation.MemberPath">
            <summary>
                Gets the member path of the member.
            </summary>
            <value>The member path of the member.</value>
        </member>
        <member name="P:Extend.MemberInformation.MemberType">
            <summary>
                Gets the type of the member.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="P:Extend.MemberInformation.MemberObject">
            <summary>
                Gets or sets a reference to the member.
            </summary>
            ///
            <remarks>
                Can be null.
            </remarks>
            <value>A reference to the member.</value>
        </member>
        <member name="P:Extend.MemberInformation.PropertyInfo">
            <summary>
                Gets the property info representing the member.
            </summary>
            <remarks>
                Not always set.
            </remarks>
            <value>The property info representing the member.</value>
        </member>
        <member name="T:Extend.IMemberSelectionRule">
            <summary>
                Interface representing a member selection rule.
            </summary>
        </member>
        <member name="P:Extend.IMemberSelectionRule.RuleName">
            <summary>
                Gets the name of the rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:Extend.IMemberSelectionRule.RuleDescription">
            <summary>
                Gets the description of the rule.
            </summary>
            <value>The description of the rule.</value>
        </member>
        <member name="M:Extend.IMemberSelectionRule.GetSelectionResult(Extend.IMemberInformation)">
            <summary>
                Gets the selection result for the given member.
            </summary>
            <param name="member">The member to get the selection result for.</param>
            <returns>Returns the selection result for the given member.</returns>
        </member>
        <member name="T:Extend.IMemberSelectionRuleInspector">
            <summary>
                Interface representing a rule inspector.
            </summary>
        </member>
        <member name="M:Extend.IMemberSelectionRuleInspector.Inspect(System.Collections.Generic.IEnumerable{Extend.IMemberSelectionRule},Extend.IMemberInformation)">
            <summary>
                Inspects the given rules for the given member.
            </summary>
            <param name="rules">A collection of rules.</param>
            <param name="memberInformation">The member information to check.</param>
            <returns>Returns the inspection result.</returns>
        </member>
        <member name="T:Extend.CompareMode">
            <summary>
                Enumeration of all possible compare modes.
            </summary>
        </member>
        <member name="F:Extend.CompareMode.Is">
            <summary>
                Check if equals to value.
            </summary>
        </member>
        <member name="F:Extend.CompareMode.IsNot">
            <summary>
                Check if is not equals to value.
            </summary>
        </member>
        <member name="T:Extend.MemberSelectionMode">
            <summary>
                Enumeration of all member selection modes.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionMode.Include">
            <summary>
                Include a member.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionMode.Exclude">
            <summary>
                Exude a member.
            </summary>
        </member>
        <member name="T:Extend.MemberSelectionResult">
            <summary>
                Enumeration of all possible member selection results.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionResult.IncludeMember">
            <summary>
                Include the member.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionResult.ExcludeMember">
            <summary>
                Exclude the member.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionResult.Neutral">
            <summary>
                Rule does not apply to member.
            </summary>
        </member>
        <member name="T:Extend.MemberSelectionRuleTarget">
            <summary>
                Enumeration of all member selection rule targets.
            </summary>
            <remarks>
                Used to build create instance options.
            </remarks>
        </member>
        <member name="F:Extend.MemberSelectionRuleTarget.Member">
            <summary>
                The rule targets the member itself.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionRuleTarget.MemberChildren">
            <summary>
                The rule targets the children of the member.
            </summary>
        </member>
        <member name="F:Extend.MemberSelectionRuleTarget.Factory">
            <summary>
                The rule targets a factory.
            </summary>
        </member>
        <member name="T:Extend.MemberSelectionRuleInspector">
            <summary>
                Class containing the logic to inspect member selection rules.
            </summary>
        </member>
        <member name="M:Extend.MemberSelectionRuleInspector.Inspect(System.Collections.Generic.IEnumerable{Extend.IMemberSelectionRule},Extend.IMemberInformation)">
            <summary>
                Inspects the given rules for the given member.
            </summary>
            <exception cref="T:System.ArgumentNullException">rules can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">memberInformation can not be null.</exception>
            <param name="rules">A collection of rules.</param>
            <param name="memberInformation">The member information to check.</param>
            <returns>Returns the inspection result.</returns>
        </member>
        <member name="T:Extend.MemberSelectionRuleProvider">
            <summary>
                Member selection provider.
            </summary>
        </member>
        <member name="M:Extend.MemberSelectionRuleProvider.GetDefaultMemberChildreSelectionRules">
            <summary>
                Gets the default member children selection rules.
            </summary>
            <returns>Returns the member children selection rules.</returns>
        </member>
        <member name="M:Extend.MemberSelectionRuleProvider.GetDefaultMemberSelectionRules">
            <summary>
                Gets the default member selection rules.
            </summary>
            <returns>Returns the member selection rules.</returns>
        </member>
        <member name="T:Extend.AllMemberSelectionRule">
            <summary>
                Member selection rule matching all members.
            </summary>
        </member>
        <member name="F:Extend.AllMemberSelectionRule._selectionMode">
            <summary>
                Gets the selection mode.
            </summary>
            <value>The selection mode.</value>
        </member>
        <member name="M:Extend.AllMemberSelectionRule.#ctor(Extend.MemberSelectionMode,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.AllMemberSelectionRule" /> class.
            </summary>
            <param name="selectionMode">The selection mode to apply.</param>
            <param name="name">The name of the rule.</param>
            <param name="description">The description of the rule.</param>
        </member>
        <member name="M:Extend.AllMemberSelectionRule.GetSelectionResult(Extend.IMemberInformation)">
            <summary>
                Gets the selection result for the given member.
            </summary>
            <param name="member">The member to get the selection result for.</param>
            <returns>Returns the selection result for the given member.</returns>
        </member>
        <member name="M:Extend.AllMemberSelectionRule.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:Extend.MemberSelectionRuleBase">
            <summary>
                Base class for member selection rules.
            </summary>
        </member>
        <member name="M:Extend.MemberSelectionRuleBase.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.MemberSelectionRuleBase" /> class.
            </summary>
            <param name="name">The name of the rule.</param>
            <param name="description">The description of the rule.</param>
        </member>
        <member name="M:Extend.MemberSelectionRuleBase.GetSelectionResult(Extend.IMemberInformation)">
            <summary>
                Gets the selection result for the given member.
            </summary>
            <param name="member">The member to get the selection result for.</param>
            <returns>Returns the selection result for the given member.</returns>
        </member>
        <member name="P:Extend.MemberSelectionRuleBase.RuleName">
            <summary>
                Gets the name of the rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:Extend.MemberSelectionRuleBase.RuleDescription">
            <summary>
                Gets the description of the rule.
            </summary>
            <value>The description of the rule.</value>
        </member>
        <member name="T:Extend.ExpressionMemberSelectionRule">
            <summary>
                Expression based member selection rule.
            </summary>
        </member>
        <member name="F:Extend.ExpressionMemberSelectionRule._predicate">
            <summary>
                Gets the member selection predicate.
            </summary>
            <value>The member selection predicate.</value>
        </member>
        <member name="F:Extend.ExpressionMemberSelectionRule._selectionMode">
            <summary>
                Gets the selection mode.
            </summary>
            <value>The selection mode.</value>
        </member>
        <member name="M:Extend.ExpressionMemberSelectionRule.#ctor(System.Func{Extend.IMemberInformation,System.Boolean},Extend.MemberSelectionMode,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.ExpressionMemberSelectionRule" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <param name="predicate">The predicate used to determine if a member matches the rule.</param>
            <param name="selectionMode">The selection mode to apply.</param>
            <param name="name">The name of the rule.</param>
            <param name="description">The description of the rule.</param>
        </member>
        <member name="M:Extend.ExpressionMemberSelectionRule.GetSelectionResult(Extend.IMemberInformation)">
            <summary>
                Gets the selection result for the given member.
            </summary>
            <param name="member">The member to get the selection result for.</param>
            <returns>Returns the selection result for the given member.</returns>
        </member>
        <member name="M:Extend.ExpressionMemberSelectionRule.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:Extend.PathMemberSelectionRule">
            <summary>
                Path based member selection rule.
            </summary>
        </member>
        <member name="F:Extend.PathMemberSelectionRule._memberPath">
            <summary>
                Gets the member path used to find matching members.
            </summary>
        </member>
        <member name="F:Extend.PathMemberSelectionRule._selectionMode">
            <summary>
                Gets the selection mode.
            </summary>
        </member>
        <member name="M:Extend.PathMemberSelectionRule.#ctor(System.String,Extend.MemberSelectionMode,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.PathMemberSelectionRule" /> class.
            </summary>
            <param name="memberPath">The member path used to find matching members.</param>
            <param name="selectionMode">The selection mode to apply.</param>
            <param name="name">The name of the rule.</param>
            <param name="description">The description of the rule.</param>
        </member>
        <member name="M:Extend.PathMemberSelectionRule.GetSelectionResult(Extend.IMemberInformation)">
            <summary>
                Gets the selection result for the given member.
            </summary>
            <param name="member">The member to get the selection result for.</param>
            <returns>Returns the selection result for the given member.</returns>
        </member>
        <member name="M:Extend.PathMemberSelectionRule.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:Extend.TypeMemberSelectionRule">
            <summary>
                Type based member selection rule.
            </summary>
        </member>
        <member name="F:Extend.TypeMemberSelectionRule._compareMode">
            <summary>
                Gets the compare mode of the selection rule.
            </summary>
            <value>The compare mode of the selection rule.</value>
        </member>
        <member name="F:Extend.TypeMemberSelectionRule._selectionMode">
            <summary>
                Gets the selection mode.
            </summary>
            <value>The selection mode.</value>
        </member>
        <member name="F:Extend.TypeMemberSelectionRule._type">
            <summary>
                Gets the type to compare with the type of given members.
            </summary>
            <value>The type to compare with the type of given members.</value>
        </member>
        <member name="M:Extend.TypeMemberSelectionRule.#ctor(System.Type,Extend.MemberSelectionMode,Extend.CompareMode,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Extend.TypeMemberSelectionRule" /> class.
            </summary>
            <param name="type">The type to compare with the type of given members.</param>
            <param name="selectionMode">The selection mode to apply.</param>
            <param name="compareMode">The compare mode to apply.</param>
            <param name="name">The name of the rule.</param>
            <param name="description">The description of the rule.</param>
        </member>
        <member name="M:Extend.TypeMemberSelectionRule.GetSelectionResult(Extend.IMemberInformation)">
            <summary>
                Gets the selection result for the given member.
            </summary>
            <param name="member">The member to get the selection result for.</param>
            <returns>Returns the selection result for the given member.</returns>
        </member>
        <member name="M:Extend.TypeMemberSelectionRule.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:Extend.AndSpecification`1">
            <summary>
                AND specification.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="M:Extend.AndSpecification`1.#ctor(Extend.ISpecification{`0},Extend.ISpecification{`0})">
            <summary>
                Initialize a new instance of the <see cref="T:Extend.AndSpecification`1" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">left can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">right can not be null.</exception>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="M:Extend.AndSpecification`1.IsSatisfiedBy(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.AndSpecification`1.IsSatisfiedByWithMessages(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns a collection of error messages.</returns>
        </member>
        <member name="T:Extend.ExpressionSpecification`1">
            <summary>
                Class representing an expression specification.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="F:Extend.ExpressionSpecification`1._expression">
            <summary>
                The predicate used to validate the given objects.
            </summary>
        </member>
        <member name="F:Extend.ExpressionSpecification`1._message">
            <summary>
                The error message.
            </summary>
        </member>
        <member name="M:Extend.ExpressionSpecification`1.#ctor(System.Func{`0,System.Boolean},System.String)">
            <summary>
                Initialize a new instance of the <see cref="T:Extend.ExpressionSpecification`1" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">expression can not be null.</exception>
            <param name="expression">The validation expression.</param>
            <param name="message">The validation error message.</param>
        </member>
        <member name="M:Extend.ExpressionSpecification`1.IsSatisfiedBy(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.ExpressionSpecification`1.IsSatisfiedByWithMessages(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns a collection of error messages.</returns>
        </member>
        <member name="T:Extend.ISpecification`1">
            <summary>
                Interface representing a specification.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="M:Extend.ISpecification`1.And(Extend.ISpecification{`0})">
            <summary>
                Combines the current specification with the given specification using an AND link.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="M:Extend.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.ISpecification`1.IsSatisfiedByWithMessages(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns a collection of error messages.</returns>
        </member>
        <member name="M:Extend.ISpecification`1.Or(Extend.ISpecification{`0})">
            <summary>
                Combines the current specification with the given specification using a OR link.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="M:Extend.ISpecification`1.XOr(Extend.ISpecification{`0})">
            <summary>
                Combines the current specification with the given specification using a XOR link.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="T:Extend.OperatorSpecification`1">
            <summary>
                Abstract base class for operator specifications.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="F:Extend.OperatorSpecification`1.Left">
            <summary>
                The left specification.
            </summary>
        </member>
        <member name="F:Extend.OperatorSpecification`1.Right">
            <summary>
                The right specification.
            </summary>
        </member>
        <member name="M:Extend.OperatorSpecification`1.#ctor(Extend.ISpecification{`0},Extend.ISpecification{`0})">
            <summary>
                Initialize a new instance of the <see cref="T:Extend.OperatorSpecification`1" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">left can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">right can not be null.</exception>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="T:Extend.OrSpecification`1">
            <summary>
                OR specification.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="M:Extend.OrSpecification`1.#ctor(Extend.ISpecification{`0},Extend.ISpecification{`0})">
            <summary>
                Initialize a new instance of the <see cref="T:Extend.OrSpecification`1" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">left can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">right can not be null.</exception>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="M:Extend.OrSpecification`1.IsSatisfiedBy(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.OrSpecification`1.IsSatisfiedByWithMessages(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns a collection of error messages.</returns>
        </member>
        <member name="T:Extend.Specification`1">
            <summary>
                Abstract base class for a specification.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="M:Extend.Specification`1.IsSatisfiedBy(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.Specification`1.IsSatisfiedByWithMessages(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns a collection of error messages.</returns>
        </member>
        <member name="M:Extend.Specification`1.And(Extend.ISpecification{`0})">
            <summary>
                Combines the current specification with the given specification using an AND link.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="M:Extend.Specification`1.Or(Extend.ISpecification{`0})">
            <summary>
                Combines the current specification with the given specification using a OR link.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="M:Extend.Specification`1.XOr(Extend.ISpecification{`0})">
            <summary>
                Combines the current specification with the given specification using a XOR link.
            </summary>
            <param name="specification">The specification to add.</param>
            <returns>Returns the combined specifications.</returns>
        </member>
        <member name="T:Extend.XOrSpecification`1">
            <summary>
                XOr specification.
            </summary>
            <typeparam name="T">The target type of the specification.</typeparam>
        </member>
        <member name="M:Extend.XOrSpecification`1.#ctor(Extend.ISpecification{`0},Extend.ISpecification{`0})">
            <summary>
                Initialize a new instance of the <see cref="T:Extend.XOrSpecification`1" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">left can not be null.</exception>
            <exception cref="T:System.ArgumentNullException">right can not be null.</exception>
            <param name="left">The left specification.</param>
            <param name="right">The right specification.</param>
        </member>
        <member name="M:Extend.XOrSpecification`1.IsSatisfiedBy(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns true if the object satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Extend.XOrSpecification`1.IsSatisfiedByWithMessages(`0)">
            <summary>
                Checks if the given objects satisfies the specification.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>Returns a collection of error messages.</returns>
        </member>
        <member name="T:Extend.ITreeNode`1">
            <summary>
                Interface representing a tree node.
            </summary>
            <typeparam name="T">The type of the node's value.</typeparam>
        </member>
        <member name="P:Extend.ITreeNode`1.Value">
            <summary>
                Gets or sets the value of the node.
            </summary>
            <value>The value of the node.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.DisposeTraversalDirection">
            <summary>
                Gets or sets the dispose traversal direction.
            </summary>
            <value>The dispose traversal direction.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.SearchTraversalDirection">
            <summary>
                Gets or sets the search traversal direction.
            </summary>
            <value>The search traversal direction.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.AncestorsTraversalDirection">
            <summary>
                Gets or sets the ancestors traversal direction.
            </summary>
            <value>The ancestors traversal direction.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.DescendantsTraversalDirection">
            <summary>
                Gets or sets the descendants traversal direction.
            </summary>
            <value>The descendants traversal direction.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.TraversalDirection">
            <summary>
                Gets or sets the traversal direction used to enumerate the nodes.
            </summary>
            <value>The traversal direction used to enumerate the nodes.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.Parent">
            <summary>
                Gets or sets the parent of the node.
            </summary>
            <value>The parent of the node.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.Children">
            <summary>
                Gets the children of the node.
            </summary>
            <value>The children of the node.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.Root">
            <summary>
                Gets the root of the tree.
            </summary>
            <value>The root of the tree.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.Depth">
            <summary>
                Gets the depth of the node.
            </summary>
            <value>The depth of the node.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.HasChildren">
            <summary>
                Gets a value indicating whether the node has any children or not.
            </summary>
            <value>A value indicating whether the node has any children or not.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.HasParent">
            <summary>
                Gets a value indicating whether the node has a parent or not.
            </summary>
            <value>A value indicating whether the node has a parent or not.</value>
        </member>
        <member name="P:Extend.ITreeNode`1.Descendants">
            <summary>
                Gets an enumeration of all tree nodes which are below the current node in the tree.
            </summary>
            <value>An enumeration of all tree nodes which are below the current node in the tree.</value>
        </member>
        <member name="M:Extend.ITreeNode`1.FindValue(System.Func{Extend.ITreeNode{`0},System.Boolean})">
            <summary>
                Gets the values which matches the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <remarks>
                Starts the search at the current tree node and traverses down the tree (Direction based on
                <see cref="P:Extend.ITreeNode`1.SearchTraversalDirection" />).
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>Returns the values which matches the given predicate.</returns>
        </member>
        <member name="M:Extend.ITreeNode`1.FindNode(System.Func{Extend.ITreeNode{`0},System.Boolean})">
            <summary>
                Gets the nodes which matches the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <remarks>
                Starts the search at the current tree node and traverses down the tree (Direction based on
                <see cref="P:Extend.ITreeNode`1.SearchTraversalDirection" />).
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>Returns the nodes which matches the given predicate.</returns>
        </member>
        <member name="M:Extend.ITreeNode`1.FindNode(`0)">
            <summary>
                Gets the nodes with the given value.
            </summary>
            <param name="value">The value to search.</param>
            <returns>Returns the nodes with the given value.</returns>
        </member>
        <member name="M:Extend.ITreeNode`1.Add(`0)">
            <summary>
                Adds the given value as child to the node.
            </summary>
            <param name="value">The value to add.</param>
            <returns>Returns the added node.</returns>
        </member>
        <member name="M:Extend.ITreeNode`1.Add(Extend.ITreeNode{`0})">
            <summary>
                Adds the given node as child to the node, if it is not already a child of the node.
            </summary>
            <param name="node">The node to add.</param>
            <returns>Returns the added node.</returns>
        </member>
        <member name="M:Extend.ITreeNode`1.SetParent(Extend.ITreeNode{`0},System.Boolean,System.Boolean)">
            <summary>
                Sets the parent of the tree node.
            </summary>
            <param name="parent">The new parent.</param>
            <param name="attacheToNewParent">
                A value determining whether the node should add it self to the children of the new parent
                or not.
            </param>
            <remarks>
                TODO: add test for detachFromOldParent
            </remarks>
            <param name="detachFromOldParent">A value indicating whether the node should detach itself from it's old parent or not.</param>
        </member>
        <member name="M:Extend.ITreeNode`1.SetAllDirections(Extend.TreeTraversalDirection)">
            <summary>
                Sets all directions (<see cref="P:Extend.ITreeNode`1.DisposeTraversalDirection" />, <see cref="P:Extend.ITreeNode`1.SearchTraversalDirection" />,
                <see cref="P:Extend.ITreeNode`1.AncestorsTraversalDirection" />, <see cref="P:Extend.ITreeNode`1.DescendantsTraversalDirection" />).
            </summary>
            <param name="direction">The new direction.</param>
        </member>
        <member name="T:Extend.ITreeNodeAware`1">
            <summary>
                Interface representing a type which gets informed about it's tree node.
            </summary>
            <typeparam name="T">The type of the nodes value.</typeparam>
        </member>
        <member name="P:Extend.ITreeNodeAware`1.Node">
            <summary>
                Gets or sets the node of the object.
            </summary>
            <value>The node of the object.</value>
        </member>
        <member name="T:Extend.ITreeNodeCollection`1">
            <summary>
                Interface representing a collection of tree nodes.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="P:Extend.ITreeNodeCollection`1.Parent">
            <summary>
                Gets the parent of the collection.
            </summary>
            <value>The parent of the collection.</value>
        </member>
        <member name="M:Extend.ITreeNodeCollection`1.Add(`0)">
            <summary>
                Adds the given value as new node to the collection.
            </summary>
            <param name="value">The value to add.</param>
            <returns>Returns the new added node.</returns>
        </member>
        <member name="M:Extend.ITreeNodeCollection`1.Add(Extend.ITreeNode{`0},System.Boolean)">
            <summary>
                Adds the given item to the list and sets it's parent to the parent of the list.
            </summary>
            <exception cref="T:System.ArgumentNullException">item can not be null.</exception>
            <param name="item">The item to add.</param>
            <param name="setParent">
                A value indicating weather the parent of the given item should be set to the parent of the
                collection or not.
            </param>
        </member>
        <member name="M:Extend.ITreeNodeCollection`1.Remove(Extend.ITreeNode{`0},System.Boolean)">
            <summary>
                Removes the given item form the list and sets it's parent to null.
            </summary>
            <exception cref="T:System.ArgumentNullException">item can not be null.</exception>
            <param name="item">The item to remove.</param>
            <param name="setParent">A value indicating whether the parent of the item should get set to null or not.</param>
            <returns>
                true if item is successfully removed; otherwise, false. This method also
                returns false if item was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </returns>
        </member>
        <member name="M:Extend.ITreeNodeCollection`1.DetachFromParent">
            <summary>
                Detaches the collection and all it's items form it's current parent.
            </summary>
        </member>
        <member name="T:Extend.TreeTraversalDirection">
            <summary>
                Enumeration of all traversal directions.
            </summary>
        </member>
        <member name="F:Extend.TreeTraversalDirection.TopDown">
            <summary>
                Traverse from top to bottom.
            </summary>
        </member>
        <member name="F:Extend.TreeTraversalDirection.BottomUp">
            <summary>
                Traverse from bottom to top.
            </summary>
        </member>
        <member name="T:Extend.TreeNode`1">
            <summary>
                Class representing a node of a tree.
            </summary>
            <typeparam name="T">The type of the value of the node.</typeparam>
        </member>
        <member name="F:Extend.TreeNode`1._ancestorsTraversalDirection">
            <summary>
                The ancestors traversal direction.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._children">
            <summary>
                The children of the node.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._descendantsTraversalDirection">
            <summary>
                The descendants traversal direction.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._disposeTraversalDirection">
            <summary>
                The disposable traversal direction.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._parent">
            <summary>
                The parent of the node.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._searchTraversalDirection">
            <summary>
                The search traversal direction.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._traversalDirection">
            <summary>
                The traversal direction.
            </summary>
        </member>
        <member name="F:Extend.TreeNode`1._value">
            <summary>
                The value of the node.
            </summary>
        </member>
        <member name="M:Extend.TreeNode`1.#ctor">
            <summary>
                Creates a new instance of the <see cref="T:Extend.TreeNode`1" /> class.
            </summary>
        </member>
        <member name="M:Extend.TreeNode`1.#ctor(Extend.ITreeNode{`0})">
            <summary>
                Creates a new instance of the <see cref="T:Extend.TreeNode`1" /> class.
            </summary>
            <param name="parent">The parent of the node.</param>
        </member>
        <member name="M:Extend.TreeNode`1.#ctor(Extend.ITreeNodeCollection{`0})">
            <summary>
                Creates a new instance of the <see cref="T:Extend.TreeNode`1" /> class.
            </summary>
            <param name="children">The children of the node.</param>
        </member>
        <member name="M:Extend.TreeNode`1.#ctor(`0,Extend.ITreeNodeCollection{`0})">
            <summary>
                Creates a new instance of the <see cref="T:Extend.TreeNode`1" /> class.
            </summary>
            <param name="value">The value of the node.</param>
            <param name="children">The children of the node.</param>
        </member>
        <member name="M:Extend.TreeNode`1.#ctor(`0,Extend.ITreeNode{`0})">
            <summary>
                Creates a new instance of the <see cref="T:Extend.TreeNode`1" /> class.
            </summary>
            <param name="value">The value of the node.</param>
            <param name="parent">The parent of the node.</param>
        </member>
        <member name="M:Extend.TreeNode`1.#ctor(`0,Extend.ITreeNode{`0},Extend.ITreeNodeCollection{`0})">
            <summary>
                Creates a new instance of the <see cref="T:Extend.TreeNode`1" /> class.
            </summary>
            <param name="value">The value of the node.</param>
            <param name="parent">The parent of the node.</param>
            <param name="children">The children of the node.</param>
        </member>
        <member name="M:Extend.TreeNode`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="P:Extend.TreeNode`1.Ancestors">
            <summary>
                Gets an enumeration of all tree nodes which are above the current node in the tree.
            </summary>
            <value>An enumeration of all tree nodes which are above the current node in the tree.</value>
        </member>
        <member name="P:Extend.TreeNode`1.Value">
            <summary>
                Gets or sets the value of the node.
            </summary>
            <value>The value of the node.</value>
        </member>
        <member name="P:Extend.TreeNode`1.Parent">
            <summary>
                Gets or sets the parent of the node.
            </summary>
            <remarks>
                Detaches the node from it's old parent and attaches it to it's new parent.
            </remarks>
            <value>The parent of the node.</value>
        </member>
        <member name="P:Extend.TreeNode`1.Root">
            <summary>
                Gets the root of the tree.
            </summary>
            <value>The root of the tree.</value>
        </member>
        <member name="P:Extend.TreeNode`1.Children">
            <summary>
                Gets or sets the children of the node.
            </summary>
            <value>The children of the node.</value>
        </member>
        <member name="P:Extend.TreeNode`1.SearchTraversalDirection">
            <summary>
                Gets or sets the search traversal direction.
            </summary>
            <value>The search traversal direction.</value>
        </member>
        <member name="P:Extend.TreeNode`1.DisposeTraversalDirection">
            <summary>
                Gets or sets the dispose traversal direction.
            </summary>
            <value>The dispose traversal direction.</value>
        </member>
        <member name="P:Extend.TreeNode`1.AncestorsTraversalDirection">
            <summary>
                Gets or sets the ancestors traversal direction.
            </summary>
            <value>The ancestors traversal direction.</value>
        </member>
        <member name="P:Extend.TreeNode`1.DescendantsTraversalDirection">
            <summary>
                Gets or sets the descendants traversal direction.
            </summary>
            <value>The descendants traversal direction.</value>
        </member>
        <member name="P:Extend.TreeNode`1.TraversalDirection">
            <summary>
                Gets or sets the traversal direction used to enumerate the nodes.
            </summary>
            <value>The traversal direction used to enumerate the nodes.</value>
        </member>
        <member name="P:Extend.TreeNode`1.Depth">
            <summary>
                Gets the depth of the node.
            </summary>
            <value>The depth of the node.</value>
        </member>
        <member name="P:Extend.TreeNode`1.HasChildren">
            <summary>
                Gets a value indicating whether the node has any children or not.
            </summary>
            <value>A value indicating whether the node has any children or not.</value>
        </member>
        <member name="P:Extend.TreeNode`1.HasParent">
            <summary>
                Gets a value indicating whether the node has a parent or not.
            </summary>
            <value>A value indicating whether the node has a parent or not.</value>
        </member>
        <member name="P:Extend.TreeNode`1.Descendants">
            <summary>
                Gets an enumeration of all tree nodes which are below the current node in the tree.
            </summary>
            <value>An enumeration of all tree nodes which are below the current node in the tree.</value>
        </member>
        <member name="M:Extend.TreeNode`1.FindValue(System.Func{Extend.ITreeNode{`0},System.Boolean})">
            <summary>
                Gets the values which matches the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <remarks>
                Starts the search at the current tree node and traverses down the tree (Direction based on
                <see cref="P:Extend.TreeNode`1.SearchTraversalDirection" />).
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>Returns the values which matches the given predicate.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.FindNode(System.Func{Extend.ITreeNode{`0},System.Boolean})">
            <summary>
                Gets the nodes which matches the given predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException">predicate can not be null.</exception>
            <remarks>
                Starts the search at the current tree node and traverses down the tree (Direction based on
                <see cref="P:Extend.TreeNode`1.SearchTraversalDirection" />).
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>Returns the nodes which matches the given predicate.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.FindNode(`0)">
            <summary>
                Gets the nodes with the given value.
            </summary>
            <param name="value">The value to search.</param>
            <returns>Returns the nodes with the given value.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.Add(`0)">
            <summary>
                Adds the given value as child to the node.
            </summary>
            <param name="value">The value to add.</param>
            <returns>Returns the added node.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.Add(Extend.ITreeNode{`0})">
            <summary>
                Adds the given node as child to the node, if it is not already a child of the node.
            </summary>
            <param name="node">The node to add.</param>
            <returns>Returns the added node.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.SetParent(Extend.ITreeNode{`0},System.Boolean,System.Boolean)">
            <summary>
                Sets the parent of the tree node.
            </summary>
            <param name="parent">The new parent.</param>
            <param name="attacheToNewParent">
                A value determining whether the node should add it self to the children of the new parent
                or not.
            </param>
            <param name="detachFromOldParent">A value indicating whether the node should detach itself from it's old parent or not.</param>
        </member>
        <member name="M:Extend.TreeNode`1.SetAllDirections(Extend.TreeTraversalDirection)">
            <summary>
                Sets all directions (<see cref="P:Extend.TreeNode`1.DisposeTraversalDirection" />, <see cref="P:Extend.TreeNode`1.SearchTraversalDirection" />,
                <see cref="P:Extend.TreeNode`1.AncestorsTraversalDirection" />, <see cref="P:Extend.TreeNode`1.DescendantsTraversalDirection" />).
            </summary>
            <param name="direction">The new direction.</param>
        </member>
        <member name="M:Extend.TreeNode`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Extend.TreeNode`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Extend.TreeNode`1.GetEnumeratorInternal">
            <summary>
                Internal implementation to get a enumeration in the specified order.
            </summary>
            <returns>Returns a  enumeration of all nodes.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.GetDescendants(System.Collections.Generic.List{Extend.ITreeNode{`0}})">
            <summary>
                Gets the descendants of the node.
            </summary>
            <param name="descendants">A collection of descendants of the parent(s) of the current node.</param>
            <returns>Returns the given descendants, including the children of the current node if it has any.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.GetAncestors">
            <summary>
                Gets the ancestors of the node.
            </summary>
            <exception cref="T:System.NotSupportedException">Parent is not of type TreeNode{T}.</exception>
            <returns>Returns the given ancestors, including the parent of the current node if it has one.</returns>
        </member>
        <member name="M:Extend.TreeNode`1.Dispose">
            <summary>
                Release all resources hold by the node.
            </summary>
        </member>
        <member name="M:Extend.TreeNode`1.Finalize">
            <summary>
                Destructs the tree node..
            </summary>
        </member>
        <member name="M:Extend.TreeNode`1.Dispose(System.Boolean)">
            <summary>
                Releases the managed and unmanaged resource hold by the node.
            </summary>
            <param name="disposing">A value of true to release managed resources, false to release unmanaged resources.</param>
        </member>
        <member name="T:Extend.TreeNodeCollection`1">
            <summary>
                Class representing a collection of tree nodes.
            </summary>
            <typeparam name="T">The type of the value of the tree nodes.</typeparam>
        </member>
        <member name="F:Extend.TreeNodeCollection`1._parent">
            <summary>
                The parent of the tree node collection.
            </summary>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.#ctor(Extend.ITreeNode{`0})">
            <summary>
                Initialize a new instance of the <see cref="T:Extend.TreeNodeCollection`1" /> class.
            </summary>
            <param name="parent">The parent of the node.</param>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="P:Extend.TreeNodeCollection`1.Parent">
            <summary>
                Gets the parent of the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">Parent can not be null.</exception>
            <value>The parent of the collection.</value>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.Add(`0)">
            <summary>
                Adds the given value as new node to the list and sets it's parent to the parent of the list.
            </summary>
            <param name="value">The value to add.</param>
            <returns>Returns the new created node.</returns>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.DetachFromParent">
            <summary>
                Detaches the collection and all it's items form it's current parent.
            </summary>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.Add(Extend.ITreeNode{`0},System.Boolean)">
            <summary>
                Adds the given item to the list and sets it's parent to the parent of the list.
            </summary>
            <exception cref="T:System.ArgumentNullException">item can not be null.</exception>
            <param name="item">The item to add.</param>
            <param name="setParent">
                A value indicating weather the parent of the given item should be set to the parent of the
                collection or not.
            </param>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.Remove(Extend.ITreeNode{`0},System.Boolean)">
            <summary>
                Removes the given item form the list and sets it's parent to null.
            </summary>
            <exception cref="T:System.ArgumentNullException">item can not be null.</exception>
            <param name="item">The item to remove.</param>
            <param name="setParent">A value indicating whether the parent of the item should get set to null or not.</param>
            <returns>
                true if item is successfully removed; otherwise, false. This method also
                returns false if item was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </returns>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.Add(Extend.ITreeNode{`0})">
            <summary>
                Adds the given item to the list and sets it's parent to the parent of the list.
            </summary>
            <exception cref="T:System.ArgumentNullException">item can not be null.</exception>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Extend.TreeNodeCollection`1.Remove(Extend.ITreeNode{`0})">
            <summary>
                Removes the given item form the list and sets it's parent to null.
            </summary>
            <exception cref="T:System.ArgumentNullException">item can not be null.</exception>
            <param name="item">The item to remove.</param>
            <returns>
                true if item is successfully removed; otherwise, false. This method also
                returns false if item was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </returns>
        </member>
        <member name="T:Extend.RandomValueEx">
            <summary>
                Class containing some methods to generate random values.
            </summary>
        </member>
        <member name="F:Extend.RandomValueEx.Chars">
            <summary>
                Array of characters used to "generate" random characters.
            </summary>
        </member>
        <member name="F:Extend.RandomValueEx.Random">
            <summary>
                The object used to generate random values.
            </summary>
        </member>
        <member name="F:Extend.RandomValueEx.SyncLock">
            <summary>
                The object used to synchronize accesses to <see cref="P:Extend.RandomValueEx.Rnd" /> across different threads.
            </summary>
        </member>
        <member name="P:Extend.RandomValueEx.Rnd">
            <summary>
                Gets the random object used to create the random values.
            </summary>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomString">
            <summary>
                Gets random string.
            </summary>
            <returns>A random string.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomChar">
            <summary>
                Gets random char.
            </summary>
            <returns>A random char.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomStrings(System.Nullable{System.Int32})">
            <summary>
                Gets a list of random strings.
            </summary>
            <param name="numberOfItems">The number of items to generate.</param>
            <returns>A list of random strings.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomInt32(System.Int32,System.Int32)">
            <summary>
                Gets a random integer value which is in the specified range.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">min is greater than max</exception>
            <param name="min">
                The inclusive min bound.
                <value>Int32.MinValue</value>
            </param>
            <param name="max">
                The exclusive maximum bound. Must be greater than min.
                <value>Int32.MaxValue</value>
            </param>
            <returns>A random integer value.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomInt16(System.Int16,System.Int16)">
            <summary>
                Gets a random integer value which is in the specified range.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">min is greater than max</exception>
            <param name="min">
                The inclusive min bound.
                <value>Int16.MinValue</value>
            </param>
            <param name="max">
                The exclusive maximum bound. Must be greater than min.
                <value>Int16.MaxValue</value>
            </param>
            <returns>A random integer value.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomBoolean">
            <summary>
                Gets a random Boolean value.
            </summary>
            <returns>A random Boolean value.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomDateTime(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Gets a random date-time value between the given minimum and maximum.
            </summary>
            <remarks>
                Default value for minimum is: 01.01.1753.
                Default value for maximum is: 31.12.9999.
            </remarks>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>Returns the generated random date-time value.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomEnum``1">
            <summary>
                Gets a random value of the enumeration of the specified type.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>A random value of the enumeration of the specified type.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomInt64(System.Int64,System.Int64)">
            <summary>
                Gets a random long value which is in the specified range.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">min is greater than max</exception>
            <param name="min">
                The inclusive min bound.
                <value>Int64.MinValue</value>
            </param>
            <param name="max">
                The exclusive maximum bound. Must be greater than min.
                <value>Int64.MaxValue</value>
            </param>
            <returns>A random long value.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomByte">
            <summary>
                Gets a random <see cref="T:System.Byte" /> value.
            </summary>
            <returns>A random <see cref="T:System.Byte" /> value.</returns>
        </member>
        <member name="M:Extend.RandomValueEx.GetRandomDouble(System.Double,System.Double)">
            <summary>
                Gets a random <see cref="T:System.Double" /> value which is in the specified range.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">min is greater than max</exception>
            <param name="min">
                The inclusive min bound.
                <value>Double.MinValue</value>
            </param>
            <param name="max">
                The exclusive maximum bound. Must be greater than min.
                <value>Double.MaxValue</value>
            </param>
            <returns>A random <see cref="T:System.Double" /> value.</returns>
        </member>
        <member name="T:Extend.IEnumerableStringEx">
            <summary>
                Class containing some extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:Extend.IEnumerableStringEx.PathCombine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns a path combined out of the items in the given IEnumerable.
            </summary>
            <exception cref="T:System.ArgumentNullException">The enumerable can not be null.</exception>
            <param name="enumerable">The IEnumerable to act on.</param>
            <returns>The combined path.</returns>
        </member>
    </members>
</doc>
